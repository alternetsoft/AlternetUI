using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Alternet.Drawing;

namespace Alternet.UI
{
    /// <summary>
    /// Choices used in <see cref="PropertyGrid"/> items for enum and flags properties.
    /// </summary>
    public interface IPropertyGridChoices
    {
        /// <summary>
        /// Gets <see cref="IPropertyGridChoices"/> object handle.
        /// </summary>
        IntPtr Handle { get; }

        /// <summary>
        /// Gets the number of elements actually contained in the <see cref="IPropertyGridChoices"/>.
        /// </summary>
        int Count { get; }

        /// <summary>
        /// Adds new item.
        /// </summary>
        /// <param name="text">Item title.</param>
        /// <param name="value">Item value (id).</param>
        /// <param name="bitmap">Item image.</param>
        void Add(string text, int value, ImageSet? bitmap = null);

        /// <summary>
        /// Adds new item with autogenerated id.
        /// </summary>
        /// <param name="text">Item title.</param>
        /// <returns>Item id.</returns>
        int Add(string text);

        /// <summary>
        /// Adds the elements of the specified collection to the end.
        /// </summary>
        /// <param name="items">The collection whose elements should be added to the end.</param>
        void AddRange(IEnumerable<string> items);

        /// <summary>
        /// Adds the elements of the specified collection to the end.
        /// </summary>
        /// <param name="items">The collection whose elements should be added to the end.</param>
        void AddRange(IEnumerable<object> items);

        /// <summary>
        /// Searches for the specified item by it's title and returns value (id) of the item.
        /// </summary>
        /// <param name="text">Item title.</param>
        int? GetValueFromLabel(string text);

        /// <summary>
        /// Searches for the specified item by it's value and returns title of the item.
        /// </summary>
        /// <param name="value">Item value (id).</param>
        string? GetLabelFromValue(int value);

        /// <summary>
        /// Returns index of item with given label.
        /// </summary>
        /// <param name="str">Item label.</param>
        /// <returns></returns>
        int GetLabelIndex(string str);

        /// <summary>
        /// Returns index of item with given value (id).
        /// </summary>
        /// <param name="val">Item value.</param>
        /// <returns></returns>
        int GetValueIndex(int val);

        /// <summary>
        /// Inserts a single item.
        /// </summary>
        /// <param name="index">Index in list where item will be inserted.</param>
        /// <param name="text">Item title.</param>
        /// <param name="value">Item value (id).</param>
        /// <param name="bitmap">Item image.</param>
        void Insert(int index, string text, int value, ImageSet? bitmap);

        /// <summary>
        /// Returns false if this is a constant empty set of choices,
        /// which should not be modified.
        /// </summary>
        bool IsOk();

        public void SetLabelForValue<T>(T value, string label)
            where T : Enum;

        void SetLabel(int index, string value);

        void SetLabelForValue(int value, string label);

        void SetBitmap(int index, ImageSet? bitmap);

        void SetFgCol(int index, Color color);

        void SetBgCol(int index, Color color);

        Color GetFgCol(int index);

        Color GetBgCol(int index);

        /// <summary>
        /// Returns label of item at specified index.
        /// </summary>
        /// <param name="index">Item index.</param>
        string GetLabel(int index);

        /// <summary>
        /// Returns value of item at specified index.
        /// </summary>
        /// <param name="index">Item index.</param>
        int GetValue(int index);

        /// <summary>
        /// Removes items starting at specified index.
        /// </summary>
        /// <param name="index">The zero-based index of the item(s) to remove.</param>
        /// <param name="count">Number of items to remove.</param>
        void RemoveAt(int index, int count = 1);

        /// <summary>
        /// Delete all choices.
        /// </summary>
        void Clear();
    }
}
