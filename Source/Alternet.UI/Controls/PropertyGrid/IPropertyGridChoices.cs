using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Alternet.UI
{
    /// <summary>
    /// Choices used in <see cref="PropertyGrid"/> items for enum and flags properties.
    /// </summary>
    public interface IPropertyGridChoices
    {
        /// <summary>
        /// Gets <see cref="IPropertyGridChoices"/> object handle.
        /// </summary>
        IntPtr Handle { get; }

        /// <summary>
        /// Gets the number of elements actually contained in the <see cref="IPropertyGridChoices"/>.
        /// </summary>
        public int Count { get; }

        /// <summary>
        /// Adds new item.
        /// </summary>
        /// <param name="text">Item title.</param>
        /// <param name="value">Item value (id).</param>
        /// <param name="bitmap">Item image.</param>
        public void Add(string text, int value, ImageSet? bitmap = null);

        /// <summary>
        /// Adds new item with autogenerated id.
        /// </summary>
        /// <param name="text">Item title.</param>
        /// <returns>Item id.</returns>
        public int Add(string text);

        /// <summary>
        /// Adds the elements of the specified collection to the end.
        /// </summary>
        /// <param name="items">The collection whose elements should be added to the end.</param>
        public void AddRange(IEnumerable<string> items);

        /// <summary>
        /// Adds the elements of the specified collection to the end.
        /// </summary>
        /// <param name="items">The collection whose elements should be added to the end.</param>
        public void AddRange(IEnumerable<object> items);

        /// <summary>
        /// Searches for the specified item by it's title and returns value (id) of the item.
        /// </summary>
        /// <param name="text">Item title.</param>
        public int? GetValueFromLabel(string text);

        /// <summary>
        /// Searches for the specified item by it's value and returns title of the item.
        /// </summary>
        /// <param name="value">Item value (id).</param>
        public string? GetLabelFromValue(int value);

        // Returns index of item with given label.
        public int GetLabelIndex(string str);

        // Returns index of item with given value (id).
        public int GetValueIndex(int val);

        // Inserts a single item.
        public void Insert(int index, string text, int value, ImageSet? bitmapBundle);

        // Returns false if this is a constant empty set of choices,
        // which should not be modified.
        public bool IsOk();

        // Returns label of item at specified index.
        public string GetLabel(int index);

        // Returns value of item at specified index.
        public int GetValue(int index);

        // Removes count items starting at specified index.
        public void RemoveAt(int index, int count = 1);

        // Delete all choices.
        public void Clear();
    }
}
