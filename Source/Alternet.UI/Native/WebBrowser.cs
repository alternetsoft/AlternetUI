// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2023.</auto-generated>
#nullable enable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal class WebBrowser : Control
    {
        static WebBrowser()
        {
            SetEventCallback();
        }
        
        public WebBrowser()
        {
            SetNativePointer(NativeApi.WebBrowser_Create_());
        }
        
        public WebBrowser(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public bool Editable
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.WebBrowser_GetEditable_(NativePointer);
                var m = n;
                return m;
            }
            
            set
            {
                CheckDisposed();
                NativeApi.WebBrowser_SetEditable_(NativePointer, value);
            }
        }
        
        public WebViewZoom Zoom
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.WebBrowser_GetZoom_(NativePointer);
                var m = n;
                return m;
            }
            
            set
            {
                CheckDisposed();
                NativeApi.WebBrowser_SetZoom_(NativePointer, value);
            }
        }
        
        public string GetCurrentTitle()
        {
            CheckDisposed();
            var n = NativeApi.WebBrowser_GetCurrentTitle_(NativePointer);
            var m = n;
            return m;
        }
        
        public string GetCurrentURL()
        {
            CheckDisposed();
            var n = NativeApi.WebBrowser_GetCurrentURL_(NativePointer);
            var m = n;
            return m;
        }
        
        public void LoadURL(string url)
        {
            CheckDisposed();
            NativeApi.WebBrowser_LoadURL_(NativePointer, url);
        }
        
        static GCHandle eventCallbackGCHandle;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.WebBrowserEventCallbackType((obj, e, parameter) =>
                UI.Application.HandleThreadExceptions(() =>
                {
                    var w = NativeObject.GetFromNativePointer<WebBrowser>(obj, p => new WebBrowser(p));
                    if (w == null) return IntPtr.Zero;
                    return w.OnEvent(e, parameter);
                }
                ));
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.WebBrowser_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.WebBrowserEvent e, IntPtr parameter)
        {
            switch (e)
            {
                case NativeApi.WebBrowserEvent.Navigating:
                {
                    Navigating?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.WebBrowserEvent.Navigated:
                {
                    Navigated?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.WebBrowserEvent.Loaded:
                {
                    Loaded?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.WebBrowserEvent.Error:
                {
                    Error?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.WebBrowserEvent.NewWindow:
                {
                    NewWindow?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.WebBrowserEvent.TitleChanged:
                {
                    TitleChanged?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                default: throw new Exception("Unexpected WebBrowserEvent value: " + e);
            }
        }
        
        public event EventHandler? Navigating;
        public event EventHandler? Navigated;
        public event EventHandler? Loaded;
        public event EventHandler? Error;
        public event EventHandler? NewWindow;
        public event EventHandler? TitleChanged;
        
        [SuppressUnmanagedCodeSecurity]
        private class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr WebBrowserEventCallbackType(IntPtr obj, WebBrowserEvent e, IntPtr param);
            
            public enum WebBrowserEvent
            {
                Navigating,
                Navigated,
                Loaded,
                Error,
                NewWindow,
                TitleChanged,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WebBrowser_SetEventCallback_(WebBrowserEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr WebBrowser_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool WebBrowser_GetEditable_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WebBrowser_SetEditable_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern WebViewZoom WebBrowser_GetZoom_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WebBrowser_SetZoom_(IntPtr obj, WebViewZoom value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string WebBrowser_GetCurrentTitle_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string WebBrowser_GetCurrentURL_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WebBrowser_LoadURL_(IntPtr obj, string url);
            
        }
    }
}
