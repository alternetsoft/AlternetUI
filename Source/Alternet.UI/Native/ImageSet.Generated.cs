// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class ImageSet : NativeObject
    {
        static ImageSet()
        {
        }
        
        public ImageSet()
        {
            SetNativePointer(NativeApi.ImageSet_Create_());
        }
        
        public ImageSet(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public bool IsOk
        {
            get
            {
                CheckDisposed();
                return NativeApi.ImageSet_GetIsOk_(NativePointer);
            }
            
        }
        
        public bool IsReadOnly
        {
            get
            {
                CheckDisposed();
                return NativeApi.ImageSet_GetIsReadOnly_(NativePointer);
            }
            
        }
        
        public Alternet.Drawing.SizeI DefaultSize
        {
            get
            {
                CheckDisposed();
                return NativeApi.ImageSet_GetDefaultSize_(NativePointer);
            }
            
        }
        
        public void LoadFromStream(InputStream stream)
        {
            CheckDisposed();
            NativeApi.ImageSet_LoadFromStream_(NativePointer, stream.NativePointer);
        }
        
        public void AddImage(Image image)
        {
            CheckDisposed();
            NativeApi.ImageSet_AddImage_(NativePointer, image.NativePointer);
        }
        
        public void Clear()
        {
            CheckDisposed();
            NativeApi.ImageSet_Clear_(NativePointer);
        }
        
        public void LoadSvgFromStream(InputStream stream, int width, int height, Alternet.Drawing.Color color)
        {
            CheckDisposed();
            NativeApi.ImageSet_LoadSvgFromStream_(NativePointer, stream.NativePointer, width, height, color);
        }
        
        public void LoadSvgFromString(string s, int width, int height, Alternet.Drawing.Color color)
        {
            CheckDisposed();
            NativeApi.ImageSet_LoadSvgFromString_(NativePointer, s, width, height, color);
        }
        
        public void InitImage(Image image, int width, int height)
        {
            CheckDisposed();
            NativeApi.ImageSet_InitImage_(NativePointer, image.NativePointer, width, height);
        }
        
        public void InitImageFor(Image image, System.IntPtr window)
        {
            CheckDisposed();
            NativeApi.ImageSet_InitImageFor_(NativePointer, image.NativePointer, window);
        }
        
        public Alternet.Drawing.SizeI GetPreferredBitmapSizeAtScale(double scale)
        {
            CheckDisposed();
            return NativeApi.ImageSet_GetPreferredBitmapSizeAtScale_(NativePointer, scale);
        }
        
        public Alternet.Drawing.SizeI GetPreferredBitmapSizeFor(System.IntPtr window)
        {
            CheckDisposed();
            return NativeApi.ImageSet_GetPreferredBitmapSizeFor_(NativePointer, window);
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr ImageSet_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool ImageSet_GetIsOk_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool ImageSet_GetIsReadOnly_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeI ImageSet_GetDefaultSize_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ImageSet_LoadFromStream_(IntPtr obj, IntPtr stream);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ImageSet_AddImage_(IntPtr obj, IntPtr image);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ImageSet_Clear_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ImageSet_LoadSvgFromStream_(IntPtr obj, IntPtr stream, int width, int height, NativeApiTypes.Color color);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ImageSet_LoadSvgFromString_(IntPtr obj, string s, int width, int height, NativeApiTypes.Color color);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ImageSet_InitImage_(IntPtr obj, IntPtr image, int width, int height);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ImageSet_InitImageFor_(IntPtr obj, IntPtr image, System.IntPtr window);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeI ImageSet_GetPreferredBitmapSizeAtScale_(IntPtr obj, double scale);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeI ImageSet_GetPreferredBitmapSizeFor_(IntPtr obj, System.IntPtr window);
            
        }
    }
}
