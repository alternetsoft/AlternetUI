// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class PropertyGridChoices : NativeObject
    {
        static PropertyGridChoices()
        {
        }
        
        public PropertyGridChoices()
        {
            SetNativePointer(NativeApi.PropertyGridChoices_Create_());
        }
        
        public PropertyGridChoices(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public static System.IntPtr CreatePropertyGridChoices()
        {
            return NativeApi.PropertyGridChoices_CreatePropertyGridChoices_();
        }
        
        public static void Delete(System.IntPtr handle)
        {
            NativeApi.PropertyGridChoices_Delete_(handle);
        }
        
        public static void Add(System.IntPtr handle, string text, int value, ImageSet? bitmapBundle)
        {
            NativeApi.PropertyGridChoices_Add_(handle, text, value, bitmapBundle?.NativePointer ?? IntPtr.Zero);
        }
        
        public static void SetLabel(System.IntPtr handle, uint ind, string value)
        {
            NativeApi.PropertyGridChoices_SetLabel_(handle, ind, value);
        }
        
        public static void SetBitmap(System.IntPtr handle, uint ind, ImageSet? bitmap)
        {
            NativeApi.PropertyGridChoices_SetBitmap_(handle, ind, bitmap?.NativePointer ?? IntPtr.Zero);
        }
        
        public static void SetFgCol(System.IntPtr handle, uint ind, Alternet.Drawing.Color color)
        {
            NativeApi.PropertyGridChoices_SetFgCol_(handle, ind, color);
        }
        
        public static void SetFont(System.IntPtr handle, uint ind, System.IntPtr font)
        {
            NativeApi.PropertyGridChoices_SetFont_(handle, ind, font);
        }
        
        public static void SetBgCol(System.IntPtr handle, uint ind, Alternet.Drawing.Color color)
        {
            NativeApi.PropertyGridChoices_SetBgCol_(handle, ind, color);
        }
        
        public static Alternet.Drawing.Color GetFgCol(System.IntPtr handle, uint ind)
        {
            return NativeApi.PropertyGridChoices_GetFgCol_(handle, ind);
        }
        
        public static Alternet.Drawing.Color GetBgCol(System.IntPtr handle, uint ind)
        {
            return NativeApi.PropertyGridChoices_GetBgCol_(handle, ind);
        }
        
        public static System.IntPtr GetFont(System.IntPtr handle, uint ind)
        {
            return NativeApi.PropertyGridChoices_GetFont_(handle, ind);
        }
        
        public static System.IntPtr GetBitmap(System.IntPtr handle, uint ind)
        {
            return NativeApi.PropertyGridChoices_GetBitmap_(handle, ind);
        }
        
        public static void SetBitmapFromItem(System.IntPtr handle, uint ind, System.IntPtr handle2, uint ind2)
        {
            NativeApi.PropertyGridChoices_SetBitmapFromItem_(handle, ind, handle2, ind2);
        }
        
        public static void SetFontFromItem(System.IntPtr handle, uint ind, System.IntPtr handle2, uint ind2)
        {
            NativeApi.PropertyGridChoices_SetFontFromItem_(handle, ind, handle2, ind2);
        }
        
        public static string GetLabel(System.IntPtr handle, uint ind)
        {
            return NativeApi.PropertyGridChoices_GetLabel_(handle, ind);
        }
        
        public static uint GetCount(System.IntPtr handle)
        {
            return NativeApi.PropertyGridChoices_GetCount_(handle);
        }
        
        public static int GetValue(System.IntPtr handle, uint ind)
        {
            return NativeApi.PropertyGridChoices_GetValue_(handle, ind);
        }
        
        public static int GetLabelIndex(System.IntPtr handle, string str)
        {
            return NativeApi.PropertyGridChoices_GetLabelIndex_(handle, str);
        }
        
        public static int GetValueIndex(System.IntPtr handle, int val)
        {
            return NativeApi.PropertyGridChoices_GetValueIndex_(handle, val);
        }
        
        public static void Insert(System.IntPtr handle, int index, string text, int value, ImageSet? bitmapBundle)
        {
            NativeApi.PropertyGridChoices_Insert_(handle, index, text, value, bitmapBundle?.NativePointer ?? IntPtr.Zero);
        }
        
        public static bool IsOk(System.IntPtr handle)
        {
            return NativeApi.PropertyGridChoices_IsOk_(handle);
        }
        
        public static void RemoveAt(System.IntPtr handle, ulong nIndex, ulong count)
        {
            NativeApi.PropertyGridChoices_RemoveAt_(handle, nIndex, count);
        }
        
        public static void Clear(System.IntPtr handle)
        {
            NativeApi.PropertyGridChoices_Clear_(handle);
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr PropertyGridChoices_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGridChoices_CreatePropertyGridChoices_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGridChoices_Delete_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGridChoices_Add_(System.IntPtr handle, string text, int value, IntPtr bitmapBundle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGridChoices_SetLabel_(System.IntPtr handle, uint ind, string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGridChoices_SetBitmap_(System.IntPtr handle, uint ind, IntPtr bitmap);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGridChoices_SetFgCol_(System.IntPtr handle, uint ind, NativeApiTypes.Color color);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGridChoices_SetFont_(System.IntPtr handle, uint ind, System.IntPtr font);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGridChoices_SetBgCol_(System.IntPtr handle, uint ind, NativeApiTypes.Color color);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGridChoices_GetFgCol_(System.IntPtr handle, uint ind);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGridChoices_GetBgCol_(System.IntPtr handle, uint ind);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGridChoices_GetFont_(System.IntPtr handle, uint ind);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGridChoices_GetBitmap_(System.IntPtr handle, uint ind);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGridChoices_SetBitmapFromItem_(System.IntPtr handle, uint ind, System.IntPtr handle2, uint ind2);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGridChoices_SetFontFromItem_(System.IntPtr handle, uint ind, System.IntPtr handle2, uint ind2);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PropertyGridChoices_GetLabel_(System.IntPtr handle, uint ind);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern uint PropertyGridChoices_GetCount_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGridChoices_GetValue_(System.IntPtr handle, uint ind);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGridChoices_GetLabelIndex_(System.IntPtr handle, string str);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGridChoices_GetValueIndex_(System.IntPtr handle, int val);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGridChoices_Insert_(System.IntPtr handle, int index, string text, int value, IntPtr bitmapBundle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGridChoices_IsOk_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGridChoices_RemoveAt_(System.IntPtr handle, ulong nIndex, ulong count);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGridChoices_Clear_(System.IntPtr handle);
            
        }
    }
}
