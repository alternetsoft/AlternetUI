// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2023.</auto-generated>
#nullable enable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal class TransformMatrix : NativeObject
    {
        static TransformMatrix()
        {
        }
        
        public TransformMatrix()
        {
            SetNativePointer(NativeApi.TransformMatrix_Create_());
        }
        
        public TransformMatrix(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public double M11
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.TransformMatrix_GetM11_(NativePointer);
                var m = n;
                return m;
            }
            
            set
            {
                CheckDisposed();
                NativeApi.TransformMatrix_SetM11_(NativePointer, value);
            }
        }
        
        public double M12
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.TransformMatrix_GetM12_(NativePointer);
                var m = n;
                return m;
            }
            
            set
            {
                CheckDisposed();
                NativeApi.TransformMatrix_SetM12_(NativePointer, value);
            }
        }
        
        public double M21
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.TransformMatrix_GetM21_(NativePointer);
                var m = n;
                return m;
            }
            
            set
            {
                CheckDisposed();
                NativeApi.TransformMatrix_SetM21_(NativePointer, value);
            }
        }
        
        public double M22
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.TransformMatrix_GetM22_(NativePointer);
                var m = n;
                return m;
            }
            
            set
            {
                CheckDisposed();
                NativeApi.TransformMatrix_SetM22_(NativePointer, value);
            }
        }
        
        public double DX
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.TransformMatrix_GetDX_(NativePointer);
                var m = n;
                return m;
            }
            
            set
            {
                CheckDisposed();
                NativeApi.TransformMatrix_SetDX_(NativePointer, value);
            }
        }
        
        public double DY
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.TransformMatrix_GetDY_(NativePointer);
                var m = n;
                return m;
            }
            
            set
            {
                CheckDisposed();
                NativeApi.TransformMatrix_SetDY_(NativePointer, value);
            }
        }
        
        public bool IsIdentity
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.TransformMatrix_GetIsIdentity_(NativePointer);
                var m = n;
                return m;
            }
            
        }
        
        public void Initialize(double m11, double m12, double m21, double m22, double dx, double dy)
        {
            CheckDisposed();
            NativeApi.TransformMatrix_Initialize_(NativePointer, m11, m12, m21, m22, dx, dy);
        }
        
        public void Reset()
        {
            CheckDisposed();
            NativeApi.TransformMatrix_Reset_(NativePointer);
        }
        
        public void Multiply(TransformMatrix matrix)
        {
            CheckDisposed();
            NativeApi.TransformMatrix_Multiply_(NativePointer, matrix.NativePointer);
        }
        
        public void Translate(double offsetX, double offsetY)
        {
            CheckDisposed();
            NativeApi.TransformMatrix_Translate_(NativePointer, offsetX, offsetY);
        }
        
        public void Scale(double scaleX, double scaleY)
        {
            CheckDisposed();
            NativeApi.TransformMatrix_Scale_(NativePointer, scaleX, scaleY);
        }
        
        public void Rotate(double angle)
        {
            CheckDisposed();
            NativeApi.TransformMatrix_Rotate_(NativePointer, angle);
        }
        
        public void Invert()
        {
            CheckDisposed();
            NativeApi.TransformMatrix_Invert_(NativePointer);
        }
        
        public Alternet.Drawing.Point TransformPoint(Alternet.Drawing.Point point)
        {
            CheckDisposed();
            var n = NativeApi.TransformMatrix_TransformPoint_(NativePointer, point);
            var m = n;
            return m;
        }
        
        public Alternet.Drawing.Size TransformSize(Alternet.Drawing.Size size)
        {
            CheckDisposed();
            var n = NativeApi.TransformMatrix_TransformSize_(NativePointer, size);
            var m = n;
            return m;
        }
        
        public bool IsEqualTo(TransformMatrix other)
        {
            CheckDisposed();
            var n = NativeApi.TransformMatrix_IsEqualTo_(NativePointer, other.NativePointer);
            var m = n;
            return m;
        }
        
        public int GetHashCode_()
        {
            CheckDisposed();
            var n = NativeApi.TransformMatrix_GetHashCode__(NativePointer);
            var m = n;
            return m;
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr TransformMatrix_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern double TransformMatrix_GetM11_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_SetM11_(IntPtr obj, double value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern double TransformMatrix_GetM12_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_SetM12_(IntPtr obj, double value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern double TransformMatrix_GetM21_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_SetM21_(IntPtr obj, double value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern double TransformMatrix_GetM22_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_SetM22_(IntPtr obj, double value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern double TransformMatrix_GetDX_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_SetDX_(IntPtr obj, double value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern double TransformMatrix_GetDY_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_SetDY_(IntPtr obj, double value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool TransformMatrix_GetIsIdentity_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_Initialize_(IntPtr obj, double m11, double m12, double m21, double m22, double dx, double dy);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_Reset_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_Multiply_(IntPtr obj, IntPtr matrix);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_Translate_(IntPtr obj, double offsetX, double offsetY);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_Scale_(IntPtr obj, double scaleX, double scaleY);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_Rotate_(IntPtr obj, double angle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TransformMatrix_Invert_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Point TransformMatrix_TransformPoint_(IntPtr obj, NativeApiTypes.Point point);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Size TransformMatrix_TransformSize_(IntPtr obj, NativeApiTypes.Size size);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool TransformMatrix_IsEqualTo_(IntPtr obj, IntPtr other);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TransformMatrix_GetHashCode__(IntPtr obj);
            
        }
    }
}
