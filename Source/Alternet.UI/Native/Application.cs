// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2022.</auto-generated>
#nullable enable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal class Application : NativeObject
    {
        static Application()
        {
            SetEventCallback();
        }
        
        public Application()
        {
            SetNativePointer(NativeApi.Application_Create_());
        }
        
        public Application(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public string Name
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.Application_GetName_(NativePointer);
                var m = n;
                return m;
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Application_SetName_(NativePointer, value);
            }
        }
        
        public Keyboard Keyboard
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.Application_GetKeyboard_(NativePointer);
                var m = NativeObject.GetFromNativePointer<Keyboard>(n, p => new Keyboard(p))!;
                ReleaseNativeObjectPointer(n);
                return m;
            }
            
        }
        
        public Mouse Mouse
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.Application_GetMouse_(NativePointer);
                var m = NativeObject.GetFromNativePointer<Mouse>(n, p => new Mouse(p))!;
                ReleaseNativeObjectPointer(n);
                return m;
            }
            
        }
        
        public void Run(Window window)
        {
            CheckDisposed();
            NativeApi.Application_Run_(NativePointer, window.NativePointer);
        }
        
        static GCHandle eventCallbackGCHandle;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.ApplicationEventCallbackType((obj, e, parameter) =>
                {
                    var w = NativeObject.GetFromNativePointer<Application>(obj, p => new Application(p));
                    if (w == null) return IntPtr.Zero;
                    return w.OnEvent(e, parameter);
                }
                );
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.Application_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.ApplicationEvent e, IntPtr parameter)
        {
            switch (e)
            {
                case NativeApi.ApplicationEvent.Idle:
                {
                    Idle?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                default: throw new Exception("Unexpected ApplicationEvent value: " + e);
            }
        }
        
        public event EventHandler? Idle;
        
        [SuppressUnmanagedCodeSecurity]
        private class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr ApplicationEventCallbackType(IntPtr obj, ApplicationEvent e, IntPtr param);
            
            public enum ApplicationEvent
            {
                Idle,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Application_SetEventCallback_(ApplicationEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Application_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string Application_GetName_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Application_SetName_(IntPtr obj, string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Application_GetKeyboard_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Application_GetMouse_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Application_Run_(IntPtr obj, IntPtr window);
            
        }
    }
}
