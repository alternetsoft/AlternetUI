// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2023.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal class AuiNotebook : Control
    {
        static AuiNotebook()
        {
            SetEventCallback();
        }
        
        public AuiNotebook()
        {
            SetNativePointer(NativeApi.AuiNotebook_Create_());
        }
        
        public AuiNotebook(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public void SetArtProvider(System.IntPtr art)
        {
            CheckDisposed();
            NativeApi.AuiNotebook_SetArtProvider_(NativePointer, art);
        }
        
        public System.IntPtr GetArtProvider()
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_GetArtProvider_(NativePointer);
            var m = n;
            return m;
        }
        
        public void SetUniformBitmapSize(int width, int height)
        {
            CheckDisposed();
            NativeApi.AuiNotebook_SetUniformBitmapSize_(NativePointer, width, height);
        }
        
        public void SetTabCtrlHeight(int height)
        {
            CheckDisposed();
            NativeApi.AuiNotebook_SetTabCtrlHeight_(NativePointer, height);
        }
        
        public bool AddPage(System.IntPtr page, string caption, bool select, ImageSet? bitmap)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_AddPage_(NativePointer, page, caption, select, bitmap?.NativePointer ?? IntPtr.Zero);
            var m = n;
            return m;
        }
        
        public bool InsertPage(ulong pageIdx, System.IntPtr page, string caption, bool select, ImageSet? bitmap)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_InsertPage_(NativePointer, pageIdx, page, caption, select, bitmap?.NativePointer ?? IntPtr.Zero);
            var m = n;
            return m;
        }
        
        public bool DeletePage(ulong page)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_DeletePage_(NativePointer, page);
            var m = n;
            return m;
        }
        
        public bool RemovePage(ulong page)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_RemovePage_(NativePointer, page);
            var m = n;
            return m;
        }
        
        public ulong GetPageCount()
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_GetPageCount_(NativePointer);
            var m = n;
            return m;
        }
        
        public System.IntPtr GetPage(ulong pageIdx)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_GetPage_(NativePointer, pageIdx);
            var m = n;
            return m;
        }
        
        public int FindPage(System.IntPtr page)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_FindPage_(NativePointer, page);
            var m = n;
            return m;
        }
        
        public bool SetPageText(ulong page, string text)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_SetPageText_(NativePointer, page, text);
            var m = n;
            return m;
        }
        
        public string GetPageText(ulong pageIdx)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_GetPageText_(NativePointer, pageIdx);
            var m = n;
            return m;
        }
        
        public bool SetPageToolTip(ulong page, string text)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_SetPageToolTip_(NativePointer, page, text);
            var m = n;
            return m;
        }
        
        public string GetPageToolTip(ulong pageIdx)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_GetPageToolTip_(NativePointer, pageIdx);
            var m = n;
            return m;
        }
        
        public bool SetPageBitmap(ulong page, ImageSet? bitmap)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_SetPageBitmap_(NativePointer, page, bitmap?.NativePointer ?? IntPtr.Zero);
            var m = n;
            return m;
        }
        
        public int SetSelection(ulong newPage)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_SetSelection_(NativePointer, newPage);
            var m = n;
            return m;
        }
        
        public int GetSelection()
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_GetSelection_(NativePointer);
            var m = n;
            return m;
        }
        
        public void Split(ulong page, int direction)
        {
            CheckDisposed();
            NativeApi.AuiNotebook_Split_(NativePointer, page, direction);
        }
        
        public int GetTabCtrlHeight()
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_GetTabCtrlHeight_(NativePointer);
            var m = n;
            return m;
        }
        
        public int GetHeightForPageHeight(int pageHeight)
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_GetHeightForPageHeight_(NativePointer, pageHeight);
            var m = n;
            return m;
        }
        
        public bool ShowWindowMenu()
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_ShowWindowMenu_(NativePointer);
            var m = n;
            return m;
        }
        
        public bool DeleteAllPages()
        {
            CheckDisposed();
            var n = NativeApi.AuiNotebook_DeleteAllPages_(NativePointer);
            var m = n;
            return m;
        }
        
        static GCHandle eventCallbackGCHandle;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.AuiNotebookEventCallbackType((obj, e, parameter) =>
                UI.Application.HandleThreadExceptions(() =>
                {
                    var w = NativeObject.GetFromNativePointer<AuiNotebook>(obj, p => new AuiNotebook(p));
                    if (w == null) return IntPtr.Zero;
                    return w.OnEvent(e, parameter);
                }
                ));
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.AuiNotebook_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.AuiNotebookEvent e, IntPtr parameter)
        {
            switch (e)
            {
                case NativeApi.AuiNotebookEvent.PageClose:
                {
                    PageClose?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.PageClosed:
                {
                    PageClosed?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.PageChanged:
                {
                    PageChanged?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.PageChanging:
                {
                    PageChanging?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.WindowListButton:
                {
                    WindowListButton?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.BeginDrag:
                {
                    BeginDrag?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.EndDrag:
                {
                    EndDrag?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.DragMotion:
                {
                    DragMotion?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.AllowTabDrop:
                {
                    AllowTabDrop?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.DragDone:
                {
                    DragDone?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.TabMiddleMouseDown:
                {
                    TabMiddleMouseDown?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.TabMiddleMouseUp:
                {
                    TabMiddleMouseUp?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.TabRightMouseDown:
                {
                    TabRightMouseDown?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.TabRightMouseUp:
                {
                    TabRightMouseUp?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.AuiNotebookEvent.BgDclickMouse:
                {
                    BgDclickMouse?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                default: throw new Exception("Unexpected AuiNotebookEvent value: " + e);
            }
        }
        
        public event EventHandler? PageClose;
        public event EventHandler? PageClosed;
        public event EventHandler? PageChanged;
        public event EventHandler? PageChanging;
        public event EventHandler? WindowListButton;
        public event EventHandler? BeginDrag;
        public event EventHandler? EndDrag;
        public event EventHandler? DragMotion;
        public event EventHandler? AllowTabDrop;
        public event EventHandler? DragDone;
        public event EventHandler? TabMiddleMouseDown;
        public event EventHandler? TabMiddleMouseUp;
        public event EventHandler? TabRightMouseDown;
        public event EventHandler? TabRightMouseUp;
        public event EventHandler? BgDclickMouse;
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr AuiNotebookEventCallbackType(IntPtr obj, AuiNotebookEvent e, IntPtr param);
            
            public enum AuiNotebookEvent
            {
                PageClose,
                PageClosed,
                PageChanged,
                PageChanging,
                WindowListButton,
                BeginDrag,
                EndDrag,
                DragMotion,
                AllowTabDrop,
                DragDone,
                TabMiddleMouseDown,
                TabMiddleMouseUp,
                TabRightMouseDown,
                TabRightMouseUp,
                BgDclickMouse,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void AuiNotebook_SetEventCallback_(AuiNotebookEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr AuiNotebook_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void AuiNotebook_SetArtProvider_(IntPtr obj, System.IntPtr art);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr AuiNotebook_GetArtProvider_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void AuiNotebook_SetUniformBitmapSize_(IntPtr obj, int width, int height);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void AuiNotebook_SetTabCtrlHeight_(IntPtr obj, int height);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool AuiNotebook_AddPage_(IntPtr obj, System.IntPtr page, string caption, bool select, IntPtr bitmap);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool AuiNotebook_InsertPage_(IntPtr obj, ulong pageIdx, System.IntPtr page, string caption, bool select, IntPtr bitmap);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool AuiNotebook_DeletePage_(IntPtr obj, ulong page);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool AuiNotebook_RemovePage_(IntPtr obj, ulong page);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern ulong AuiNotebook_GetPageCount_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr AuiNotebook_GetPage_(IntPtr obj, ulong pageIdx);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int AuiNotebook_FindPage_(IntPtr obj, System.IntPtr page);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool AuiNotebook_SetPageText_(IntPtr obj, ulong page, string text);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string AuiNotebook_GetPageText_(IntPtr obj, ulong pageIdx);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool AuiNotebook_SetPageToolTip_(IntPtr obj, ulong page, string text);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string AuiNotebook_GetPageToolTip_(IntPtr obj, ulong pageIdx);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool AuiNotebook_SetPageBitmap_(IntPtr obj, ulong page, IntPtr bitmap);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int AuiNotebook_SetSelection_(IntPtr obj, ulong newPage);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int AuiNotebook_GetSelection_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void AuiNotebook_Split_(IntPtr obj, ulong page, int direction);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int AuiNotebook_GetTabCtrlHeight_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int AuiNotebook_GetHeightForPageHeight_(IntPtr obj, int pageHeight);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool AuiNotebook_ShowWindowMenu_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool AuiNotebook_DeleteAllPages_(IntPtr obj);
            
        }
    }
}
