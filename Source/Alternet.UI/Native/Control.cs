// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal abstract class Control : NativeObject
    {
        internal object? handler;
        static Control()
        {
            SetEventCallback();
        }
        
        protected Control()
        {
        }
        
        public Control(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public bool ProcessIdle
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetProcessIdle_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetProcessIdle_(NativePointer, value);
            }
        }
        
        public bool ProcessUIUpdates
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetProcessUIUpdates_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetProcessUIUpdates_(NativePointer, value);
            }
        }
        
        public bool IsBold
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetIsBold_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetIsBold_(NativePointer, value);
            }
        }
        
        public bool AcceptsFocus
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetAcceptsFocus_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetAcceptsFocus_(NativePointer, value);
            }
        }
        
        public bool AcceptsFocusFromKeyboard
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetAcceptsFocusFromKeyboard_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetAcceptsFocusFromKeyboard_(NativePointer, value);
            }
        }
        
        public bool AcceptsFocusRecursively
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetAcceptsFocusRecursively_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetAcceptsFocusRecursively_(NativePointer, value);
            }
        }
        
        public bool AcceptsFocusAll
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetAcceptsFocusAll_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetAcceptsFocusAll_(NativePointer, value);
            }
        }
        
        public int BorderStyle
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetBorderStyle_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetBorderStyle_(NativePointer, value);
            }
        }
        
        public int LayoutDirection
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetLayoutDirection_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetLayoutDirection_(NativePointer, value);
            }
        }
        
        public string Name
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetName_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetName_(NativePointer, value);
            }
        }
        
        public int Id
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetId_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetId_(NativePointer, value);
            }
        }
        
        public bool IsActive
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetIsActive_(NativePointer);
            }
            
        }
        
        public bool IsHandleCreated
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetIsHandleCreated_(NativePointer);
            }
            
        }
        
        public bool IsWxWidgetCreated
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetIsWxWidgetCreated_(NativePointer);
            }
            
        }
        
        public System.IntPtr Handle
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetHandle_(NativePointer);
            }
            
        }
        
        public System.IntPtr WxWidget
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetWxWidget_(NativePointer);
            }
            
        }
        
        public bool IsScrollable
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetIsScrollable_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetIsScrollable_(NativePointer, value);
            }
        }
        
        public bool IsMouseCaptured
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetIsMouseCaptured_(NativePointer);
            }
            
        }
        
        public bool TabStop
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetTabStop_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetTabStop_(NativePointer, value);
            }
        }
        
        public bool IsFocused
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetIsFocused_(NativePointer);
            }
            
        }
        
        public bool IsFocusable
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetIsFocusable_(NativePointer);
            }
            
        }
        
        public bool CanAcceptFocus
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetCanAcceptFocus_(NativePointer);
            }
            
        }
        
        public Control? ParentRefCounted
        {
            get
            {
                CheckDisposed();
                var _nnn = NativeApi.Control_GetParentRefCounted_(NativePointer);
                var _mmm = NativeObject.GetFromNativePointer<Control>(_nnn, null);
                ReleaseNativeObjectPointer(_nnn);
                return _mmm;
            }
            
        }
        
        public string? ToolTip
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetToolTip_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetToolTip_(NativePointer, value);
            }
        }
        
        public bool AllowDrop
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetAllowDrop_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetAllowDrop_(NativePointer, value);
            }
        }
        
        public Alternet.Drawing.SizeD Size
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetSize_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetSize_(NativePointer, value);
            }
        }
        
        public Alternet.Drawing.PointD Location
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetLocation_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetLocation_(NativePointer, value);
            }
        }
        
        public Alternet.Drawing.RectD Bounds
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetBounds_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetBounds_(NativePointer, value);
            }
        }
        
        public Alternet.Drawing.SizeD ClientSize
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetClientSize_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetClientSize_(NativePointer, value);
            }
        }
        
        public Alternet.UI.Thickness IntrinsicLayoutPadding
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetIntrinsicLayoutPadding_(NativePointer);
            }
            
        }
        
        public Alternet.UI.Thickness IntrinsicPreferredSizePadding
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetIntrinsicPreferredSizePadding_(NativePointer);
            }
            
        }
        
        public bool Visible
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetVisible_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetVisible_(NativePointer, value);
            }
        }
        
        public bool Enabled
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetEnabled_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetEnabled_(NativePointer, value);
            }
        }
        
        public bool UserPaint
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetUserPaint_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetUserPaint_(NativePointer, value);
            }
        }
        
        public bool IsMouseOver
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetIsMouseOver_(NativePointer);
            }
            
        }
        
        public bool HasWindowCreated
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetHasWindowCreated_(NativePointer);
            }
            
        }
        
        public Alternet.Drawing.Color BackgroundColor
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetBackgroundColor_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetBackgroundColor_(NativePointer, value);
            }
        }
        
        public Alternet.Drawing.Color ForegroundColor
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetForegroundColor_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetForegroundColor_(NativePointer, value);
            }
        }
        
        public Font? Font
        {
            get
            {
                CheckDisposed();
                var _nnn = NativeApi.Control_GetFont_(NativePointer);
                var _mmm = NativeObject.GetFromNativePointer<Font>(_nnn, p => new Font(p));
                ReleaseNativeObjectPointer(_nnn);
                return _mmm;
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetFont_(NativePointer, value?.NativePointer ?? IntPtr.Zero);
            }
        }
        
        public Alternet.Drawing.SizeD MinimumSize
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetMinimumSize_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetMinimumSize_(NativePointer, value);
            }
        }
        
        public Alternet.Drawing.SizeD MaximumSize
        {
            get
            {
                CheckDisposed();
                return NativeApi.Control_GetMaximumSize_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Control_SetMaximumSize_(NativePointer, value);
            }
        }
        
        public int GetScrollBarLargeChange(ScrollBarOrientation orientation)
        {
            CheckDisposed();
            return NativeApi.Control_GetScrollBarLargeChange_(NativePointer, orientation);
        }
        
        public int GetScrollBarMaximum(ScrollBarOrientation orientation)
        {
            CheckDisposed();
            return NativeApi.Control_GetScrollBarMaximum_(NativePointer, orientation);
        }
        
        public int GetScrollBarEvtKind()
        {
            CheckDisposed();
            return NativeApi.Control_GetScrollBarEvtKind_(NativePointer);
        }
        
        public int GetScrollBarEvtPosition()
        {
            CheckDisposed();
            return NativeApi.Control_GetScrollBarEvtPosition_(NativePointer);
        }
        
        public static Control? HitTest(Alternet.Drawing.PointD screenPoint)
        {
            var _nnn = NativeApi.Control_HitTest_(screenPoint);
            var _mmm = NativeObject.GetFromNativePointer<Control>(_nnn, null);
            ReleaseNativeObjectPointer(_nnn);
            return _mmm;
        }
        
        public static Control? GetFocusedControl()
        {
            var _nnn = NativeApi.Control_GetFocusedControl_();
            var _mmm = NativeObject.GetFromNativePointer<Control>(_nnn, null);
            ReleaseNativeObjectPointer(_nnn);
            return _mmm;
        }
        
        public static void NotifyCaptureLost()
        {
            NativeApi.Control_NotifyCaptureLost_();
        }
        
        public void Freeze()
        {
            CheckDisposed();
            NativeApi.Control_Freeze_(NativePointer);
        }
        
        public void Thaw()
        {
            CheckDisposed();
            NativeApi.Control_Thaw_(NativePointer);
        }
        
        public void ShowPopupMenu(System.IntPtr menu, double x, double y)
        {
            CheckDisposed();
            NativeApi.Control_ShowPopupMenu_(NativePointer, menu, x, y);
        }
        
        public void BeginIgnoreRecreate()
        {
            CheckDisposed();
            NativeApi.Control_BeginIgnoreRecreate_(NativePointer);
        }
        
        public void EndIgnoreRecreate()
        {
            CheckDisposed();
            NativeApi.Control_EndIgnoreRecreate_(NativePointer);
        }
        
        public Alternet.Drawing.SizeD GetDPI()
        {
            CheckDisposed();
            return NativeApi.Control_GetDPI_(NativePointer);
        }
        
        public void SetMouseCapture(bool value)
        {
            CheckDisposed();
            NativeApi.Control_SetMouseCapture_(NativePointer, value);
        }
        
        public void AddChild(Control control)
        {
            CheckDisposed();
            NativeApi.Control_AddChild_(NativePointer, control.NativePointer);
        }
        
        public void RemoveChild(Control control)
        {
            CheckDisposed();
            NativeApi.Control_RemoveChild_(NativePointer, control.NativePointer);
        }
        
        public void Invalidate()
        {
            CheckDisposed();
            NativeApi.Control_Invalidate_(NativePointer);
        }
        
        public void Update()
        {
            CheckDisposed();
            NativeApi.Control_Update_(NativePointer);
        }
        
        public Alternet.Drawing.SizeD GetPreferredSize(Alternet.Drawing.SizeD availableSize)
        {
            CheckDisposed();
            return NativeApi.Control_GetPreferredSize_(NativePointer, availableSize);
        }
        
        public DragDropEffects DoDragDrop(UnmanagedDataObject data, DragDropEffects allowedEffects)
        {
            CheckDisposed();
            return NativeApi.Control_DoDragDrop_(NativePointer, data.NativePointer, allowedEffects);
        }
        
        public DrawingContext OpenPaintDrawingContext()
        {
            CheckDisposed();
            var _nnn = NativeApi.Control_OpenPaintDrawingContext_(NativePointer);
            var _mmm = NativeObject.GetFromNativePointer<DrawingContext>(_nnn, p => new DrawingContext(p))!;
            ReleaseNativeObjectPointer(_nnn);
            return _mmm;
        }
        
        public DrawingContext OpenClientDrawingContext()
        {
            CheckDisposed();
            var _nnn = NativeApi.Control_OpenClientDrawingContext_(NativePointer);
            var _mmm = NativeObject.GetFromNativePointer<DrawingContext>(_nnn, p => new DrawingContext(p))!;
            ReleaseNativeObjectPointer(_nnn);
            return _mmm;
        }
        
        public void BeginUpdate()
        {
            CheckDisposed();
            NativeApi.Control_BeginUpdate_(NativePointer);
        }
        
        public void EndUpdate()
        {
            CheckDisposed();
            NativeApi.Control_EndUpdate_(NativePointer);
        }
        
        public void RecreateWindow()
        {
            CheckDisposed();
            NativeApi.Control_RecreateWindow_(NativePointer);
        }
        
        public void ResetBackgroundColor()
        {
            CheckDisposed();
            NativeApi.Control_ResetBackgroundColor_(NativePointer);
        }
        
        public void ResetForegroundColor()
        {
            CheckDisposed();
            NativeApi.Control_ResetForegroundColor_(NativePointer);
        }
        
        public Alternet.Drawing.PointD ClientToScreen(Alternet.Drawing.PointD point)
        {
            CheckDisposed();
            return NativeApi.Control_ClientToScreen_(NativePointer, point);
        }
        
        public Alternet.Drawing.PointD ScreenToClient(Alternet.Drawing.PointD point)
        {
            CheckDisposed();
            return NativeApi.Control_ScreenToClient_(NativePointer, point);
        }
        
        public Alternet.Drawing.PointI ScreenToDevice(Alternet.Drawing.PointD point)
        {
            CheckDisposed();
            return NativeApi.Control_ScreenToDevice_(NativePointer, point);
        }
        
        public Alternet.Drawing.PointD DeviceToScreen(Alternet.Drawing.PointI point)
        {
            CheckDisposed();
            return NativeApi.Control_DeviceToScreen_(NativePointer, point);
        }
        
        public bool SetFocus()
        {
            CheckDisposed();
            return NativeApi.Control_SetFocus_(NativePointer);
        }
        
        public void FocusNextControl(bool forward, bool nested)
        {
            CheckDisposed();
            NativeApi.Control_FocusNextControl_(NativePointer, forward, nested);
        }
        
        public void BeginInit()
        {
            CheckDisposed();
            NativeApi.Control_BeginInit_(NativePointer);
        }
        
        public void EndInit()
        {
            CheckDisposed();
            NativeApi.Control_EndInit_(NativePointer);
        }
        
        public void Destroy()
        {
            CheckDisposed();
            NativeApi.Control_Destroy_(NativePointer);
        }
        
        public void SaveScreenshot(string fileName)
        {
            CheckDisposed();
            NativeApi.Control_SaveScreenshot_(NativePointer, fileName);
        }
        
        public void SendSizeEvent()
        {
            CheckDisposed();
            NativeApi.Control_SendSizeEvent_(NativePointer);
        }
        
        public void SendMouseDownEvent(int x, int y)
        {
            CheckDisposed();
            NativeApi.Control_SendMouseDownEvent_(NativePointer, x, y);
        }
        
        public void SendMouseUpEvent(int x, int y)
        {
            CheckDisposed();
            NativeApi.Control_SendMouseUpEvent_(NativePointer, x, y);
        }
        
        public void SetBoundsEx(Alternet.Drawing.RectD rect, int flags)
        {
            CheckDisposed();
            NativeApi.Control_SetBoundsEx_(NativePointer, rect, flags);
        }
        
        public System.IntPtr GetContainingSizer()
        {
            CheckDisposed();
            return NativeApi.Control_GetContainingSizer_(NativePointer);
        }
        
        public System.IntPtr GetSizer()
        {
            CheckDisposed();
            return NativeApi.Control_GetSizer_(NativePointer);
        }
        
        public void SetSizer(System.IntPtr sizer, bool deleteOld)
        {
            CheckDisposed();
            NativeApi.Control_SetSizer_(NativePointer, sizer, deleteOld);
        }
        
        public void SetSizerAndFit(System.IntPtr sizer, bool deleteOld)
        {
            CheckDisposed();
            NativeApi.Control_SetSizerAndFit_(NativePointer, sizer, deleteOld);
        }
        
        public void SetScrollBar(ScrollBarOrientation orientation, bool visible, int value, int largeChange, int maximum)
        {
            CheckDisposed();
            NativeApi.Control_SetScrollBar_(NativePointer, orientation, visible, value, largeChange, maximum);
        }
        
        public bool IsScrollBarVisible(ScrollBarOrientation orientation)
        {
            CheckDisposed();
            return NativeApi.Control_IsScrollBarVisible_(NativePointer, orientation);
        }
        
        public int GetScrollBarValue(ScrollBarOrientation orientation)
        {
            CheckDisposed();
            return NativeApi.Control_GetScrollBarValue_(NativePointer, orientation);
        }
        
        public void CenterOnParent(int orientation)
        {
            CheckDisposed();
            NativeApi.Control_CenterOnParent_(NativePointer, orientation);
        }
        
        public void RefreshRect(Alternet.Drawing.RectD rect, bool eraseBackground)
        {
            CheckDisposed();
            NativeApi.Control_RefreshRect_(NativePointer, rect, eraseBackground);
        }
        
        public void Raise()
        {
            CheckDisposed();
            NativeApi.Control_Raise_(NativePointer);
        }
        
        public void Lower()
        {
            CheckDisposed();
            NativeApi.Control_Lower_(NativePointer);
        }
        
        public void DisableRecreate()
        {
            CheckDisposed();
            NativeApi.Control_DisableRecreate_(NativePointer);
        }
        
        public void EnableRecreate()
        {
            CheckDisposed();
            NativeApi.Control_EnableRecreate_(NativePointer);
        }
        
        public void UnsetToolTip()
        {
            CheckDisposed();
            NativeApi.Control_UnsetToolTip_(NativePointer);
        }
        
        public bool IsTransparentBackgroundSupported()
        {
            CheckDisposed();
            return NativeApi.Control_IsTransparentBackgroundSupported_(NativePointer);
        }
        
        public bool SetBackgroundStyle(int style)
        {
            CheckDisposed();
            return NativeApi.Control_SetBackgroundStyle_(NativePointer, style);
        }
        
        public int GetBackgroundStyle()
        {
            CheckDisposed();
            return NativeApi.Control_GetBackgroundStyle_(NativePointer);
        }
        
        public void AlwaysShowScrollbars(bool hflag, bool vflag)
        {
            CheckDisposed();
            NativeApi.Control_AlwaysShowScrollbars_(NativePointer, hflag, vflag);
        }
        
        public Alternet.Drawing.Color GetDefaultAttributesBgColor()
        {
            CheckDisposed();
            return NativeApi.Control_GetDefaultAttributesBgColor_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetDefaultAttributesFgColor()
        {
            CheckDisposed();
            return NativeApi.Control_GetDefaultAttributesFgColor_(NativePointer);
        }
        
        public Font GetDefaultAttributesFont()
        {
            CheckDisposed();
            var _nnn = NativeApi.Control_GetDefaultAttributesFont_(NativePointer);
            var _mmm = NativeObject.GetFromNativePointer<Font>(_nnn, p => new Font(p))!;
            ReleaseNativeObjectPointer(_nnn);
            return _mmm;
        }
        
        public static Alternet.Drawing.Color GetClassDefaultAttributesBgColor(int controlType, int windowVariant)
        {
            return NativeApi.Control_GetClassDefaultAttributesBgColor_(controlType, windowVariant);
        }
        
        public static Alternet.Drawing.Color GetClassDefaultAttributesFgColor(int controlType, int windowVariant)
        {
            return NativeApi.Control_GetClassDefaultAttributesFgColor_(controlType, windowVariant);
        }
        
        public static Font GetClassDefaultAttributesFont(int controlType, int windowVariant)
        {
            var _nnn = NativeApi.Control_GetClassDefaultAttributesFont_(controlType, windowVariant);
            var _mmm = NativeObject.GetFromNativePointer<Font>(_nnn, p => new Font(p))!;
            ReleaseNativeObjectPointer(_nnn);
            return _mmm;
        }
        
        public static int DrawingFromDip(double value, System.IntPtr window)
        {
            return NativeApi.Control_DrawingFromDip_(value, window);
        }
        
        public static double DrawingDPIScaleFactor(System.IntPtr window)
        {
            return NativeApi.Control_DrawingDPIScaleFactor_(window);
        }
        
        public static double DrawingToDip(int value, System.IntPtr window)
        {
            return NativeApi.Control_DrawingToDip_(value, window);
        }
        
        public static double DrawingFromDipF(double value, System.IntPtr window)
        {
            return NativeApi.Control_DrawingFromDipF_(value, window);
        }
        
        public void SetCursor(System.IntPtr handle)
        {
            CheckDisposed();
            NativeApi.Control_SetCursor_(NativePointer, handle);
        }
        
        static GCHandle eventCallbackGCHandle;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.ControlEventCallbackType((obj, e, parameter) =>
                {
                    var w = NativeObject.GetFromNativePointer<Control>(obj, null);
                    if (w == null) return IntPtr.Zero;
                    return w.OnEvent(e, parameter);
                }
                );
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.Control_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.ControlEvent e, IntPtr parameter)
        {
            switch (e)
            {
                case NativeApi.ControlEvent.Idle:
                {
                    Idle?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.Paint:
                {
                    Paint?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.MouseEnter:
                {
                    MouseEnter?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.MouseLeave:
                {
                    MouseLeave?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.MouseClick:
                {
                    MouseClick?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.VisibleChanged:
                {
                    VisibleChanged?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.MouseCaptureLost:
                {
                    MouseCaptureLost?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.Destroyed:
                {
                    Destroyed?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.GotFocus:
                {
                    GotFocus?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.LostFocus:
                {
                    LostFocus?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.DragLeave:
                {
                    DragLeave?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.DragDrop:
                {
                    var ea = new NativeEventArgs<DragEventData>(MarshalEx.PtrToStructure<DragEventData>(parameter));
                    DragDrop?.Invoke(this, ea); return ea.Result;
                }
                case NativeApi.ControlEvent.DragOver:
                {
                    var ea = new NativeEventArgs<DragEventData>(MarshalEx.PtrToStructure<DragEventData>(parameter));
                    DragOver?.Invoke(this, ea); return ea.Result;
                }
                case NativeApi.ControlEvent.DragEnter:
                {
                    var ea = new NativeEventArgs<DragEventData>(MarshalEx.PtrToStructure<DragEventData>(parameter));
                    DragEnter?.Invoke(this, ea); return ea.Result;
                }
                case NativeApi.ControlEvent.VerticalScrollBarValueChanged:
                {
                    VerticalScrollBarValueChanged?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.HorizontalScrollBarValueChanged:
                {
                    HorizontalScrollBarValueChanged?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.SizeChanged:
                {
                    SizeChanged?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.Activated:
                {
                    Activated?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                case NativeApi.ControlEvent.Deactivated:
                {
                    Deactivated?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                }
                default: throw new Exception("Unexpected ControlEvent value: " + e);
            }
        }
        
        public event EventHandler? Idle;
        public event EventHandler? Paint;
        public event EventHandler? MouseEnter;
        public event EventHandler? MouseLeave;
        public event EventHandler? MouseClick;
        public event EventHandler? VisibleChanged;
        public event EventHandler? MouseCaptureLost;
        public event EventHandler? Destroyed;
        public event EventHandler? GotFocus;
        public event EventHandler? LostFocus;
        public event EventHandler? DragLeave;
        public event NativeEventHandler<DragEventData>? DragDrop;
        public event NativeEventHandler<DragEventData>? DragOver;
        public event NativeEventHandler<DragEventData>? DragEnter;
        public event EventHandler? VerticalScrollBarValueChanged;
        public event EventHandler? HorizontalScrollBarValueChanged;
        public event EventHandler? SizeChanged;
        public event EventHandler? Activated;
        public event EventHandler? Deactivated;
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr ControlEventCallbackType(IntPtr obj, ControlEvent e, IntPtr param);
            
            public enum ControlEvent
            {
                Idle,
                Paint,
                MouseEnter,
                MouseLeave,
                MouseClick,
                VisibleChanged,
                MouseCaptureLost,
                Destroyed,
                GotFocus,
                LostFocus,
                DragLeave,
                DragDrop,
                DragOver,
                DragEnter,
                VerticalScrollBarValueChanged,
                HorizontalScrollBarValueChanged,
                SizeChanged,
                Activated,
                Deactivated,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetEventCallback_(ControlEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetProcessIdle_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetProcessIdle_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetProcessUIUpdates_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetProcessUIUpdates_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetIsBold_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetIsBold_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetAcceptsFocus_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetAcceptsFocus_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetAcceptsFocusFromKeyboard_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetAcceptsFocusFromKeyboard_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetAcceptsFocusRecursively_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetAcceptsFocusRecursively_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetAcceptsFocusAll_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetAcceptsFocusAll_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Control_GetBorderStyle_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetBorderStyle_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Control_GetLayoutDirection_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetLayoutDirection_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string Control_GetName_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetName_(IntPtr obj, string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Control_GetId_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetId_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetIsActive_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetIsHandleCreated_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetIsWxWidgetCreated_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr Control_GetHandle_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr Control_GetWxWidget_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetIsScrollable_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetIsScrollable_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetIsMouseCaptured_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetTabStop_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetTabStop_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetIsFocused_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetIsFocusable_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetCanAcceptFocus_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Control_GetParentRefCounted_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string? Control_GetToolTip_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetToolTip_(IntPtr obj, string? value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetAllowDrop_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetAllowDrop_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeD Control_GetSize_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetSize_(IntPtr obj, Alternet.Drawing.SizeD value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.PointD Control_GetLocation_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetLocation_(IntPtr obj, Alternet.Drawing.PointD value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.RectD Control_GetBounds_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetBounds_(IntPtr obj, Alternet.Drawing.RectD value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeD Control_GetClientSize_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetClientSize_(IntPtr obj, Alternet.Drawing.SizeD value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.UI.Thickness Control_GetIntrinsicLayoutPadding_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.UI.Thickness Control_GetIntrinsicPreferredSizePadding_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetVisible_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetVisible_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetEnabled_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetEnabled_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetUserPaint_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetUserPaint_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetIsMouseOver_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_GetHasWindowCreated_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Control_GetBackgroundColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetBackgroundColor_(IntPtr obj, NativeApiTypes.Color value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Control_GetForegroundColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetForegroundColor_(IntPtr obj, NativeApiTypes.Color value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Control_GetFont_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetFont_(IntPtr obj, IntPtr value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeD Control_GetMinimumSize_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetMinimumSize_(IntPtr obj, Alternet.Drawing.SizeD value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeD Control_GetMaximumSize_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetMaximumSize_(IntPtr obj, Alternet.Drawing.SizeD value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Control_GetScrollBarLargeChange_(IntPtr obj, ScrollBarOrientation orientation);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Control_GetScrollBarMaximum_(IntPtr obj, ScrollBarOrientation orientation);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Control_GetScrollBarEvtKind_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Control_GetScrollBarEvtPosition_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Control_HitTest_(Alternet.Drawing.PointD screenPoint);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Control_GetFocusedControl_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_NotifyCaptureLost_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_Freeze_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_Thaw_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_ShowPopupMenu_(IntPtr obj, System.IntPtr menu, double x, double y);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_BeginIgnoreRecreate_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_EndIgnoreRecreate_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeD Control_GetDPI_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetMouseCapture_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_AddChild_(IntPtr obj, IntPtr control);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_RemoveChild_(IntPtr obj, IntPtr control);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_Invalidate_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_Update_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeD Control_GetPreferredSize_(IntPtr obj, Alternet.Drawing.SizeD availableSize);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern DragDropEffects Control_DoDragDrop_(IntPtr obj, IntPtr data, DragDropEffects allowedEffects);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Control_OpenPaintDrawingContext_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Control_OpenClientDrawingContext_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_BeginUpdate_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_EndUpdate_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_RecreateWindow_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_ResetBackgroundColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_ResetForegroundColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.PointD Control_ClientToScreen_(IntPtr obj, Alternet.Drawing.PointD point);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.PointD Control_ScreenToClient_(IntPtr obj, Alternet.Drawing.PointD point);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.PointI Control_ScreenToDevice_(IntPtr obj, Alternet.Drawing.PointD point);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.PointD Control_DeviceToScreen_(IntPtr obj, Alternet.Drawing.PointI point);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_SetFocus_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_FocusNextControl_(IntPtr obj, bool forward, bool nested);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_BeginInit_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_EndInit_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_Destroy_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SaveScreenshot_(IntPtr obj, string fileName);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SendSizeEvent_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SendMouseDownEvent_(IntPtr obj, int x, int y);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SendMouseUpEvent_(IntPtr obj, int x, int y);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetBoundsEx_(IntPtr obj, Alternet.Drawing.RectD rect, int flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr Control_GetContainingSizer_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr Control_GetSizer_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetSizer_(IntPtr obj, System.IntPtr sizer, bool deleteOld);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetSizerAndFit_(IntPtr obj, System.IntPtr sizer, bool deleteOld);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetScrollBar_(IntPtr obj, ScrollBarOrientation orientation, bool visible, int value, int largeChange, int maximum);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_IsScrollBarVisible_(IntPtr obj, ScrollBarOrientation orientation);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Control_GetScrollBarValue_(IntPtr obj, ScrollBarOrientation orientation);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_CenterOnParent_(IntPtr obj, int orientation);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_RefreshRect_(IntPtr obj, Alternet.Drawing.RectD rect, bool eraseBackground);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_Raise_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_Lower_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_DisableRecreate_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_EnableRecreate_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_UnsetToolTip_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_IsTransparentBackgroundSupported_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Control_SetBackgroundStyle_(IntPtr obj, int style);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Control_GetBackgroundStyle_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_AlwaysShowScrollbars_(IntPtr obj, bool hflag, bool vflag);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Control_GetDefaultAttributesBgColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Control_GetDefaultAttributesFgColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Control_GetDefaultAttributesFont_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Control_GetClassDefaultAttributesBgColor_(int controlType, int windowVariant);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Control_GetClassDefaultAttributesFgColor_(int controlType, int windowVariant);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Control_GetClassDefaultAttributesFont_(int controlType, int windowVariant);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Control_DrawingFromDip_(double value, System.IntPtr window);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern double Control_DrawingDPIScaleFactor_(System.IntPtr window);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern double Control_DrawingToDip_(int value, System.IntPtr window);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern double Control_DrawingFromDipF_(double value, System.IntPtr window);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Control_SetCursor_(IntPtr obj, System.IntPtr handle);
            
        }
    }
}
