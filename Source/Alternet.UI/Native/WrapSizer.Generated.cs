// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class WrapSizer : BoxSizer
    {
        static WrapSizer()
        {
        }
        
        public WrapSizer()
        {
            SetNativePointer(NativeApi.WrapSizer_Create_());
        }
        
        public WrapSizer(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public static System.IntPtr CreateWrapSizer(int orient, int flags)
        {
            return NativeApi.WrapSizer_CreateWrapSizer_(orient, flags);
        }
        
        public static void RepositionChildren(System.IntPtr handle, Alternet.Drawing.SizeI minSize)
        {
            NativeApi.WrapSizer_RepositionChildren_(handle, minSize);
        }
        
        public static Alternet.Drawing.SizeI CalcMin(System.IntPtr handle)
        {
            return NativeApi.WrapSizer_CalcMin_(handle);
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr WrapSizer_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr WrapSizer_CreateWrapSizer_(int orient, int flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WrapSizer_RepositionChildren_(System.IntPtr handle, Alternet.Drawing.SizeI minSize);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeI WrapSizer_CalcMin_(System.IntPtr handle);
            
        }
    }
}
