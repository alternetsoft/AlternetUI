// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class StatusBar : Control
    {
        static StatusBar()
        {
            SetEventCallback();
        }
        
        public StatusBar()
        {
            SetNativePointer(NativeApi.StatusBar_Create_());
        }
        
        public StatusBar(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public System.IntPtr RealHandle
        {
            get
            {
                CheckDisposed();
                return NativeApi.StatusBar_GetRealHandle_(NativePointer);
            }
            
        }
        
        public bool SizingGripVisible
        {
            get
            {
                CheckDisposed();
                return NativeApi.StatusBar_GetSizingGripVisible_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.StatusBar_SetSizingGripVisible_(NativePointer, value);
            }
        }
        
        static GCHandle eventCallbackGCHandle;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.StatusBarEventCallbackType((obj, e, parameter) =>
                {
                    var w = NativeObject.GetFromNativePointer<StatusBar>(obj, p => new StatusBar(p));
                    if (w == null) return IntPtr.Zero;
                    return w.OnEvent(e, parameter);
                }
                );
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.StatusBar_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.StatusBarEvent e, IntPtr parameter)
        {
            switch (e)
            {
                case NativeApi.StatusBarEvent.ControlRecreated:
                {
                    ControlRecreated?.Invoke(); return IntPtr.Zero;
                }
                default: throw new Exception("Unexpected StatusBarEvent value: " + e);
            }
        }
        
        public Action? ControlRecreated;
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr StatusBarEventCallbackType(IntPtr obj, StatusBarEvent e, IntPtr param);
            
            public enum StatusBarEvent
            {
                ControlRecreated,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void StatusBar_SetEventCallback_(StatusBarEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr StatusBar_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr StatusBar_GetRealHandle_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool StatusBar_GetSizingGripVisible_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void StatusBar_SetSizingGripVisible_(IntPtr obj, bool value);
            
        }
    }
}
