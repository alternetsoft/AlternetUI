// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class ListBox : Control
    {
        static ListBox()
        {
            SetEventCallback();
        }
        
        public ListBox()
        {
            SetNativePointer(NativeApi.ListBox_Create_());
        }
        
        public ListBox(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public bool HasBorder
        {
            get
            {
                CheckDisposed();
                return NativeApi.ListBox_GetHasBorder_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.ListBox_SetHasBorder_(NativePointer, value);
            }
        }
        
        public bool IsSelected(int n)
        {
            CheckDisposed();
            return NativeApi.ListBox_IsSelected_(NativePointer, n);
        }
        
        public bool IsSorted()
        {
            CheckDisposed();
            return NativeApi.ListBox_IsSorted_(NativePointer);
        }
        
        public bool SetStringSelection(string s, bool select)
        {
            CheckDisposed();
            return NativeApi.ListBox_SetStringSelection_(NativePointer, s, select);
        }
        
        public int FindString(string s, bool bCase)
        {
            CheckDisposed();
            return NativeApi.ListBox_FindString_(NativePointer, s, bCase);
        }
        
        public int GetCountPerPage()
        {
            CheckDisposed();
            return NativeApi.ListBox_GetCountPerPage_(NativePointer);
        }
        
        public int GetTopItem()
        {
            CheckDisposed();
            return NativeApi.ListBox_GetTopItem_(NativePointer);
        }
        
        public int HitTest(Alternet.Drawing.PointD point)
        {
            CheckDisposed();
            return NativeApi.ListBox_HitTest_(NativePointer, point);
        }
        
        public string GetString(uint n)
        {
            CheckDisposed();
            return NativeApi.ListBox_GetString_(NativePointer, n);
        }
        
        public uint GetCount()
        {
            CheckDisposed();
            return NativeApi.ListBox_GetCount_(NativePointer);
        }
        
        public void Deselect(int n)
        {
            CheckDisposed();
            NativeApi.ListBox_Deselect_(NativePointer, n);
        }
        
        public void EnsureVisible(int n)
        {
            CheckDisposed();
            NativeApi.ListBox_EnsureVisible_(NativePointer, n);
        }
        
        public void SetFirstItem(int n)
        {
            CheckDisposed();
            NativeApi.ListBox_SetFirstItem_(NativePointer, n);
        }
        
        public void SetFirstItemStr(string s)
        {
            CheckDisposed();
            NativeApi.ListBox_SetFirstItemStr_(NativePointer, s);
        }
        
        public void SetSelection(int n)
        {
            CheckDisposed();
            NativeApi.ListBox_SetSelection_(NativePointer, n);
        }
        
        public void SetString(uint n, string s)
        {
            CheckDisposed();
            NativeApi.ListBox_SetString_(NativePointer, n, s);
        }
        
        public void Clear()
        {
            CheckDisposed();
            NativeApi.ListBox_Clear_(NativePointer);
        }
        
        public void Delete(uint n)
        {
            CheckDisposed();
            NativeApi.ListBox_Delete_(NativePointer, n);
        }
        
        public int Append(string s)
        {
            CheckDisposed();
            return NativeApi.ListBox_Append_(NativePointer, s);
        }
        
        public int Insert(string item, uint pos)
        {
            CheckDisposed();
            return NativeApi.ListBox_Insert_(NativePointer, item, pos);
        }
        
        public int GetSelectionsCount()
        {
            CheckDisposed();
            return NativeApi.ListBox_GetSelectionsCount_(NativePointer);
        }
        
        public int GetSelectionsItem(int index)
        {
            CheckDisposed();
            return NativeApi.ListBox_GetSelectionsItem_(NativePointer, index);
        }
        
        public void UpdateSelections()
        {
            CheckDisposed();
            NativeApi.ListBox_UpdateSelections_(NativePointer);
        }
        
        static GCHandle eventCallbackGCHandle;
        public static ListBox? GlobalObject;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.ListBoxEventCallbackType((obj, e, parameter) =>
                    UI.Application.HandleThreadExceptions(() =>
                    {
                        var w = NativeObject.GetFromNativePointer<ListBox>(obj, p => new ListBox(p));
                        w ??= GlobalObject;
                        if (w == null) return IntPtr.Zero;
                        return w.OnEvent(e, parameter);
                    }
                    )
                );
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.ListBox_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.ListBoxEvent e, IntPtr parameter)
        {
            OnPlatformEventSelectionChanged(); return IntPtr.Zero;
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr ListBoxEventCallbackType(IntPtr obj, ListBoxEvent e, IntPtr param);
            
            public enum ListBoxEvent
            {
                SelectionChanged,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ListBox_SetEventCallback_(ListBoxEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr ListBox_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool ListBox_GetHasBorder_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ListBox_SetHasBorder_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool ListBox_IsSelected_(IntPtr obj, int n);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool ListBox_IsSorted_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool ListBox_SetStringSelection_(IntPtr obj, string s, bool select);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int ListBox_FindString_(IntPtr obj, string s, bool bCase);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int ListBox_GetCountPerPage_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int ListBox_GetTopItem_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int ListBox_HitTest_(IntPtr obj, Alternet.Drawing.PointD point);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string ListBox_GetString_(IntPtr obj, uint n);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern uint ListBox_GetCount_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ListBox_Deselect_(IntPtr obj, int n);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ListBox_EnsureVisible_(IntPtr obj, int n);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ListBox_SetFirstItem_(IntPtr obj, int n);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ListBox_SetFirstItemStr_(IntPtr obj, string s);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ListBox_SetSelection_(IntPtr obj, int n);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ListBox_SetString_(IntPtr obj, uint n, string s);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ListBox_Clear_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ListBox_Delete_(IntPtr obj, uint n);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int ListBox_Append_(IntPtr obj, string s);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int ListBox_Insert_(IntPtr obj, string item, uint pos);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int ListBox_GetSelectionsCount_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int ListBox_GetSelectionsItem_(IntPtr obj, int index);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void ListBox_UpdateSelections_(IntPtr obj);
            
        }
    }
}
