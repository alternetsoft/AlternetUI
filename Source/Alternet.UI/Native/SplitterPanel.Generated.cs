// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class SplitterPanel : Control
    {
        static SplitterPanel()
        {
            SetEventCallback();
        }
        
        public SplitterPanel()
        {
            SetNativePointer(NativeApi.SplitterPanel_Create_());
        }
        
        public SplitterPanel(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public long Styles
        {
            get
            {
                CheckDisposed();
                return NativeApi.SplitterPanel_GetStyles_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.SplitterPanel_SetStyles_(NativePointer, value);
            }
        }
        
        public int MinimumPaneSize
        {
            get
            {
                CheckDisposed();
                return NativeApi.SplitterPanel_GetMinimumPaneSize_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.SplitterPanel_SetMinimumPaneSize_(NativePointer, value);
            }
        }
        
        public double SashGravity
        {
            get
            {
                CheckDisposed();
                return NativeApi.SplitterPanel_GetSashGravity_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.SplitterPanel_SetSashGravity_(NativePointer, value);
            }
        }
        
        public int DefaultSashSize
        {
            get
            {
                CheckDisposed();
                return NativeApi.SplitterPanel_GetDefaultSashSize_(NativePointer);
            }
            
        }
        
        public int SashSize
        {
            get
            {
                CheckDisposed();
                return NativeApi.SplitterPanel_GetSashSize_(NativePointer);
            }
            
        }
        
        public int SplitMode
        {
            get
            {
                CheckDisposed();
                return NativeApi.SplitterPanel_GetSplitMode_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.SplitterPanel_SetSplitMode_(NativePointer, value);
            }
        }
        
        public bool SashVisible
        {
            get
            {
                CheckDisposed();
                return NativeApi.SplitterPanel_GetSashVisible_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.SplitterPanel_SetSashVisible_(NativePointer, value);
            }
        }
        
        public bool IsSplit
        {
            get
            {
                CheckDisposed();
                return NativeApi.SplitterPanel_GetIsSplit_(NativePointer);
            }
            
        }
        
        public bool CanDoubleClick
        {
            get
            {
                CheckDisposed();
                return NativeApi.SplitterPanel_GetCanDoubleClick_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.SplitterPanel_SetCanDoubleClick_(NativePointer, value);
            }
        }
        
        public bool CanMoveSplitter
        {
            get
            {
                CheckDisposed();
                return NativeApi.SplitterPanel_GetCanMoveSplitter_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.SplitterPanel_SetCanMoveSplitter_(NativePointer, value);
            }
        }
        
        public int SashPosition
        {
            get
            {
                CheckDisposed();
                return NativeApi.SplitterPanel_GetSashPosition_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.SplitterPanel_SetSashPosition_(NativePointer, value);
            }
        }
        
        public bool RedrawOnSashPosition
        {
            get
            {
                CheckDisposed();
                return NativeApi.SplitterPanel_GetRedrawOnSashPosition_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.SplitterPanel_SetRedrawOnSashPosition_(NativePointer, value);
            }
        }
        
        public Control Control1
        {
            get
            {
                CheckDisposed();
                var _nnn = NativeApi.SplitterPanel_GetControl1_(NativePointer);
                var _mmm = NativeObject.GetFromNativePointer<Control>(_nnn, null)!;
                ReleaseNativeObjectPointer(_nnn);
                return _mmm;
            }
            
        }
        
        public Control Control2
        {
            get
            {
                CheckDisposed();
                var _nnn = NativeApi.SplitterPanel_GetControl2_(NativePointer);
                var _mmm = NativeObject.GetFromNativePointer<Control>(_nnn, null)!;
                ReleaseNativeObjectPointer(_nnn);
                return _mmm;
            }
            
        }
        
        public static System.IntPtr CreateEx(long styles)
        {
            return NativeApi.SplitterPanel_CreateEx_(styles);
        }
        
        public static void SetMinSashSize(int value)
        {
            NativeApi.SplitterPanel_SetMinSashSize_(value);
        }
        
        public void Initialize(Control window)
        {
            CheckDisposed();
            NativeApi.SplitterPanel_Initialize_(NativePointer, window.NativePointer);
        }
        
        public bool Replace(Control winOld, Control winNew)
        {
            CheckDisposed();
            return NativeApi.SplitterPanel_Replace_(NativePointer, winOld.NativePointer, winNew.NativePointer);
        }
        
        public bool SplitHorizontally(Control window1, Control window2, int sashPosition)
        {
            CheckDisposed();
            return NativeApi.SplitterPanel_SplitHorizontally_(NativePointer, window1.NativePointer, window2.NativePointer, sashPosition);
        }
        
        public bool SplitVertically(Control window1, Control window2, int sashPosition)
        {
            CheckDisposed();
            return NativeApi.SplitterPanel_SplitVertically_(NativePointer, window1.NativePointer, window2.NativePointer, sashPosition);
        }
        
        public bool DoUnsplit(Control toRemove)
        {
            CheckDisposed();
            return NativeApi.SplitterPanel_DoUnsplit_(NativePointer, toRemove.NativePointer);
        }
        
        public void UpdateSize()
        {
            CheckDisposed();
            NativeApi.SplitterPanel_UpdateSize_(NativePointer);
        }
        
        static GCHandle eventCallbackGCHandle;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.SplitterPanelEventCallbackType((obj, e, parameter) =>
                {
                    var w = NativeObject.GetFromNativePointer<SplitterPanel>(obj, p => new SplitterPanel(p));
                    if (w == null) return IntPtr.Zero;
                    return w.OnEvent(e, parameter);
                }
                );
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.SplitterPanel_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.SplitterPanelEvent e, IntPtr parameter)
        {
            switch (e)
            {
                case NativeApi.SplitterPanelEvent.SplitterSashPosChanging:
                {
                    var ea = new NativeEventArgs<SplitterPanelEventData>(MarshalEx.PtrToStructure<SplitterPanelEventData>(parameter));
                    SplitterSashPosChanging?.Invoke(this, ea); return ea.Result;
                }
                case NativeApi.SplitterPanelEvent.SplitterSashPosResize:
                {
                    var ea = new NativeEventArgs<SplitterPanelEventData>(MarshalEx.PtrToStructure<SplitterPanelEventData>(parameter));
                    SplitterSashPosResize?.Invoke(this, ea); return ea.Result;
                }
                case NativeApi.SplitterPanelEvent.SplitterSashPosChanged:
                {
                    var ea = new NativeEventArgs<SplitterPanelEventData>(MarshalEx.PtrToStructure<SplitterPanelEventData>(parameter));
                    SplitterSashPosChanged?.Invoke(this, ea); return ea.Result;
                }
                case NativeApi.SplitterPanelEvent.Unsplit:
                {
                    var ea = new NativeEventArgs<SplitterPanelEventData>(MarshalEx.PtrToStructure<SplitterPanelEventData>(parameter));
                    Unsplit?.Invoke(this, ea); return ea.Result;
                }
                case NativeApi.SplitterPanelEvent.SplitterDoubleClick:
                {
                    var ea = new NativeEventArgs<SplitterPanelEventData>(MarshalEx.PtrToStructure<SplitterPanelEventData>(parameter));
                    SplitterDoubleClick?.Invoke(this, ea); return ea.Result;
                }
                default: throw new Exception("Unexpected SplitterPanelEvent value: " + e);
            }
        }
        
        public event NativeEventHandler<SplitterPanelEventData>? SplitterSashPosChanging;
        public event NativeEventHandler<SplitterPanelEventData>? SplitterSashPosResize;
        public event NativeEventHandler<SplitterPanelEventData>? SplitterSashPosChanged;
        public event NativeEventHandler<SplitterPanelEventData>? Unsplit;
        public event NativeEventHandler<SplitterPanelEventData>? SplitterDoubleClick;
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr SplitterPanelEventCallbackType(IntPtr obj, SplitterPanelEvent e, IntPtr param);
            
            public enum SplitterPanelEvent
            {
                SplitterSashPosChanging,
                SplitterSashPosResize,
                SplitterSashPosChanged,
                Unsplit,
                SplitterDoubleClick,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_SetEventCallback_(SplitterPanelEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr SplitterPanel_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern long SplitterPanel_GetStyles_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_SetStyles_(IntPtr obj, long value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int SplitterPanel_GetMinimumPaneSize_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_SetMinimumPaneSize_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern double SplitterPanel_GetSashGravity_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_SetSashGravity_(IntPtr obj, double value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int SplitterPanel_GetDefaultSashSize_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int SplitterPanel_GetSashSize_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int SplitterPanel_GetSplitMode_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_SetSplitMode_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool SplitterPanel_GetSashVisible_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_SetSashVisible_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool SplitterPanel_GetIsSplit_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool SplitterPanel_GetCanDoubleClick_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_SetCanDoubleClick_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool SplitterPanel_GetCanMoveSplitter_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_SetCanMoveSplitter_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int SplitterPanel_GetSashPosition_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_SetSashPosition_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool SplitterPanel_GetRedrawOnSashPosition_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_SetRedrawOnSashPosition_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr SplitterPanel_GetControl1_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr SplitterPanel_GetControl2_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr SplitterPanel_CreateEx_(long styles);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_SetMinSashSize_(int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_Initialize_(IntPtr obj, IntPtr window);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool SplitterPanel_Replace_(IntPtr obj, IntPtr winOld, IntPtr winNew);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool SplitterPanel_SplitHorizontally_(IntPtr obj, IntPtr window1, IntPtr window2, int sashPosition);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool SplitterPanel_SplitVertically_(IntPtr obj, IntPtr window1, IntPtr window2, int sashPosition);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool SplitterPanel_DoUnsplit_(IntPtr obj, IntPtr toRemove);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SplitterPanel_UpdateSize_(IntPtr obj);
            
        }
    }
}
