// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2023.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal class GraphicsPath : NativeObject
    {
        static GraphicsPath()
        {
        }
        
        public GraphicsPath()
        {
            SetNativePointer(NativeApi.GraphicsPath_Create_());
        }
        
        public GraphicsPath(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public FillMode FillMode
        {
            get
            {
                CheckDisposed();
                var n = NativeApi.GraphicsPath_GetFillMode_(NativePointer);
                return n;
            }
            
            set
            {
                CheckDisposed();
                NativeApi.GraphicsPath_SetFillMode_(NativePointer, value);
            }
        }
        
        public void Initialize(DrawingContext dc)
        {
            CheckDisposed();
            NativeApi.GraphicsPath_Initialize_(NativePointer, dc.NativePointer);
        }
        
        public void AddLines(Alternet.Drawing.Point[] points)
        {
            CheckDisposed();
            NativeApi.GraphicsPath_AddLines_(NativePointer, points, points.Length);
        }
        
        public void AddLine(Alternet.Drawing.Point pt1, Alternet.Drawing.Point pt2)
        {
            CheckDisposed();
            NativeApi.GraphicsPath_AddLine_(NativePointer, pt1, pt2);
        }
        
        public void AddLineTo(Alternet.Drawing.Point pt)
        {
            CheckDisposed();
            NativeApi.GraphicsPath_AddLineTo_(NativePointer, pt);
        }
        
        public void AddEllipse(Alternet.Drawing.Rect rect)
        {
            CheckDisposed();
            NativeApi.GraphicsPath_AddEllipse_(NativePointer, rect);
        }
        
        public void AddBezier(Alternet.Drawing.Point startPoint, Alternet.Drawing.Point controlPoint1, Alternet.Drawing.Point controlPoint2, Alternet.Drawing.Point endPoint)
        {
            CheckDisposed();
            NativeApi.GraphicsPath_AddBezier_(NativePointer, startPoint, controlPoint1, controlPoint2, endPoint);
        }
        
        public void AddBezierTo(Alternet.Drawing.Point controlPoint1, Alternet.Drawing.Point controlPoint2, Alternet.Drawing.Point endPoint)
        {
            CheckDisposed();
            NativeApi.GraphicsPath_AddBezierTo_(NativePointer, controlPoint1, controlPoint2, endPoint);
        }
        
        public void AddArc(Alternet.Drawing.Point center, double radius, double startAngle, double sweepAngle)
        {
            CheckDisposed();
            NativeApi.GraphicsPath_AddArc_(NativePointer, center, radius, startAngle, sweepAngle);
        }
        
        public void AddRectangle(Alternet.Drawing.Rect rect)
        {
            CheckDisposed();
            NativeApi.GraphicsPath_AddRectangle_(NativePointer, rect);
        }
        
        public void AddRoundedRectangle(Alternet.Drawing.Rect rect, double cornerRadius)
        {
            CheckDisposed();
            NativeApi.GraphicsPath_AddRoundedRectangle_(NativePointer, rect, cornerRadius);
        }
        
        public Alternet.Drawing.Rect GetBounds()
        {
            CheckDisposed();
            var n = NativeApi.GraphicsPath_GetBounds_(NativePointer);
            return n;
        }
        
        public void StartFigure(Alternet.Drawing.Point point)
        {
            CheckDisposed();
            NativeApi.GraphicsPath_StartFigure_(NativePointer, point);
        }
        
        public void CloseFigure()
        {
            CheckDisposed();
            NativeApi.GraphicsPath_CloseFigure_(NativePointer);
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr GraphicsPath_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern FillMode GraphicsPath_GetFillMode_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_SetFillMode_(IntPtr obj, FillMode value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_Initialize_(IntPtr obj, IntPtr dc);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_AddLines_(IntPtr obj, Alternet.Drawing.Point[] points, int pointsCount);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_AddLine_(IntPtr obj, Alternet.Drawing.Point pt1, Alternet.Drawing.Point pt2);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_AddLineTo_(IntPtr obj, Alternet.Drawing.Point pt);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_AddEllipse_(IntPtr obj, Alternet.Drawing.Rect rect);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_AddBezier_(IntPtr obj, Alternet.Drawing.Point startPoint, Alternet.Drawing.Point controlPoint1, Alternet.Drawing.Point controlPoint2, Alternet.Drawing.Point endPoint);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_AddBezierTo_(IntPtr obj, Alternet.Drawing.Point controlPoint1, Alternet.Drawing.Point controlPoint2, Alternet.Drawing.Point endPoint);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_AddArc_(IntPtr obj, Alternet.Drawing.Point center, double radius, double startAngle, double sweepAngle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_AddRectangle_(IntPtr obj, Alternet.Drawing.Rect rect);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_AddRoundedRectangle_(IntPtr obj, Alternet.Drawing.Rect rect, double cornerRadius);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.Rect GraphicsPath_GetBounds_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_StartFigure_(IntPtr obj, Alternet.Drawing.Point point);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GraphicsPath_CloseFigure_(IntPtr obj);
            
        }
    }
}
