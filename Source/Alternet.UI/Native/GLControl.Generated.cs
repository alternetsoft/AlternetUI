// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class GLControl : Control
    {
        static GLControl()
        {
        }
        
        public GLControl()
        {
            SetNativePointer(NativeApi.GLControl_Create_());
        }
        
        public GLControl(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public Alternet.Drawing.SizeI ViewportSize
        {
            get
            {
                CheckDisposed();
                return NativeApi.GLControl_GetViewportSize_(NativePointer);
            }
            
        }
        
        public bool DefaultPaintUsed
        {
            get
            {
                CheckDisposed();
                return NativeApi.GLControl_GetDefaultPaintUsed_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.GLControl_SetDefaultPaintUsed_(NativePointer, value);
            }
        }
        
        public static bool IsOpenGLAvailable()
        {
            return NativeApi.GLControl_IsOpenGLAvailable_();
        }
        
        public static void CreateDummyOpenGlCanvas()
        {
            NativeApi.GLControl_CreateDummyOpenGlCanvas_();
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr GLControl_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeI GLControl_GetViewportSize_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool GLControl_GetDefaultPaintUsed_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GLControl_SetDefaultPaintUsed_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool GLControl_IsOpenGLAvailable_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void GLControl_CreateDummyOpenGlCanvas_();
            
        }
    }
}
