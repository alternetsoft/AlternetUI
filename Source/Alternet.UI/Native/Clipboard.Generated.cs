// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class Clipboard : NativeObject
    {
        static Clipboard()
        {
        }
        
        public Clipboard()
        {
            SetNativePointer(NativeApi.Clipboard_Create_());
        }
        
        public Clipboard(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public UnmanagedDataObject GetDataObject()
        {
            CheckDisposed();
            var _nnn = NativeApi.Clipboard_GetDataObject_(NativePointer);
            var _mmm = NativeObject.GetFromNativePointer<UnmanagedDataObject>(_nnn, p => new UnmanagedDataObject(p))!;
            ReleaseNativeObjectPointer(_nnn);
            return _mmm;
        }
        
        public void SetDataObject(UnmanagedDataObject value)
        {
            CheckDisposed();
            NativeApi.Clipboard_SetDataObject_(NativePointer, value.NativePointer);
        }
        
        public bool Flush()
        {
            CheckDisposed();
            return NativeApi.Clipboard_Flush_(NativePointer);
        }
        
        public bool IsIntFormatSupported(int format)
        {
            CheckDisposed();
            return NativeApi.Clipboard_IsIntFormatSupported_(NativePointer, format);
        }
        
        public bool IsStrFormatSupported(string format)
        {
            CheckDisposed();
            return NativeApi.Clipboard_IsStrFormatSupported_(NativePointer, format);
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Clipboard_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Clipboard_GetDataObject_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Clipboard_SetDataObject_(IntPtr obj, IntPtr value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Clipboard_Flush_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Clipboard_IsIntFormatSupported_(IntPtr obj, int format);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Clipboard_IsStrFormatSupported_(IntPtr obj, string format);
            
        }
    }
}
