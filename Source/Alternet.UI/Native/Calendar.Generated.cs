// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class Calendar : Control
    {
        static Calendar()
        {
            SetEventCallback();
        }
        
        public Calendar()
        {
            SetNativePointer(NativeApi.Calendar_Create_());
        }
        
        public Calendar(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public bool SundayFirst
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetSundayFirst_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetSundayFirst_(NativePointer, value);
            }
        }
        
        public bool MondayFirst
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetMondayFirst_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetMondayFirst_(NativePointer, value);
            }
        }
        
        public bool ShowHolidays
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetShowHolidays_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetShowHolidays_(NativePointer, value);
            }
        }
        
        public bool NoYearChange
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetNoYearChange_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetNoYearChange_(NativePointer, value);
            }
        }
        
        public bool NoMonthChange
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetNoMonthChange_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetNoMonthChange_(NativePointer, value);
            }
        }
        
        public bool SequentalMonthSelect
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetSequentalMonthSelect_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetSequentalMonthSelect_(NativePointer, value);
            }
        }
        
        public bool ShowSurroundWeeks
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetShowSurroundWeeks_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetShowSurroundWeeks_(NativePointer, value);
            }
        }
        
        public bool ShowWeekNumbers
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetShowWeekNumbers_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetShowWeekNumbers_(NativePointer, value);
            }
        }
        
        public bool UseGeneric
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetUseGeneric_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetUseGeneric_(NativePointer, value);
            }
        }
        
        public bool HasBorder
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetHasBorder_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetHasBorder_(NativePointer, value);
            }
        }
        
        public DateTime Value
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetValue_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetValue_(NativePointer, value);
            }
        }
        
        public DateTime MinValue
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetMinValue_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetMinValue_(NativePointer, value);
            }
        }
        
        public DateTime MaxValue
        {
            get
            {
                CheckDisposed();
                return NativeApi.Calendar_GetMaxValue_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Calendar_SetMaxValue_(NativePointer, value);
            }
        }
        
        public bool SetRange(bool useMinValue, bool useMaxValue)
        {
            CheckDisposed();
            return NativeApi.Calendar_SetRange_(NativePointer, useMinValue, useMaxValue);
        }
        
        public void SetHolidayColors(Alternet.Drawing.Color colorFg, Alternet.Drawing.Color colorBg)
        {
            CheckDisposed();
            NativeApi.Calendar_SetHolidayColors_(NativePointer, colorFg, colorBg);
        }
        
        public Alternet.Drawing.Color GetHolidayColorFg()
        {
            CheckDisposed();
            return NativeApi.Calendar_GetHolidayColorFg_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetHolidayColorBg()
        {
            CheckDisposed();
            return NativeApi.Calendar_GetHolidayColorBg_(NativePointer);
        }
        
        public void SetHeaderColors(Alternet.Drawing.Color colorFg, Alternet.Drawing.Color colorBg)
        {
            CheckDisposed();
            NativeApi.Calendar_SetHeaderColors_(NativePointer, colorFg, colorBg);
        }
        
        public Alternet.Drawing.Color GetHeaderColorFg()
        {
            CheckDisposed();
            return NativeApi.Calendar_GetHeaderColorFg_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetHeaderColorBg()
        {
            CheckDisposed();
            return NativeApi.Calendar_GetHeaderColorBg_(NativePointer);
        }
        
        public void SetHighlightColors(Alternet.Drawing.Color colorFg, Alternet.Drawing.Color colorBg)
        {
            CheckDisposed();
            NativeApi.Calendar_SetHighlightColors_(NativePointer, colorFg, colorBg);
        }
        
        public Alternet.Drawing.Color GetHighlightColorFg()
        {
            CheckDisposed();
            return NativeApi.Calendar_GetHighlightColorFg_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetHighlightColorBg()
        {
            CheckDisposed();
            return NativeApi.Calendar_GetHighlightColorBg_(NativePointer);
        }
        
        public bool AllowMonthChange()
        {
            CheckDisposed();
            return NativeApi.Calendar_AllowMonthChange_(NativePointer);
        }
        
        public bool EnableMonthChange(bool enable)
        {
            CheckDisposed();
            return NativeApi.Calendar_EnableMonthChange_(NativePointer, enable);
        }
        
        public void Mark(int day, bool mark)
        {
            CheckDisposed();
            NativeApi.Calendar_Mark_(NativePointer, day, mark);
        }
        
        public System.IntPtr GetAttr(int day)
        {
            CheckDisposed();
            return NativeApi.Calendar_GetAttr_(NativePointer, day);
        }
        
        public void SetAttr(int day, System.IntPtr calendarDateAttr)
        {
            CheckDisposed();
            NativeApi.Calendar_SetAttr_(NativePointer, day, calendarDateAttr);
        }
        
        public void ResetAttr(int day)
        {
            CheckDisposed();
            NativeApi.Calendar_ResetAttr_(NativePointer, day);
        }
        
        public void EnableHolidayDisplay(bool display)
        {
            CheckDisposed();
            NativeApi.Calendar_EnableHolidayDisplay_(NativePointer, display);
        }
        
        public void SetHoliday(int day)
        {
            CheckDisposed();
            NativeApi.Calendar_SetHoliday_(NativePointer, day);
        }
        
        public static System.IntPtr GetMarkDateAttr()
        {
            return NativeApi.Calendar_GetMarkDateAttr_();
        }
        
        public static void SetMarkDateAttr(System.IntPtr dateAttr)
        {
            NativeApi.Calendar_SetMarkDateAttr_(dateAttr);
        }
        
        public static System.IntPtr CreateDateAttr(int border)
        {
            return NativeApi.Calendar_CreateDateAttr_(border);
        }
        
        public static void DeleteDateAttr(System.IntPtr handle)
        {
            NativeApi.Calendar_DeleteDateAttr_(handle);
        }
        
        public static void DateAttrSetTextColor(System.IntPtr handle, Alternet.Drawing.Color colText)
        {
            NativeApi.Calendar_DateAttrSetTextColor_(handle, colText);
        }
        
        public static void DateAttrSetBackgroundColor(System.IntPtr handle, Alternet.Drawing.Color colBack)
        {
            NativeApi.Calendar_DateAttrSetBackgroundColor_(handle, colBack);
        }
        
        public static void DateAttrSetBorderColor(System.IntPtr handle, Alternet.Drawing.Color color)
        {
            NativeApi.Calendar_DateAttrSetBorderColor_(handle, color);
        }
        
        public static void DateAttrSetFont(System.IntPtr handle, System.IntPtr font)
        {
            NativeApi.Calendar_DateAttrSetFont_(handle, font);
        }
        
        public static void DateAttrSetBorder(System.IntPtr handle, int border)
        {
            NativeApi.Calendar_DateAttrSetBorder_(handle, border);
        }
        
        public static void DateAttrSetHoliday(System.IntPtr handle, bool holiday)
        {
            NativeApi.Calendar_DateAttrSetHoliday_(handle, holiday);
        }
        
        public static bool DateAttrHasTextColor(System.IntPtr handle)
        {
            return NativeApi.Calendar_DateAttrHasTextColor_(handle);
        }
        
        public static bool DateAttrHasBackgroundColor(System.IntPtr handle)
        {
            return NativeApi.Calendar_DateAttrHasBackgroundColor_(handle);
        }
        
        public static bool DateAttrHasBorderColor(System.IntPtr handle)
        {
            return NativeApi.Calendar_DateAttrHasBorderColor_(handle);
        }
        
        public static bool DateAttrHasFont(System.IntPtr handle)
        {
            return NativeApi.Calendar_DateAttrHasFont_(handle);
        }
        
        public static bool DateAttrHasBorder(System.IntPtr handle)
        {
            return NativeApi.Calendar_DateAttrHasBorder_(handle);
        }
        
        public static bool DateAttrIsHoliday(System.IntPtr handle)
        {
            return NativeApi.Calendar_DateAttrIsHoliday_(handle);
        }
        
        public static Alternet.Drawing.Color DateAttrGetTextColor(System.IntPtr handle)
        {
            return NativeApi.Calendar_DateAttrGetTextColor_(handle);
        }
        
        public static Alternet.Drawing.Color DateAttrGetBackgroundColor(System.IntPtr handle)
        {
            return NativeApi.Calendar_DateAttrGetBackgroundColor_(handle);
        }
        
        public static Alternet.Drawing.Color DateAttrGetBorderColor(System.IntPtr handle)
        {
            return NativeApi.Calendar_DateAttrGetBorderColor_(handle);
        }
        
        public static System.IntPtr DateAttrGetFont(System.IntPtr handle)
        {
            return NativeApi.Calendar_DateAttrGetFont_(handle);
        }
        
        public static int DateAttrGetBorder(System.IntPtr handle)
        {
            return NativeApi.Calendar_DateAttrGetBorder_(handle);
        }
        
        static GCHandle eventCallbackGCHandle;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.CalendarEventCallbackType((obj, e, parameter) =>
                {
                    var w = NativeObject.GetFromNativePointer<Calendar>(obj, p => new Calendar(p));
                    if (w == null) return IntPtr.Zero;
                    return w.OnEvent(e, parameter);
                }
                );
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.Calendar_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.CalendarEvent e, IntPtr parameter)
        {
            switch (e)
            {
                case NativeApi.CalendarEvent.SelectionChanged:
                {
                    SelectionChanged?.Invoke(); return IntPtr.Zero;
                }
                case NativeApi.CalendarEvent.PageChanged:
                {
                    PageChanged?.Invoke(); return IntPtr.Zero;
                }
                case NativeApi.CalendarEvent.WeekNumberClick:
                {
                    WeekNumberClick?.Invoke(); return IntPtr.Zero;
                }
                case NativeApi.CalendarEvent.DayHeaderClick:
                {
                    DayHeaderClick?.Invoke(); return IntPtr.Zero;
                }
                case NativeApi.CalendarEvent.DayDoubleClick:
                {
                    DayDoubleClick?.Invoke(); return IntPtr.Zero;
                }
                default: throw new Exception("Unexpected CalendarEvent value: " + e);
            }
        }
        
        public Action? SelectionChanged;
        public Action? PageChanged;
        public Action? WeekNumberClick;
        public Action? DayHeaderClick;
        public Action? DayDoubleClick;
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr CalendarEventCallbackType(IntPtr obj, CalendarEvent e, IntPtr param);
            
            public enum CalendarEvent
            {
                SelectionChanged,
                PageChanged,
                WeekNumberClick,
                DayHeaderClick,
                DayDoubleClick,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetEventCallback_(CalendarEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Calendar_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_GetSundayFirst_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetSundayFirst_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_GetMondayFirst_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetMondayFirst_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_GetShowHolidays_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetShowHolidays_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_GetNoYearChange_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetNoYearChange_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_GetNoMonthChange_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetNoMonthChange_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_GetSequentalMonthSelect_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetSequentalMonthSelect_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_GetShowSurroundWeeks_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetShowSurroundWeeks_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_GetShowWeekNumbers_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetShowWeekNumbers_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_GetUseGeneric_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetUseGeneric_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_GetHasBorder_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetHasBorder_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.DateTime Calendar_GetValue_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetValue_(IntPtr obj, NativeApiTypes.DateTime value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.DateTime Calendar_GetMinValue_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetMinValue_(IntPtr obj, NativeApiTypes.DateTime value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.DateTime Calendar_GetMaxValue_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetMaxValue_(IntPtr obj, NativeApiTypes.DateTime value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_SetRange_(IntPtr obj, bool useMinValue, bool useMaxValue);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetHolidayColors_(IntPtr obj, NativeApiTypes.Color colorFg, NativeApiTypes.Color colorBg);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Calendar_GetHolidayColorFg_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Calendar_GetHolidayColorBg_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetHeaderColors_(IntPtr obj, NativeApiTypes.Color colorFg, NativeApiTypes.Color colorBg);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Calendar_GetHeaderColorFg_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Calendar_GetHeaderColorBg_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetHighlightColors_(IntPtr obj, NativeApiTypes.Color colorFg, NativeApiTypes.Color colorBg);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Calendar_GetHighlightColorFg_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Calendar_GetHighlightColorBg_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_AllowMonthChange_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_EnableMonthChange_(IntPtr obj, bool enable);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_Mark_(IntPtr obj, int day, bool mark);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr Calendar_GetAttr_(IntPtr obj, int day);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetAttr_(IntPtr obj, int day, System.IntPtr calendarDateAttr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_ResetAttr_(IntPtr obj, int day);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_EnableHolidayDisplay_(IntPtr obj, bool display);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetHoliday_(IntPtr obj, int day);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr Calendar_GetMarkDateAttr_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_SetMarkDateAttr_(System.IntPtr dateAttr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr Calendar_CreateDateAttr_(int border);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_DeleteDateAttr_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_DateAttrSetTextColor_(System.IntPtr handle, NativeApiTypes.Color colText);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_DateAttrSetBackgroundColor_(System.IntPtr handle, NativeApiTypes.Color colBack);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_DateAttrSetBorderColor_(System.IntPtr handle, NativeApiTypes.Color color);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_DateAttrSetFont_(System.IntPtr handle, System.IntPtr font);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_DateAttrSetBorder_(System.IntPtr handle, int border);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Calendar_DateAttrSetHoliday_(System.IntPtr handle, bool holiday);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_DateAttrHasTextColor_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_DateAttrHasBackgroundColor_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_DateAttrHasBorderColor_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_DateAttrHasFont_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_DateAttrHasBorder_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Calendar_DateAttrIsHoliday_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Calendar_DateAttrGetTextColor_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Calendar_DateAttrGetBackgroundColor_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color Calendar_DateAttrGetBorderColor_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr Calendar_DateAttrGetFont_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Calendar_DateAttrGetBorder_(System.IntPtr handle);
            
        }
    }
}
