// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2021.</auto-generated>
#nullable enable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal class TabControl : Control
    {
        public TabControl()
        {
            SetNativePointer(NativeApi.TabControl_Create_());
            SetEventCallback();
        }
        
        public TabControl(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public int PageCount
        {
            get
            {
                CheckDisposed();
                return NativeApi.TabControl_GetPageCount_(NativePointer);
            }
            
        }
        
        public int SelectedPageIndex
        {
            get
            {
                CheckDisposed();
                return NativeApi.TabControl_GetSelectedPageIndex_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.TabControl_SetSelectedPageIndex_(NativePointer, value);
            }
        }
        
        public void InsertPage(int index, Control page, string title)
        {
            CheckDisposed();
            NativeApi.TabControl_InsertPage_(NativePointer, index, page.NativePointer, title);
        }
        
        public void RemovePage(int index, Control page)
        {
            CheckDisposed();
            NativeApi.TabControl_RemovePage_(NativePointer, index, page.NativePointer);
        }
        
        public Alternet.Drawing.SizeF GetTotalPreferredSizeFromPageSize(Alternet.Drawing.SizeF pageSize)
        {
            CheckDisposed();
            return NativeApi.TabControl_GetTotalPreferredSizeFromPageSize_(NativePointer, pageSize);
        }
        
        static GCHandle eventCallbackGCHandle;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.TabControlEventCallbackType((obj, e, parameter) =>
                {
                    var w = NativeObject.GetFromNativePointer<TabControl>(obj, p => new TabControl(p));
                    if (w == null) return IntPtr.Zero;
                    return w.OnEvent(e, parameter);
                }
                );
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.TabControl_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.TabControlEvent e, IntPtr parameter)
        {
            switch (e)
            {
                case NativeApi.TabControlEvent.SelectedPageIndexChanged:
                SelectedPageIndexChanged?.Invoke(this, EventArgs.Empty); return IntPtr.Zero;
                default: throw new Exception("Unexpected TabControlEvent value: " + e);
            }
        }
        
        public event EventHandler? SelectedPageIndexChanged;
        
        [SuppressUnmanagedCodeSecurity]
        private class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr TabControlEventCallbackType(IntPtr obj, TabControlEvent e, IntPtr param);
            
            public enum TabControlEvent
            {
                SelectedPageIndexChanged,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TabControl_SetEventCallback_(TabControlEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr TabControl_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TabControl_GetPageCount_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TabControl_GetSelectedPageIndex_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TabControl_SetSelectedPageIndex_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TabControl_InsertPage_(IntPtr obj, int index, IntPtr page, string title);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TabControl_RemovePage_(IntPtr obj, int index, IntPtr page);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.SizeF TabControl_GetTotalPreferredSizeFromPageSize_(IntPtr obj, NativeApiTypes.SizeF pageSize);
            
        }
    }
}
