// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class SizerFlags : NativeObject
    {
        static SizerFlags()
        {
        }
        
        public SizerFlags()
        {
            SetNativePointer(NativeApi.SizerFlags_Create_());
        }
        
        public SizerFlags(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public static System.IntPtr CreateSizerFlags(int proportion)
        {
            return NativeApi.SizerFlags_CreateSizerFlags_(proportion);
        }
        
        public static int GetDefaultBorder()
        {
            return NativeApi.SizerFlags_GetDefaultBorder_();
        }
        
        public static float GetDefaultBorderFractional()
        {
            return NativeApi.SizerFlags_GetDefaultBorderFractional_();
        }
        
        public static int GetProportion(System.IntPtr handle)
        {
            return NativeApi.SizerFlags_GetProportion_(handle);
        }
        
        public static int GetFlags(System.IntPtr handle)
        {
            return NativeApi.SizerFlags_GetFlags_(handle);
        }
        
        public static int GetBorderInPixels(System.IntPtr handle)
        {
            return NativeApi.SizerFlags_GetBorderInPixels_(handle);
        }
        
        public static void Proportion(System.IntPtr handle, int proportion)
        {
            NativeApi.SizerFlags_Proportion_(handle, proportion);
        }
        
        public static void Expand(System.IntPtr handle)
        {
            NativeApi.SizerFlags_Expand_(handle);
        }
        
        public static void Align(System.IntPtr handle, int alignment)
        {
            NativeApi.SizerFlags_Align_(handle, alignment);
        }
        
        public static void Center(System.IntPtr handle)
        {
            NativeApi.SizerFlags_Center_(handle);
        }
        
        public static void CenterVertical(System.IntPtr handle)
        {
            NativeApi.SizerFlags_CenterVertical_(handle);
        }
        
        public static void CenterHorizontal(System.IntPtr handle)
        {
            NativeApi.SizerFlags_CenterHorizontal_(handle);
        }
        
        public static void Top(System.IntPtr handle)
        {
            NativeApi.SizerFlags_Top_(handle);
        }
        
        public static void Left(System.IntPtr handle)
        {
            NativeApi.SizerFlags_Left_(handle);
        }
        
        public static void Right(System.IntPtr handle)
        {
            NativeApi.SizerFlags_Right_(handle);
        }
        
        public static void Bottom(System.IntPtr handle)
        {
            NativeApi.SizerFlags_Bottom_(handle);
        }
        
        public static void Border(System.IntPtr handle, int direction, int borderInPixels)
        {
            NativeApi.SizerFlags_Border_(handle, direction, borderInPixels);
        }
        
        public static void Border2(System.IntPtr handle, int direction)
        {
            NativeApi.SizerFlags_Border2_(handle, direction);
        }
        
        public static void DoubleBorder(System.IntPtr handle, int direction)
        {
            NativeApi.SizerFlags_DoubleBorder_(handle, direction);
        }
        
        public static void TripleBorder(System.IntPtr handle, int direction)
        {
            NativeApi.SizerFlags_TripleBorder_(handle, direction);
        }
        
        public static void HorzBorder(System.IntPtr handle)
        {
            NativeApi.SizerFlags_HorzBorder_(handle);
        }
        
        public static void DoubleHorzBorder(System.IntPtr handle)
        {
            NativeApi.SizerFlags_DoubleHorzBorder_(handle);
        }
        
        public static void Shaped(System.IntPtr handle)
        {
            NativeApi.SizerFlags_Shaped_(handle);
        }
        
        public static void FixedMinSize(System.IntPtr handle)
        {
            NativeApi.SizerFlags_FixedMinSize_(handle);
        }
        
        public static void ReserveSpaceEvenIfHidden(System.IntPtr handle)
        {
            NativeApi.SizerFlags_ReserveSpaceEvenIfHidden_(handle);
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr SizerFlags_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr SizerFlags_CreateSizerFlags_(int proportion);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int SizerFlags_GetDefaultBorder_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern float SizerFlags_GetDefaultBorderFractional_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int SizerFlags_GetProportion_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int SizerFlags_GetFlags_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int SizerFlags_GetBorderInPixels_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_Proportion_(System.IntPtr handle, int proportion);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_Expand_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_Align_(System.IntPtr handle, int alignment);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_Center_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_CenterVertical_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_CenterHorizontal_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_Top_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_Left_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_Right_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_Bottom_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_Border_(System.IntPtr handle, int direction, int borderInPixels);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_Border2_(System.IntPtr handle, int direction);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_DoubleBorder_(System.IntPtr handle, int direction);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_TripleBorder_(System.IntPtr handle, int direction);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_HorzBorder_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_DoubleHorzBorder_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_Shaped_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_FixedMinSize_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void SizerFlags_ReserveSpaceEvenIfHidden_(System.IntPtr handle);
            
        }
    }
}
