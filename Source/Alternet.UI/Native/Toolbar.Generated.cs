// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class Toolbar : Control
    {
        static Toolbar()
        {
        }
        
        public Toolbar()
        {
            SetNativePointer(NativeApi.Toolbar_Create_());
        }
        
        public Toolbar(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public int ItemsCount
        {
            get
            {
                CheckDisposed();
                return NativeApi.Toolbar_GetItemsCount_(NativePointer);
            }
            
        }
        
        public bool ItemTextVisible
        {
            get
            {
                CheckDisposed();
                return NativeApi.Toolbar_GetItemTextVisible_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Toolbar_SetItemTextVisible_(NativePointer, value);
            }
        }
        
        public bool ItemImagesVisible
        {
            get
            {
                CheckDisposed();
                return NativeApi.Toolbar_GetItemImagesVisible_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Toolbar_SetItemImagesVisible_(NativePointer, value);
            }
        }
        
        public bool NoDivider
        {
            get
            {
                CheckDisposed();
                return NativeApi.Toolbar_GetNoDivider_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Toolbar_SetNoDivider_(NativePointer, value);
            }
        }
        
        public bool IsVertical
        {
            get
            {
                CheckDisposed();
                return NativeApi.Toolbar_GetIsVertical_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Toolbar_SetIsVertical_(NativePointer, value);
            }
        }
        
        public bool IsBottom
        {
            get
            {
                CheckDisposed();
                return NativeApi.Toolbar_GetIsBottom_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Toolbar_SetIsBottom_(NativePointer, value);
            }
        }
        
        public bool IsRight
        {
            get
            {
                CheckDisposed();
                return NativeApi.Toolbar_GetIsRight_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Toolbar_SetIsRight_(NativePointer, value);
            }
        }
        
        public ToolbarItemImageToTextDisplayMode ImageToTextDisplayMode
        {
            get
            {
                CheckDisposed();
                return NativeApi.Toolbar_GetImageToTextDisplayMode_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Toolbar_SetImageToTextDisplayMode_(NativePointer, value);
            }
        }
        
        public static System.IntPtr CreateEx(bool mainToolbar)
        {
            return NativeApi.Toolbar_CreateEx_(mainToolbar);
        }
        
        public void InsertItemAt(int index, ToolbarItem item)
        {
            CheckDisposed();
            NativeApi.Toolbar_InsertItemAt_(NativePointer, index, item.NativePointer);
        }
        
        public void RemoveItemAt(int index)
        {
            CheckDisposed();
            NativeApi.Toolbar_RemoveItemAt_(NativePointer, index);
        }
        
        public void Realize()
        {
            CheckDisposed();
            NativeApi.Toolbar_Realize_(NativePointer);
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Toolbar_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Toolbar_GetItemsCount_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Toolbar_GetItemTextVisible_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Toolbar_SetItemTextVisible_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Toolbar_GetItemImagesVisible_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Toolbar_SetItemImagesVisible_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Toolbar_GetNoDivider_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Toolbar_SetNoDivider_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Toolbar_GetIsVertical_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Toolbar_SetIsVertical_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Toolbar_GetIsBottom_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Toolbar_SetIsBottom_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Toolbar_GetIsRight_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Toolbar_SetIsRight_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern ToolbarItemImageToTextDisplayMode Toolbar_GetImageToTextDisplayMode_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Toolbar_SetImageToTextDisplayMode_(IntPtr obj, ToolbarItemImageToTextDisplayMode value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr Toolbar_CreateEx_(bool mainToolbar);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Toolbar_InsertItemAt_(IntPtr obj, int index, IntPtr item);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Toolbar_RemoveItemAt_(IntPtr obj, int index);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Toolbar_Realize_(IntPtr obj);
            
        }
    }
}
