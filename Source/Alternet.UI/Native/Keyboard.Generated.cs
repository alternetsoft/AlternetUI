// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class Keyboard : NativeObject
    {
        static Keyboard()
        {
            SetEventCallback();
        }
        
        public Keyboard()
        {
            SetNativePointer(NativeApi.Keyboard_Create_());
        }
        
        public Keyboard(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public char InputChar
        {
            get
            {
                CheckDisposed();
                return NativeApi.Keyboard_GetInputChar_(NativePointer);
            }
            
        }
        
        public byte InputEventCode
        {
            get
            {
                CheckDisposed();
                return NativeApi.Keyboard_GetInputEventCode_(NativePointer);
            }
            
        }
        
        public bool InputHandled
        {
            get
            {
                CheckDisposed();
                return NativeApi.Keyboard_GetInputHandled_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.Keyboard_SetInputHandled_(NativePointer, value);
            }
        }
        
        public Alternet.UI.Key InputKey
        {
            get
            {
                CheckDisposed();
                return NativeApi.Keyboard_GetInputKey_(NativePointer);
            }
            
        }
        
        public bool InputIsRepeat
        {
            get
            {
                CheckDisposed();
                return NativeApi.Keyboard_GetInputIsRepeat_(NativePointer);
            }
            
        }
        
        public Alternet.UI.KeyStates GetKeyState(Alternet.UI.Key key)
        {
            CheckDisposed();
            return NativeApi.Keyboard_GetKeyState_(NativePointer, key);
        }
        
        static GCHandle eventCallbackGCHandle;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.KeyboardEventCallbackType((obj, e, parameter) =>
                    UI.Application.HandleThreadExceptions(() =>
                    {
                        var w = NativeObject.GetFromNativePointer<Keyboard>(obj, p => new Keyboard(p));
                        if (w == null) return IntPtr.Zero;
                        return w.OnEvent(e, parameter);
                    }
                    )
                );
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.Keyboard_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.KeyboardEvent e, IntPtr parameter)
        {
            KeyPress?.Invoke(); return IntPtr.Zero;
        }
        
        public Action? KeyPress;
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr KeyboardEventCallbackType(IntPtr obj, KeyboardEvent e, IntPtr param);
            
            public enum KeyboardEvent
            {
                KeyPress,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Keyboard_SetEventCallback_(KeyboardEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Keyboard_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern char Keyboard_GetInputChar_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern byte Keyboard_GetInputEventCode_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Keyboard_GetInputHandled_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Keyboard_SetInputHandled_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.UI.Key Keyboard_GetInputKey_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Keyboard_GetInputIsRepeat_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.UI.KeyStates Keyboard_GetKeyState_(IntPtr obj, Alternet.UI.Key key);
            
        }
    }
}
