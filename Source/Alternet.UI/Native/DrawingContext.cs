// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2021.</auto-generated>
#nullable enable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal class DrawingContext : NativeObject
    {
        private DrawingContext()
        {
        }
        
        public DrawingContext(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public void FillRectangle(Alternet.Drawing.RectangleF rectangle, Brush brush)
        {
            CheckDisposed();
            NativeApi.DrawingContext_FillRectangle_(NativePointer, rectangle, brush.NativePointer);
        }
        
        public void DrawRectangle(Alternet.Drawing.RectangleF rectangle, Pen pen)
        {
            CheckDisposed();
            NativeApi.DrawingContext_DrawRectangle_(NativePointer, rectangle, pen.NativePointer);
        }
        
        public void FillEllipse(Alternet.Drawing.RectangleF bounds, Brush brush)
        {
            CheckDisposed();
            NativeApi.DrawingContext_FillEllipse_(NativePointer, bounds, brush.NativePointer);
        }
        
        public void DrawEllipse(Alternet.Drawing.RectangleF bounds, Pen pen)
        {
            CheckDisposed();
            NativeApi.DrawingContext_DrawEllipse_(NativePointer, bounds, pen.NativePointer);
        }
        
        public void DrawText(string text, Alternet.Drawing.PointF origin, Font font, Brush brush)
        {
            CheckDisposed();
            NativeApi.DrawingContext_DrawText_(NativePointer, text, origin, font.NativePointer, brush.NativePointer);
        }
        
        public void DrawImage(Image image, Alternet.Drawing.PointF origin)
        {
            CheckDisposed();
            NativeApi.DrawingContext_DrawImage_(NativePointer, image.NativePointer, origin);
        }
        
        public Alternet.Drawing.SizeF MeasureText(string text, Font font)
        {
            CheckDisposed();
            return NativeApi.DrawingContext_MeasureText_(NativePointer, text, font.NativePointer);
        }
        
        public void PushTransform(Alternet.Drawing.SizeF translation)
        {
            CheckDisposed();
            NativeApi.DrawingContext_PushTransform_(NativePointer, translation);
        }
        
        public void Pop()
        {
            CheckDisposed();
            NativeApi.DrawingContext_Pop_(NativePointer);
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        private class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void DrawingContext_FillRectangle_(IntPtr obj, NativeApiTypes.RectangleF rectangle, IntPtr brush);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void DrawingContext_DrawRectangle_(IntPtr obj, NativeApiTypes.RectangleF rectangle, IntPtr pen);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void DrawingContext_FillEllipse_(IntPtr obj, NativeApiTypes.RectangleF bounds, IntPtr brush);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void DrawingContext_DrawEllipse_(IntPtr obj, NativeApiTypes.RectangleF bounds, IntPtr pen);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void DrawingContext_DrawText_(IntPtr obj, string text, NativeApiTypes.PointF origin, IntPtr font, IntPtr brush);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void DrawingContext_DrawImage_(IntPtr obj, IntPtr image, NativeApiTypes.PointF origin);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.SizeF DrawingContext_MeasureText_(IntPtr obj, string text, IntPtr font);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void DrawingContext_PushTransform_(IntPtr obj, NativeApiTypes.SizeF translation);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void DrawingContext_Pop_(IntPtr obj);
            
        }
    }
}
