// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class RadioButton : Control
    {
        static RadioButton()
        {
            SetEventCallback();
        }
        
        public RadioButton()
        {
            SetNativePointer(NativeApi.RadioButton_Create_());
        }
        
        public RadioButton(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public bool IsChecked
        {
            get
            {
                CheckDisposed();
                return NativeApi.RadioButton_GetIsChecked_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.RadioButton_SetIsChecked_(NativePointer, value);
            }
        }
        
        static GCHandle eventCallbackGCHandle;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.RadioButtonEventCallbackType((obj, e, parameter) =>
                    UI.Application.HandleThreadExceptions(() =>
                    {
                        var w = NativeObject.GetFromNativePointer<RadioButton>(obj, p => new RadioButton(p));
                        if (w == null) return IntPtr.Zero;
                        return w.OnEvent(e, parameter);
                    }
                    )
                );
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.RadioButton_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.RadioButtonEvent e, IntPtr parameter)
        {
            CheckedChanged?.Invoke(); return IntPtr.Zero;
        }
        
        public Action? CheckedChanged;
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr RadioButtonEventCallbackType(IntPtr obj, RadioButtonEvent e, IntPtr param);
            
            public enum RadioButtonEvent
            {
                CheckedChanged,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void RadioButton_SetEventCallback_(RadioButtonEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr RadioButton_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool RadioButton_GetIsChecked_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void RadioButton_SetIsChecked_(IntPtr obj, bool value);
            
        }
    }
}
