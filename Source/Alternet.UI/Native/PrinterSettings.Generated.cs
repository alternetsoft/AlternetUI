// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class PrinterSettings : NativeObject, Alternet.Drawing.Printing.IPrinterSettingsHandler
    {
        static PrinterSettings()
        {
        }
        
        public PrinterSettings()
        {
            SetNativePointer(NativeApi.PrinterSettings_Create_());
        }
        
        public PrinterSettings(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public Alternet.Drawing.Printing.Duplex Duplex
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetDuplex_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrinterSettings_SetDuplex_(NativePointer, value);
            }
        }
        
        public int FromPage
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetFromPage_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrinterSettings_SetFromPage_(NativePointer, value);
            }
        }
        
        public int ToPage
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetToPage_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrinterSettings_SetToPage_(NativePointer, value);
            }
        }
        
        public int MinimumPage
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetMinimumPage_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrinterSettings_SetMinimumPage_(NativePointer, value);
            }
        }
        
        public int MaximumPage
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetMaximumPage_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrinterSettings_SetMaximumPage_(NativePointer, value);
            }
        }
        
        public Alternet.Drawing.Printing.PrintRange PrintRange
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetPrintRange_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrinterSettings_SetPrintRange_(NativePointer, value);
            }
        }
        
        public bool Collate
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetCollate_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrinterSettings_SetCollate_(NativePointer, value);
            }
        }
        
        public int Copies
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetCopies_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrinterSettings_SetCopies_(NativePointer, value);
            }
        }
        
        public bool PrintToFile
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetPrintToFile_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrinterSettings_SetPrintToFile_(NativePointer, value);
            }
        }
        
        public string? PrinterName
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetPrinterName_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrinterSettings_SetPrinterName_(NativePointer, value);
            }
        }
        
        public bool IsValid
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetIsValid_(NativePointer);
            }
            
        }
        
        public bool IsDefaultPrinter
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetIsDefaultPrinter_(NativePointer);
            }
            
        }
        
        public string? PrintFileName
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrinterSettings_GetPrintFileName_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrinterSettings_SetPrintFileName_(NativePointer, value);
            }
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr PrinterSettings_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.Printing.Duplex PrinterSettings_GetDuplex_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrinterSettings_SetDuplex_(IntPtr obj, Alternet.Drawing.Printing.Duplex value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PrinterSettings_GetFromPage_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrinterSettings_SetFromPage_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PrinterSettings_GetToPage_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrinterSettings_SetToPage_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PrinterSettings_GetMinimumPage_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrinterSettings_SetMinimumPage_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PrinterSettings_GetMaximumPage_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrinterSettings_SetMaximumPage_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.Printing.PrintRange PrinterSettings_GetPrintRange_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrinterSettings_SetPrintRange_(IntPtr obj, Alternet.Drawing.Printing.PrintRange value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PrinterSettings_GetCollate_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrinterSettings_SetCollate_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PrinterSettings_GetCopies_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrinterSettings_SetCopies_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PrinterSettings_GetPrintToFile_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrinterSettings_SetPrintToFile_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string? PrinterSettings_GetPrinterName_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrinterSettings_SetPrinterName_(IntPtr obj, string? value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PrinterSettings_GetIsValid_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PrinterSettings_GetIsDefaultPrinter_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string? PrinterSettings_GetPrintFileName_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrinterSettings_SetPrintFileName_(IntPtr obj, string? value);
            
        }
    }
}
