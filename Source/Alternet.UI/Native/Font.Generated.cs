// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class Font : NativeObject
    {
        static Font()
        {
        }
        
        public Font()
        {
            SetNativePointer(NativeApi.Font_Create_());
        }
        
        public Font(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public static System.String[] Families
        {
            get
            {
                var array = NativeApi.Font_OpenFamiliesArray_();
                try
                {
                    var count = NativeApi.Font_GetFamiliesItemCount_(array);
                    var result = new System.Collections.Generic.List<string>(count);
                    for (int i = 0; i < count; i++)
                    {
                        var n = NativeApi.Font_GetFamiliesItemAt_(array, i);
                        var item = n;
                        result.Add(item);
                    }
                    return result.ToArray();
                }
                finally
                {
                    NativeApi.Font_CloseFamiliesArray_(array);
                }
            }
            
        }
        
        public string Name
        {
            get
            {
                CheckDisposed();
                return NativeApi.Font_GetName_(NativePointer);
            }
            
        }
        
        public double SizeInPoints
        {
            get
            {
                CheckDisposed();
                return NativeApi.Font_GetSizeInPoints_(NativePointer);
            }
            
        }
        
        public Alternet.Drawing.FontStyle Style
        {
            get
            {
                CheckDisposed();
                return NativeApi.Font_GetStyle_(NativePointer);
            }
            
        }
        
        public string Description
        {
            get
            {
                CheckDisposed();
                return NativeApi.Font_GetDescription_(NativePointer);
            }
            
        }
        
        public Alternet.Drawing.SizeI GetPixelSize()
        {
            CheckDisposed();
            return NativeApi.Font_GetPixelSize_(NativePointer);
        }
        
        public bool IsUsingSizeInPixels()
        {
            CheckDisposed();
            return NativeApi.Font_IsUsingSizeInPixels_(NativePointer);
        }
        
        public int GetNumericWeight()
        {
            CheckDisposed();
            return NativeApi.Font_GetNumericWeight_(NativePointer);
        }
        
        public bool GetUnderlined()
        {
            CheckDisposed();
            return NativeApi.Font_GetUnderlined_(NativePointer);
        }
        
        public bool GetItalic()
        {
            CheckDisposed();
            return NativeApi.Font_GetItalic_(NativePointer);
        }
        
        public bool GetStrikethrough()
        {
            CheckDisposed();
            return NativeApi.Font_GetStrikethrough_(NativePointer);
        }
        
        public int GetEncoding()
        {
            CheckDisposed();
            return NativeApi.Font_GetEncoding_(NativePointer);
        }
        
        public bool IsFixedWidth()
        {
            CheckDisposed();
            return NativeApi.Font_IsFixedWidth_(NativePointer);
        }
        
        public static int GetDefaultEncoding()
        {
            return NativeApi.Font_GetDefaultEncoding_();
        }
        
        public static void SetDefaultEncoding(int encoding)
        {
            NativeApi.Font_SetDefaultEncoding_(encoding);
        }
        
        public int GetWeight()
        {
            CheckDisposed();
            return NativeApi.Font_GetWeight_(NativePointer);
        }
        
        public void Initialize(Alternet.Drawing.GenericFontFamily genericFamily, string? familyName, double emSizeInPoints, Alternet.Drawing.FontStyle style)
        {
            CheckDisposed();
            NativeApi.Font_Initialize_(NativePointer, genericFamily, familyName, emSizeInPoints, style);
        }
        
        public void InitializeWithDefaultFont()
        {
            CheckDisposed();
            NativeApi.Font_InitializeWithDefaultFont_(NativePointer);
        }
        
        public void InitializeWithDefaultMonoFont()
        {
            CheckDisposed();
            NativeApi.Font_InitializeWithDefaultMonoFont_(NativePointer);
        }
        
        public void InitializeFromFont(Font font)
        {
            CheckDisposed();
            NativeApi.Font_InitializeFromFont_(NativePointer, font.NativePointer);
        }
        
        public static bool IsFamilyValid(string fontFamily)
        {
            return NativeApi.Font_IsFamilyValid_(fontFamily);
        }
        
        public static string GetGenericFamilyName(Alternet.Drawing.GenericFontFamily genericFamily)
        {
            return NativeApi.Font_GetGenericFamilyName_(genericFamily);
        }
        
        public bool IsEqualTo(Font other)
        {
            CheckDisposed();
            return NativeApi.Font_IsEqualTo_(NativePointer, other.NativePointer);
        }
        
        public string Serialize()
        {
            CheckDisposed();
            return NativeApi.Font_Serialize_(NativePointer);
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Font_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string Font_GetName_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern double Font_GetSizeInPoints_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.FontStyle Font_GetStyle_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string Font_GetDescription_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr Font_OpenFamiliesArray_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Font_GetFamiliesItemCount_(System.IntPtr array);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string Font_GetFamiliesItemAt_(System.IntPtr array, int index);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Font_CloseFamiliesArray_(System.IntPtr array);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeI Font_GetPixelSize_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Font_IsUsingSizeInPixels_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Font_GetNumericWeight_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Font_GetUnderlined_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Font_GetItalic_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Font_GetStrikethrough_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Font_GetEncoding_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Font_IsFixedWidth_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Font_GetDefaultEncoding_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Font_SetDefaultEncoding_(int encoding);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Font_GetWeight_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Font_Initialize_(IntPtr obj, Alternet.Drawing.GenericFontFamily genericFamily, string? familyName, double emSizeInPoints, Alternet.Drawing.FontStyle style);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Font_InitializeWithDefaultFont_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Font_InitializeWithDefaultMonoFont_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Font_InitializeFromFont_(IntPtr obj, IntPtr font);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Font_IsFamilyValid_(string fontFamily);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string Font_GetGenericFamilyName_(Alternet.Drawing.GenericFontFamily genericFamily);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool Font_IsEqualTo_(IntPtr obj, IntPtr other);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string Font_Serialize_(IntPtr obj);
            
        }
    }
}
