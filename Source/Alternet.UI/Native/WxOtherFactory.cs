// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2023 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal class WxOtherFactory : NativeObject
    {
        static WxOtherFactory()
        {
        }
        
        public WxOtherFactory()
        {
            SetNativePointer(NativeApi.WxOtherFactory_Create_());
        }
        
        public WxOtherFactory(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public static System.IntPtr CreateRichToolTip(string title, string message)
        {
            return NativeApi.WxOtherFactory_CreateRichToolTip_(title, message);
        }
        
        public static void DeleteRichToolTip(System.IntPtr handle)
        {
            NativeApi.WxOtherFactory_DeleteRichToolTip_(handle);
        }
        
        public static void RichToolTipSetBkColor(System.IntPtr handle, Alternet.Drawing.Color color, Alternet.Drawing.Color endColor)
        {
            NativeApi.WxOtherFactory_RichToolTipSetBkColor_(handle, color, endColor);
        }
        
        public static void RichToolTipSetIcon(System.IntPtr handle, ImageSet? bitmapBundle)
        {
            NativeApi.WxOtherFactory_RichToolTipSetIcon_(handle, bitmapBundle?.NativePointer ?? IntPtr.Zero);
        }
        
        public static void RichToolTipSetIcon2(System.IntPtr handle, int icon)
        {
            NativeApi.WxOtherFactory_RichToolTipSetIcon2_(handle, icon);
        }
        
        public static void RichToolTipSetTimeout(System.IntPtr handle, uint milliseconds, uint millisecondsShowdelay)
        {
            NativeApi.WxOtherFactory_RichToolTipSetTimeout_(handle, milliseconds, millisecondsShowdelay);
        }
        
        public static void RichToolTipSetTipKind(System.IntPtr handle, int tipKind)
        {
            NativeApi.WxOtherFactory_RichToolTipSetTipKind_(handle, tipKind);
        }
        
        public static void RichToolTipSetTitleFont(System.IntPtr handle, Font? font)
        {
            NativeApi.WxOtherFactory_RichToolTipSetTitleFont_(handle, font?.NativePointer ?? IntPtr.Zero);
        }
        
        public static void RichToolTipShowFor(System.IntPtr handle, System.IntPtr window, Alternet.Drawing.Int32Rect rect)
        {
            NativeApi.WxOtherFactory_RichToolTipShowFor_(handle, window, rect);
        }
        
        public static System.IntPtr CreateToolTip(string tip)
        {
            return NativeApi.WxOtherFactory_CreateToolTip_(tip);
        }
        
        public static void DeleteToolTip(System.IntPtr handle)
        {
            NativeApi.WxOtherFactory_DeleteToolTip_(handle);
        }
        
        public static string ToolTipGetTip(System.IntPtr handle)
        {
            return NativeApi.WxOtherFactory_ToolTipGetTip_(handle);
        }
        
        public static System.IntPtr ToolTipGetWindow(System.IntPtr handle)
        {
            return NativeApi.WxOtherFactory_ToolTipGetWindow_(handle);
        }
        
        public static void ToolTipSetTip(System.IntPtr handle, string tip)
        {
            NativeApi.WxOtherFactory_ToolTipSetTip_(handle, tip);
        }
        
        public static void ToolTipEnable(bool flag)
        {
            NativeApi.WxOtherFactory_ToolTipEnable_(flag);
        }
        
        public static void ToolTipSetAutoPop(long msecs)
        {
            NativeApi.WxOtherFactory_ToolTipSetAutoPop_(msecs);
        }
        
        public static void ToolTipSetDelay(long msecs)
        {
            NativeApi.WxOtherFactory_ToolTipSetDelay_(msecs);
        }
        
        public static void ToolTipSetMaxWidth(int width)
        {
            NativeApi.WxOtherFactory_ToolTipSetMaxWidth_(width);
        }
        
        public static void ToolTipSetReshow(long msecs)
        {
            NativeApi.WxOtherFactory_ToolTipSetReshow_(msecs);
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr WxOtherFactory_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr WxOtherFactory_CreateRichToolTip_(string title, string message);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_DeleteRichToolTip_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_RichToolTipSetBkColor_(System.IntPtr handle, NativeApiTypes.Color color, NativeApiTypes.Color endColor);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_RichToolTipSetIcon_(System.IntPtr handle, IntPtr bitmapBundle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_RichToolTipSetIcon2_(System.IntPtr handle, int icon);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_RichToolTipSetTimeout_(System.IntPtr handle, uint milliseconds, uint millisecondsShowdelay);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_RichToolTipSetTipKind_(System.IntPtr handle, int tipKind);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_RichToolTipSetTitleFont_(System.IntPtr handle, IntPtr font);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_RichToolTipShowFor_(System.IntPtr handle, System.IntPtr window, Alternet.Drawing.Int32Rect rect);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr WxOtherFactory_CreateToolTip_(string tip);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_DeleteToolTip_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string WxOtherFactory_ToolTipGetTip_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr WxOtherFactory_ToolTipGetWindow_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_ToolTipSetTip_(System.IntPtr handle, string tip);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_ToolTipEnable_(bool flag);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_ToolTipSetAutoPop_(long msecs);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_ToolTipSetDelay_(long msecs);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_ToolTipSetMaxWidth_(int width);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void WxOtherFactory_ToolTipSetReshow_(long msecs);
            
        }
    }
}
