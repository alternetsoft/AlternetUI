// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class PropertyGrid : Control
    {
        static PropertyGrid()
        {
            SetEventCallback();
        }
        
        public PropertyGrid()
        {
            SetNativePointer(NativeApi.PropertyGrid_Create_());
        }
        
        public PropertyGrid(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public int EventValidationFailureBehavior
        {
            get
            {
                CheckDisposed();
                return NativeApi.PropertyGrid_GetEventValidationFailureBehavior_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PropertyGrid_SetEventValidationFailureBehavior_(NativePointer, value);
            }
        }
        
        public System.IntPtr EventPropValue
        {
            get
            {
                CheckDisposed();
                return NativeApi.PropertyGrid_GetEventPropValue_(NativePointer);
            }
            
        }
        
        public int EventColumn
        {
            get
            {
                CheckDisposed();
                return NativeApi.PropertyGrid_GetEventColumn_(NativePointer);
            }
            
        }
        
        public System.IntPtr EventProperty
        {
            get
            {
                CheckDisposed();
                return NativeApi.PropertyGrid_GetEventProperty_(NativePointer);
            }
            
        }
        
        public string EventPropertyName
        {
            get
            {
                CheckDisposed();
                return NativeApi.PropertyGrid_GetEventPropertyName_(NativePointer);
            }
            
        }
        
        public string EventValidationFailureMessage
        {
            get
            {
                CheckDisposed();
                return NativeApi.PropertyGrid_GetEventValidationFailureMessage_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PropertyGrid_SetEventValidationFailureMessage_(NativePointer, value);
            }
        }
        
        public static string NameAsLabel
        {
            get
            {
                return NativeApi.PropertyGrid_GetNameAsLabel_();
            }
            
        }
        
        public bool HasBorder
        {
            get
            {
                CheckDisposed();
                return NativeApi.PropertyGrid_GetHasBorder_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PropertyGrid_SetHasBorder_(NativePointer, value);
            }
        }
        
        public long CreateStyle
        {
            get
            {
                CheckDisposed();
                return NativeApi.PropertyGrid_GetCreateStyle_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PropertyGrid_SetCreateStyle_(NativePointer, value);
            }
        }
        
        public long CreateStyleEx
        {
            get
            {
                CheckDisposed();
                return NativeApi.PropertyGrid_GetCreateStyleEx_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PropertyGrid_SetCreateStyleEx_(NativePointer, value);
            }
        }
        
        public Alternet.Drawing.PointI CalcScrolledPosition(Alternet.Drawing.PointI point)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CalcScrolledPosition_(NativePointer, point);
        }
        
        public Alternet.Drawing.PointI CalcUnscrolledPosition(Alternet.Drawing.PointI point)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CalcUnscrolledPosition_(NativePointer, point);
        }
        
        public int GetHitTestColumn(Alternet.Drawing.PointI point)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetHitTestColumn_(NativePointer, point);
        }
        
        public System.IntPtr GetHitTestProp(Alternet.Drawing.PointI point)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetHitTestProp_(NativePointer, point);
        }
        
        public static System.IntPtr ColorDatabaseCreate()
        {
            return NativeApi.PropertyGrid_ColorDatabaseCreate_();
        }
        
        public static void ColorDatabaseDelete(System.IntPtr handle)
        {
            NativeApi.PropertyGrid_ColorDatabaseDelete_(handle);
        }
        
        public static void ColorDatabaseSetGlobal(System.IntPtr handle)
        {
            NativeApi.PropertyGrid_ColorDatabaseSetGlobal_(handle);
        }
        
        public static void ColorDatabaseAdd(System.IntPtr handle, string name, Alternet.Drawing.Color color)
        {
            NativeApi.PropertyGrid_ColorDatabaseAdd_(handle, name, color);
        }
        
        public static Alternet.Drawing.Color ColorDatabaseFind(System.IntPtr handle, string name)
        {
            return NativeApi.PropertyGrid_ColorDatabaseFind_(handle, name);
        }
        
        public static string ColorDatabaseFindName(System.IntPtr handle, Alternet.Drawing.Color color)
        {
            return NativeApi.PropertyGrid_ColorDatabaseFindName_(handle, color);
        }
        
        public static void KnownColorsClear()
        {
            NativeApi.PropertyGrid_KnownColorsClear_();
        }
        
        public static void KnownColorsAdd(string name, string title, Alternet.Drawing.Color value, int knownColor)
        {
            NativeApi.PropertyGrid_KnownColorsAdd_(name, title, value, knownColor);
        }
        
        public static void KnownColorsApply()
        {
            NativeApi.PropertyGrid_KnownColorsApply_();
        }
        
        public static void KnownColorsSetCustomColorTitle(string value)
        {
            NativeApi.PropertyGrid_KnownColorsSetCustomColorTitle_(value);
        }
        
        public System.IntPtr GetPropertyValidator(System.IntPtr prop)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyValidator_(NativePointer, prop);
        }
        
        public void SetPropertyValidator(System.IntPtr prop, System.IntPtr validator)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyValidator_(NativePointer, prop, validator);
        }
        
        public void SetPropertyFlag(System.IntPtr prop, int flag, bool value)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyFlag_(NativePointer, prop, flag, value);
        }
        
        public static System.IntPtr CreateEx(long styles)
        {
            return NativeApi.PropertyGrid_CreateEx_(styles);
        }
        
        public void AddActionTrigger(int action, int keycode, int modifiers)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_AddActionTrigger_(NativePointer, action, keycode, modifiers);
        }
        
        public void DedicateKey(int keycode)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_DedicateKey_(NativePointer, keycode);
        }
        
        public static void AutoGetTranslation(bool enable)
        {
            NativeApi.PropertyGrid_AutoGetTranslation_(enable);
        }
        
        public void CenterSplitter(bool enableAutoResizing)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_CenterSplitter_(NativePointer, enableAutoResizing);
        }
        
        public void ClearActionTriggers(int action)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_ClearActionTriggers_(NativePointer, action);
        }
        
        public bool CommitChangesFromEditor(uint flags)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CommitChangesFromEditor_(NativePointer, flags);
        }
        
        public void EditorsValueWasModified()
        {
            CheckDisposed();
            NativeApi.PropertyGrid_EditorsValueWasModified_(NativePointer);
        }
        
        public void EditorsValueWasNotModified()
        {
            CheckDisposed();
            NativeApi.PropertyGrid_EditorsValueWasNotModified_(NativePointer);
        }
        
        public bool EnableCategories(bool enable)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_EnableCategories_(NativePointer, enable);
        }
        
        public Alternet.Drawing.SizeD FitColumns()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_FitColumns_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetCaptionBackgroundColor()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetCaptionBackgroundColor_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetCaptionForegroundColor()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetCaptionForegroundColor_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetCellBackgroundColor()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetCellBackgroundColor_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetCellDisabledTextColor()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetCellDisabledTextColor_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetCellTextColor()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetCellTextColor_(NativePointer);
        }
        
        public uint GetColumnCount()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetColumnCount_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetEmptySpaceColor()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetEmptySpaceColor_(NativePointer);
        }
        
        public int GetFontHeight()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetFontHeight_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetLineColor()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetLineColor_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetMarginColor()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetMarginColor_(NativePointer);
        }
        
        public int GetMarginWidth()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetMarginWidth_(NativePointer);
        }
        
        public int GetRowHeight()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetRowHeight_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetSelectionBackgroundColor()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetSelectionBackgroundColor_(NativePointer);
        }
        
        public Alternet.Drawing.Color GetSelectionForegroundColor()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetSelectionForegroundColor_(NativePointer);
        }
        
        public int GetSplitterPosition(uint splitterIndex)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetSplitterPosition_(NativePointer, splitterIndex);
        }
        
        public int GetVerticalSpacing()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetVerticalSpacing_(NativePointer);
        }
        
        public bool IsEditorFocused()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_IsEditorFocused_(NativePointer);
        }
        
        public bool IsEditorsValueModified()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_IsEditorsValueModified_(NativePointer);
        }
        
        public bool IsAnyModified()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_IsAnyModified_(NativePointer);
        }
        
        public void ResetColors()
        {
            CheckDisposed();
            NativeApi.PropertyGrid_ResetColors_(NativePointer);
        }
        
        public void ResetColumnSizes(bool enableAutoResizing)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_ResetColumnSizes_(NativePointer, enableAutoResizing);
        }
        
        public void MakeColumnEditable(uint column, bool editable)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_MakeColumnEditable_(NativePointer, column, editable);
        }
        
        public void BeginLabelEdit(uint column)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_BeginLabelEdit_(NativePointer, column);
        }
        
        public void EndLabelEdit(bool commit)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_EndLabelEdit_(NativePointer, commit);
        }
        
        public void SetCaptionBackgroundColor(Alternet.Drawing.Color col)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetCaptionBackgroundColor_(NativePointer, col);
        }
        
        public void SetCaptionTextColor(Alternet.Drawing.Color col)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetCaptionTextColor_(NativePointer, col);
        }
        
        public void SetCellBackgroundColor(Alternet.Drawing.Color col)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetCellBackgroundColor_(NativePointer, col);
        }
        
        public void SetCellDisabledTextColor(Alternet.Drawing.Color col)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetCellDisabledTextColor_(NativePointer, col);
        }
        
        public void SetCellTextColor(Alternet.Drawing.Color col)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetCellTextColor_(NativePointer, col);
        }
        
        public void SetColumnCount(int colCount)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetColumnCount_(NativePointer, colCount);
        }
        
        public void SetEmptySpaceColor(Alternet.Drawing.Color col)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetEmptySpaceColor_(NativePointer, col);
        }
        
        public void SetLineColor(Alternet.Drawing.Color col)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetLineColor_(NativePointer, col);
        }
        
        public void SetMarginColor(Alternet.Drawing.Color col)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetMarginColor_(NativePointer, col);
        }
        
        public void SetSelectionBackgroundColor(Alternet.Drawing.Color col)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetSelectionBackgroundColor_(NativePointer, col);
        }
        
        public void SetSelectionTextColor(Alternet.Drawing.Color col)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetSelectionTextColor_(NativePointer, col);
        }
        
        public void SetSplitterPosition(int newXPos, int col)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetSplitterPosition_(NativePointer, newXPos, col);
        }
        
        public string GetUnspecifiedValueText(int argFlags)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetUnspecifiedValueText_(NativePointer, argFlags);
        }
        
        public void SetVirtualWidth(int width)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetVirtualWidth_(NativePointer, width);
        }
        
        public void SetSplitterLeft(bool privateChildrenToo)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetSplitterLeft_(NativePointer, privateChildrenToo);
        }
        
        public void SetVerticalSpacing(int vspacing)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetVerticalSpacing_(NativePointer, vspacing);
        }
        
        public bool HasVirtualWidth()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_HasVirtualWidth_(NativePointer);
        }
        
        public uint GetCommonValueCount()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetCommonValueCount_(NativePointer);
        }
        
        public string GetCommonValueLabel(uint i)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetCommonValueLabel_(NativePointer, i);
        }
        
        public int GetUnspecifiedCommonValue()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetUnspecifiedCommonValue_(NativePointer);
        }
        
        public void SetUnspecifiedCommonValue(int index)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetUnspecifiedCommonValue_(NativePointer, index);
        }
        
        public static bool IsSmallScreen()
        {
            return NativeApi.PropertyGrid_IsSmallScreen_();
        }
        
        public void RefreshEditor()
        {
            CheckDisposed();
            NativeApi.PropertyGrid_RefreshEditor_(NativePointer);
        }
        
        public bool WasValueChangedInEvent()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_WasValueChangedInEvent_(NativePointer);
        }
        
        public int GetSpacingY()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetSpacingY_(NativePointer);
        }
        
        public void SetupTextCtrlValue(string text)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetupTextCtrlValue_(NativePointer, text);
        }
        
        public bool UnfocusEditor()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_UnfocusEditor_(NativePointer);
        }
        
        public System.IntPtr GetLastItem(int flags)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetLastItem_(NativePointer, flags);
        }
        
        public System.IntPtr GetRoot()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetRoot_(NativePointer);
        }
        
        public System.IntPtr GetSelectedProperty()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetSelectedProperty_(NativePointer);
        }
        
        public bool EnsureVisible(System.IntPtr propArg)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_EnsureVisible_(NativePointer, propArg);
        }
        
        public bool SelectProperty(System.IntPtr propArg, bool focus)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_SelectProperty_(NativePointer, propArg, focus);
        }
        
        public bool AddToSelection(System.IntPtr propArg)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_AddToSelection_(NativePointer, propArg);
        }
        
        public bool RemoveFromSelection(System.IntPtr propArg)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_RemoveFromSelection_(NativePointer, propArg);
        }
        
        public void SetCurrentCategory(System.IntPtr propArg)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetCurrentCategory_(NativePointer, propArg);
        }
        
        public Alternet.Drawing.RectI GetImageRect(System.IntPtr p, int item)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetImageRect_(NativePointer, p, item);
        }
        
        public Alternet.Drawing.SizeI GetImageSize(System.IntPtr p, int item)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetImageSize_(NativePointer, p, item);
        }
        
        public System.IntPtr CreateStringProperty(string label, string name, string value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateStringProperty_(NativePointer, label, name, value);
        }
        
        public System.IntPtr CreateFilenameProperty(string label, string name, string value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateFilenameProperty_(NativePointer, label, name, value);
        }
        
        public System.IntPtr CreateDirProperty(string label, string name, string value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateDirProperty_(NativePointer, label, name, value);
        }
        
        public System.IntPtr CreateImageFilenameProperty(string label, string name, string value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateImageFilenameProperty_(NativePointer, label, name, value);
        }
        
        public System.IntPtr CreateSystemColorProperty(string label, string name, Alternet.Drawing.Color value, uint kind)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateSystemColorProperty_(NativePointer, label, name, value, kind);
        }
        
        public System.IntPtr CreateCursorProperty(string label, string name, int value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateCursorProperty_(NativePointer, label, name, value);
        }
        
        public System.IntPtr CreateBoolProperty(string label, string name, bool value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateBoolProperty_(NativePointer, label, name, value);
        }
        
        public System.IntPtr CreateIntProperty(string label, string name, long value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateIntProperty_(NativePointer, label, name, value);
        }
        
        public System.IntPtr CreateFloatProperty(string label, string name, double value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateFloatProperty_(NativePointer, label, name, value);
        }
        
        public System.IntPtr CreateUIntProperty(string label, string name, ulong value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateUIntProperty_(NativePointer, label, name, value);
        }
        
        public System.IntPtr CreateLongStringProperty(string label, string name, string value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateLongStringProperty_(NativePointer, label, name, value);
        }
        
        public System.IntPtr CreateDateProperty(string label, string name, DateTime value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateDateProperty_(NativePointer, label, name, value);
        }
        
        public void Clear()
        {
            CheckDisposed();
            NativeApi.PropertyGrid_Clear_(NativePointer);
        }
        
        public System.IntPtr Append(System.IntPtr property)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_Append_(NativePointer, property);
        }
        
        public System.IntPtr CreateEditEnumProperty(string label, string name, System.IntPtr choices, string value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateEditEnumProperty_(NativePointer, label, name, choices, value);
        }
        
        public System.IntPtr CreateEnumProperty(string label, string name, System.IntPtr choices, int value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateEnumProperty_(NativePointer, label, name, choices, value);
        }
        
        public System.IntPtr CreateFlagsProperty(string label, string name, System.IntPtr choices, int value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateFlagsProperty_(NativePointer, label, name, choices, value);
        }
        
        public bool ClearSelection(bool validation)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_ClearSelection_(NativePointer, validation);
        }
        
        public void ClearModifiedStatus()
        {
            CheckDisposed();
            NativeApi.PropertyGrid_ClearModifiedStatus_(NativePointer);
        }
        
        public bool CollapseAll()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CollapseAll_(NativePointer);
        }
        
        public bool EditorValidate()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_EditorValidate_(NativePointer);
        }
        
        public bool ExpandAll(bool expand)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_ExpandAll_(NativePointer, expand);
        }
        
        public System.IntPtr CreatePropCategory(string label, string name)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreatePropCategory_(NativePointer, label, name);
        }
        
        public System.IntPtr GetFirst(int flags)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetFirst_(NativePointer, flags);
        }
        
        public System.IntPtr GetProperty(string name)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetProperty_(NativePointer, name);
        }
        
        public System.IntPtr GetPropertyByLabel(string label)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyByLabel_(NativePointer, label);
        }
        
        public System.IntPtr GetPropertyByName(string name)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyByName_(NativePointer, name);
        }
        
        public System.IntPtr GetPropertyByNameAndSubName(string name, string subname)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyByNameAndSubName_(NativePointer, name, subname);
        }
        
        public System.IntPtr GetSelection()
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetSelection_(NativePointer);
        }
        
        public string GetPropertyName(System.IntPtr property)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyName_(NativePointer, property);
        }
        
        public static void InitAllTypeHandlers()
        {
            NativeApi.PropertyGrid_InitAllTypeHandlers_();
        }
        
        public static void RegisterAdditionalEditors()
        {
            NativeApi.PropertyGrid_RegisterAdditionalEditors_();
        }
        
        public bool RestoreEditableState(string src, int restoreStates)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_RestoreEditableState_(NativePointer, src, restoreStates);
        }
        
        public string SaveEditableState(int includedStates)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_SaveEditableState_(NativePointer, includedStates);
        }
        
        public static void SetBoolChoices(string trueChoice, string falseChoice)
        {
            NativeApi.PropertyGrid_SetBoolChoices_(trueChoice, falseChoice);
        }
        
        public bool SetColumnProportion(uint column, int proportion)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_SetColumnProportion_(NativePointer, column, proportion);
        }
        
        public int GetColumnProportion(uint column)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetColumnProportion_(NativePointer, column);
        }
        
        public void Sort(int flags)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_Sort_(NativePointer, flags);
        }
        
        public void RefreshProperty(System.IntPtr p)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_RefreshProperty_(NativePointer, p);
        }
        
        public System.IntPtr CreateColorProperty(string label, string name, Alternet.Drawing.Color value)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_CreateColorProperty_(NativePointer, label, name, value);
        }
        
        public void SetPropertyReadOnly(System.IntPtr id, bool set, int flags)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyReadOnly_(NativePointer, id, set, flags);
        }
        
        public void SetPropertyValueUnspecified(System.IntPtr id)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyValueUnspecified_(NativePointer, id);
        }
        
        public System.IntPtr AppendIn(System.IntPtr id, System.IntPtr newproperty)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_AppendIn_(NativePointer, id, newproperty);
        }
        
        public void BeginAddChildren(System.IntPtr id)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_BeginAddChildren_(NativePointer, id);
        }
        
        public bool Collapse(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_Collapse_(NativePointer, id);
        }
        
        public void DeleteProperty(System.IntPtr id)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_DeleteProperty_(NativePointer, id);
        }
        
        public System.IntPtr RemoveProperty(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_RemoveProperty_(NativePointer, id);
        }
        
        public bool DisableProperty(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_DisableProperty_(NativePointer, id);
        }
        
        public bool EnableProperty(System.IntPtr id, bool enable)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_EnableProperty_(NativePointer, id, enable);
        }
        
        public void EndAddChildren(System.IntPtr id)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_EndAddChildren_(NativePointer, id);
        }
        
        public bool Expand(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_Expand_(NativePointer, id);
        }
        
        public System.IntPtr GetFirstChild(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetFirstChild_(NativePointer, id);
        }
        
        public System.IntPtr GetPropertyCategory(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyCategory_(NativePointer, id);
        }
        
        public System.IntPtr GetPropertyClientData(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyClientData_(NativePointer, id);
        }
        
        public string GetPropertyHelpString(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyHelpString_(NativePointer, id);
        }
        
        public System.IntPtr GetPropertyImage(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyImage_(NativePointer, id);
        }
        
        public string GetPropertyLabel(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyLabel_(NativePointer, id);
        }
        
        public System.IntPtr GetPropertyParent(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyParent_(NativePointer, id);
        }
        
        public System.IntPtr GetPropertyValueAsVariant(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyValueAsVariant_(NativePointer, id);
        }
        
        public string GetPropertyValueAsString(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyValueAsString_(NativePointer, id);
        }
        
        public long GetPropertyValueAsLong(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyValueAsLong_(NativePointer, id);
        }
        
        public ulong GetPropertyValueAsULong(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyValueAsULong_(NativePointer, id);
        }
        
        public int GetPropertyValueAsInt(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyValueAsInt_(NativePointer, id);
        }
        
        public bool GetPropertyValueAsBool(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyValueAsBool_(NativePointer, id);
        }
        
        public double GetPropertyValueAsDouble(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyValueAsDouble_(NativePointer, id);
        }
        
        public DateTime GetPropertyValueAsDateTime(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyValueAsDateTime_(NativePointer, id);
        }
        
        public bool HideProperty(System.IntPtr id, bool hide, int flags)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_HideProperty_(NativePointer, id, hide, flags);
        }
        
        public System.IntPtr Insert(System.IntPtr priorThis, System.IntPtr newproperty)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_Insert_(NativePointer, priorThis, newproperty);
        }
        
        public System.IntPtr InsertByIndex(System.IntPtr parent, int index, System.IntPtr newproperty)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_InsertByIndex_(NativePointer, parent, index, newproperty);
        }
        
        public bool IsPropertyCategory(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_IsPropertyCategory_(NativePointer, id);
        }
        
        public bool IsPropertyEnabled(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_IsPropertyEnabled_(NativePointer, id);
        }
        
        public bool IsPropertyExpanded(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_IsPropertyExpanded_(NativePointer, id);
        }
        
        public bool IsPropertyModified(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_IsPropertyModified_(NativePointer, id);
        }
        
        public bool IsPropertySelected(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_IsPropertySelected_(NativePointer, id);
        }
        
        public bool IsPropertyShown(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_IsPropertyShown_(NativePointer, id);
        }
        
        public bool IsPropertyValueUnspecified(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_IsPropertyValueUnspecified_(NativePointer, id);
        }
        
        public void LimitPropertyEditing(System.IntPtr id, bool limit)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_LimitPropertyEditing_(NativePointer, id, limit);
        }
        
        public System.IntPtr ReplaceProperty(System.IntPtr id, System.IntPtr property)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_ReplaceProperty_(NativePointer, id, property);
        }
        
        public void SetPropertyBackgroundColor(System.IntPtr id, Alternet.Drawing.Color color, int flags)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyBackgroundColor_(NativePointer, id, color, flags);
        }
        
        public void SetPropertyColorsToDefault(System.IntPtr id, int flags)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyColorsToDefault_(NativePointer, id, flags);
        }
        
        public void SetPropertyTextColor(System.IntPtr id, Alternet.Drawing.Color col, int flags)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyTextColor_(NativePointer, id, col, flags);
        }
        
        public Alternet.Drawing.Color GetPropertyBackgroundColor(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyBackgroundColor_(NativePointer, id);
        }
        
        public Alternet.Drawing.Color GetPropertyTextColor(System.IntPtr id)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_GetPropertyTextColor_(NativePointer, id);
        }
        
        public void SetPropertyClientData(System.IntPtr id, System.IntPtr clientData)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyClientData_(NativePointer, id, clientData);
        }
        
        public void SetPropertyEditor(System.IntPtr id, System.IntPtr editor)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyEditor_(NativePointer, id, editor);
        }
        
        public void SetPropertyEditorByName(System.IntPtr id, string editorName)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyEditorByName_(NativePointer, id, editorName);
        }
        
        public void SetPropertyLabel(System.IntPtr id, string newproplabel)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyLabel_(NativePointer, id, newproplabel);
        }
        
        public void SetPropertyName(System.IntPtr id, string newName)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyName_(NativePointer, id, newName);
        }
        
        public void SetPropertyHelpString(System.IntPtr id, string helpString)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyHelpString_(NativePointer, id, helpString);
        }
        
        public bool SetPropertyMaxLength(System.IntPtr id, int maxLen)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_SetPropertyMaxLength_(NativePointer, id, maxLen);
        }
        
        public void SetPropertyValueAsLong(System.IntPtr id, long value)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyValueAsLong_(NativePointer, id, value);
        }
        
        public void SetPropertyValueAsInt(System.IntPtr id, int value)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyValueAsInt_(NativePointer, id, value);
        }
        
        public void SetPropertyValueAsDouble(System.IntPtr id, double value)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyValueAsDouble_(NativePointer, id, value);
        }
        
        public void SetPropertyValueAsBool(System.IntPtr id, bool value)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyValueAsBool_(NativePointer, id, value);
        }
        
        public void SetPropertyValueAsStr(System.IntPtr id, string value)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyValueAsStr_(NativePointer, id, value);
        }
        
        public void SetPropertyValueAsVariant(System.IntPtr id, System.IntPtr variant)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyValueAsVariant_(NativePointer, id, variant);
        }
        
        public void SetPropertyValueAsDateTime(System.IntPtr id, DateTime value)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyValueAsDateTime_(NativePointer, id, value);
        }
        
        public void SetValidationFailureBehavior(int vfbFlags)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetValidationFailureBehavior_(NativePointer, vfbFlags);
        }
        
        public void SortChildren(System.IntPtr id, int flags)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SortChildren_(NativePointer, id, flags);
        }
        
        public static System.IntPtr GetEditorByName(string editorName)
        {
            return NativeApi.PropertyGrid_GetEditorByName_(editorName);
        }
        
        public bool ChangePropertyValue(System.IntPtr id, System.IntPtr variant)
        {
            CheckDisposed();
            return NativeApi.PropertyGrid_ChangePropertyValue_(NativePointer, id, variant);
        }
        
        public void SetPropertyImage(System.IntPtr id, ImageSet? bmp)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyImage_(NativePointer, id, bmp?.NativePointer ?? IntPtr.Zero);
        }
        
        public void SetPropertyAttribute(System.IntPtr id, string attrName, System.IntPtr variant, long argFlags)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyAttribute_(NativePointer, id, attrName, variant, argFlags);
        }
        
        public void SetPropertyAttributeAll(string attrName, System.IntPtr variant)
        {
            CheckDisposed();
            NativeApi.PropertyGrid_SetPropertyAttributeAll_(NativePointer, attrName, variant);
        }
        
        static GCHandle eventCallbackGCHandle;
        public static PropertyGrid? GlobalObject;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.PropertyGridEventCallbackType((obj, e, parameter) =>
                    UI.Application.HandleThreadExceptions(() =>
                    {
                        var w = NativeObject.GetFromNativePointer<PropertyGrid>(obj, p => new PropertyGrid(p));
                        w ??= GlobalObject;
                        if (w == null) return IntPtr.Zero;
                        return w.OnEvent(e, parameter);
                    }
                    )
                );
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.PropertyGrid_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.PropertyGridEvent e, IntPtr parameter)
        {
            switch (e)
            {
                case NativeApi.PropertyGridEvent.Selected:
                {
                    OnPlatformEventSelected(); return IntPtr.Zero;
                }
                case NativeApi.PropertyGridEvent.Changed:
                {
                    OnPlatformEventChanged(); return IntPtr.Zero;
                }
                case NativeApi.PropertyGridEvent.Changing:
                {
                    {
                        var cea = new CancelEventArgs();
                        OnPlatformEventChanging(cea);
                        return cea.Cancel ? IntPtrUtils.One : IntPtr.Zero;
                    }
                }
                case NativeApi.PropertyGridEvent.Highlighted:
                {
                    OnPlatformEventHighlighted(); return IntPtr.Zero;
                }
                case NativeApi.PropertyGridEvent.ButtonClick:
                {
                    OnPlatformEventButtonClick(); return IntPtr.Zero;
                }
                case NativeApi.PropertyGridEvent.RightClick:
                {
                    OnPlatformEventRightClick(); return IntPtr.Zero;
                }
                case NativeApi.PropertyGridEvent.DoubleClick:
                {
                    OnPlatformEventDoubleClick(); return IntPtr.Zero;
                }
                case NativeApi.PropertyGridEvent.ItemCollapsed:
                {
                    OnPlatformEventItemCollapsed(); return IntPtr.Zero;
                }
                case NativeApi.PropertyGridEvent.ItemExpanded:
                {
                    OnPlatformEventItemExpanded(); return IntPtr.Zero;
                }
                case NativeApi.PropertyGridEvent.LabelEditBegin:
                {
                    {
                        var cea = new CancelEventArgs();
                        OnPlatformEventLabelEditBegin(cea);
                        return cea.Cancel ? IntPtrUtils.One : IntPtr.Zero;
                    }
                }
                case NativeApi.PropertyGridEvent.LabelEditEnding:
                {
                    {
                        var cea = new CancelEventArgs();
                        OnPlatformEventLabelEditEnding(cea);
                        return cea.Cancel ? IntPtrUtils.One : IntPtr.Zero;
                    }
                }
                case NativeApi.PropertyGridEvent.ColBeginDrag:
                {
                    {
                        var cea = new CancelEventArgs();
                        OnPlatformEventColBeginDrag(cea);
                        return cea.Cancel ? IntPtrUtils.One : IntPtr.Zero;
                    }
                }
                case NativeApi.PropertyGridEvent.ColDragging:
                {
                    OnPlatformEventColDragging(); return IntPtr.Zero;
                }
                case NativeApi.PropertyGridEvent.ColEndDrag:
                {
                    OnPlatformEventColEndDrag(); return IntPtr.Zero;
                }
                default: throw new Exception("Unexpected PropertyGridEvent value: " + e);
            }
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr PropertyGridEventCallbackType(IntPtr obj, PropertyGridEvent e, IntPtr param);
            
            public enum PropertyGridEvent
            {
                Selected,
                Changed,
                Changing,
                Highlighted,
                ButtonClick,
                RightClick,
                DoubleClick,
                ItemCollapsed,
                ItemExpanded,
                LabelEditBegin,
                LabelEditEnding,
                ColBeginDrag,
                ColDragging,
                ColEndDrag,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetEventCallback_(PropertyGridEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr PropertyGrid_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGrid_GetEventValidationFailureBehavior_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetEventValidationFailureBehavior_(IntPtr obj, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetEventPropValue_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGrid_GetEventColumn_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetEventProperty_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PropertyGrid_GetEventPropertyName_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PropertyGrid_GetEventValidationFailureMessage_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetEventValidationFailureMessage_(IntPtr obj, string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PropertyGrid_GetNameAsLabel_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_GetHasBorder_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetHasBorder_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern long PropertyGrid_GetCreateStyle_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetCreateStyle_(IntPtr obj, long value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern long PropertyGrid_GetCreateStyleEx_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetCreateStyleEx_(IntPtr obj, long value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.PointI PropertyGrid_CalcScrolledPosition_(IntPtr obj, Alternet.Drawing.PointI point);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.PointI PropertyGrid_CalcUnscrolledPosition_(IntPtr obj, Alternet.Drawing.PointI point);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGrid_GetHitTestColumn_(IntPtr obj, Alternet.Drawing.PointI point);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetHitTestProp_(IntPtr obj, Alternet.Drawing.PointI point);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_ColorDatabaseCreate_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_ColorDatabaseDelete_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_ColorDatabaseSetGlobal_(System.IntPtr handle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_ColorDatabaseAdd_(System.IntPtr handle, string name, NativeApiTypes.Color color);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_ColorDatabaseFind_(System.IntPtr handle, string name);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PropertyGrid_ColorDatabaseFindName_(System.IntPtr handle, NativeApiTypes.Color color);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_KnownColorsClear_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_KnownColorsAdd_(string name, string title, NativeApiTypes.Color value, int knownColor);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_KnownColorsApply_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_KnownColorsSetCustomColorTitle_(string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetPropertyValidator_(IntPtr obj, System.IntPtr prop);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyValidator_(IntPtr obj, System.IntPtr prop, System.IntPtr validator);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyFlag_(IntPtr obj, System.IntPtr prop, int flag, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateEx_(long styles);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_AddActionTrigger_(IntPtr obj, int action, int keycode, int modifiers);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_DedicateKey_(IntPtr obj, int keycode);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_AutoGetTranslation_(bool enable);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_CenterSplitter_(IntPtr obj, bool enableAutoResizing);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_ClearActionTriggers_(IntPtr obj, int action);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_CommitChangesFromEditor_(IntPtr obj, uint flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_EditorsValueWasModified_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_EditorsValueWasNotModified_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_EnableCategories_(IntPtr obj, bool enable);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeD PropertyGrid_FitColumns_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_GetCaptionBackgroundColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_GetCaptionForegroundColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_GetCellBackgroundColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_GetCellDisabledTextColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_GetCellTextColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern uint PropertyGrid_GetColumnCount_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_GetEmptySpaceColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGrid_GetFontHeight_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_GetLineColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_GetMarginColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGrid_GetMarginWidth_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGrid_GetRowHeight_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_GetSelectionBackgroundColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_GetSelectionForegroundColor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGrid_GetSplitterPosition_(IntPtr obj, uint splitterIndex);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGrid_GetVerticalSpacing_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_IsEditorFocused_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_IsEditorsValueModified_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_IsAnyModified_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_ResetColors_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_ResetColumnSizes_(IntPtr obj, bool enableAutoResizing);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_MakeColumnEditable_(IntPtr obj, uint column, bool editable);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_BeginLabelEdit_(IntPtr obj, uint column);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_EndLabelEdit_(IntPtr obj, bool commit);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetCaptionBackgroundColor_(IntPtr obj, NativeApiTypes.Color col);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetCaptionTextColor_(IntPtr obj, NativeApiTypes.Color col);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetCellBackgroundColor_(IntPtr obj, NativeApiTypes.Color col);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetCellDisabledTextColor_(IntPtr obj, NativeApiTypes.Color col);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetCellTextColor_(IntPtr obj, NativeApiTypes.Color col);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetColumnCount_(IntPtr obj, int colCount);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetEmptySpaceColor_(IntPtr obj, NativeApiTypes.Color col);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetLineColor_(IntPtr obj, NativeApiTypes.Color col);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetMarginColor_(IntPtr obj, NativeApiTypes.Color col);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetSelectionBackgroundColor_(IntPtr obj, NativeApiTypes.Color col);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetSelectionTextColor_(IntPtr obj, NativeApiTypes.Color col);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetSplitterPosition_(IntPtr obj, int newXPos, int col);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PropertyGrid_GetUnspecifiedValueText_(IntPtr obj, int argFlags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetVirtualWidth_(IntPtr obj, int width);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetSplitterLeft_(IntPtr obj, bool privateChildrenToo);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetVerticalSpacing_(IntPtr obj, int vspacing);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_HasVirtualWidth_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern uint PropertyGrid_GetCommonValueCount_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PropertyGrid_GetCommonValueLabel_(IntPtr obj, uint i);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGrid_GetUnspecifiedCommonValue_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetUnspecifiedCommonValue_(IntPtr obj, int index);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_IsSmallScreen_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_RefreshEditor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_WasValueChangedInEvent_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGrid_GetSpacingY_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetupTextCtrlValue_(IntPtr obj, string text);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_UnfocusEditor_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetLastItem_(IntPtr obj, int flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetRoot_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetSelectedProperty_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_EnsureVisible_(IntPtr obj, System.IntPtr propArg);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_SelectProperty_(IntPtr obj, System.IntPtr propArg, bool focus);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_AddToSelection_(IntPtr obj, System.IntPtr propArg);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_RemoveFromSelection_(IntPtr obj, System.IntPtr propArg);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetCurrentCategory_(IntPtr obj, System.IntPtr propArg);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.RectI PropertyGrid_GetImageRect_(IntPtr obj, System.IntPtr p, int item);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.SizeI PropertyGrid_GetImageSize_(IntPtr obj, System.IntPtr p, int item);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateStringProperty_(IntPtr obj, string label, string name, string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateFilenameProperty_(IntPtr obj, string label, string name, string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateDirProperty_(IntPtr obj, string label, string name, string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateImageFilenameProperty_(IntPtr obj, string label, string name, string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateSystemColorProperty_(IntPtr obj, string label, string name, NativeApiTypes.Color value, uint kind);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateCursorProperty_(IntPtr obj, string label, string name, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateBoolProperty_(IntPtr obj, string label, string name, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateIntProperty_(IntPtr obj, string label, string name, long value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateFloatProperty_(IntPtr obj, string label, string name, double value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateUIntProperty_(IntPtr obj, string label, string name, ulong value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateLongStringProperty_(IntPtr obj, string label, string name, string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateDateProperty_(IntPtr obj, string label, string name, NativeApiTypes.DateTime value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_Clear_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_Append_(IntPtr obj, System.IntPtr property);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateEditEnumProperty_(IntPtr obj, string label, string name, System.IntPtr choices, string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateEnumProperty_(IntPtr obj, string label, string name, System.IntPtr choices, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateFlagsProperty_(IntPtr obj, string label, string name, System.IntPtr choices, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_ClearSelection_(IntPtr obj, bool validation);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_ClearModifiedStatus_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_CollapseAll_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_EditorValidate_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_ExpandAll_(IntPtr obj, bool expand);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreatePropCategory_(IntPtr obj, string label, string name);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetFirst_(IntPtr obj, int flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetProperty_(IntPtr obj, string name);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetPropertyByLabel_(IntPtr obj, string label);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetPropertyByName_(IntPtr obj, string name);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetPropertyByNameAndSubName_(IntPtr obj, string name, string subname);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetSelection_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PropertyGrid_GetPropertyName_(IntPtr obj, System.IntPtr property);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_InitAllTypeHandlers_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_RegisterAdditionalEditors_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_RestoreEditableState_(IntPtr obj, string src, int restoreStates);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PropertyGrid_SaveEditableState_(IntPtr obj, int includedStates);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetBoolChoices_(string trueChoice, string falseChoice);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_SetColumnProportion_(IntPtr obj, uint column, int proportion);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGrid_GetColumnProportion_(IntPtr obj, uint column);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_Sort_(IntPtr obj, int flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_RefreshProperty_(IntPtr obj, System.IntPtr p);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_CreateColorProperty_(IntPtr obj, string label, string name, NativeApiTypes.Color value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyReadOnly_(IntPtr obj, System.IntPtr id, bool set, int flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyValueUnspecified_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_AppendIn_(IntPtr obj, System.IntPtr id, System.IntPtr newproperty);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_BeginAddChildren_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_Collapse_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_DeleteProperty_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_RemoveProperty_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_DisableProperty_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_EnableProperty_(IntPtr obj, System.IntPtr id, bool enable);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_EndAddChildren_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_Expand_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetFirstChild_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetPropertyCategory_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetPropertyClientData_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PropertyGrid_GetPropertyHelpString_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetPropertyImage_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PropertyGrid_GetPropertyLabel_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetPropertyParent_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetPropertyValueAsVariant_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PropertyGrid_GetPropertyValueAsString_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern long PropertyGrid_GetPropertyValueAsLong_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern ulong PropertyGrid_GetPropertyValueAsULong_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PropertyGrid_GetPropertyValueAsInt_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_GetPropertyValueAsBool_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern double PropertyGrid_GetPropertyValueAsDouble_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.DateTime PropertyGrid_GetPropertyValueAsDateTime_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_HideProperty_(IntPtr obj, System.IntPtr id, bool hide, int flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_Insert_(IntPtr obj, System.IntPtr priorThis, System.IntPtr newproperty);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_InsertByIndex_(IntPtr obj, System.IntPtr parent, int index, System.IntPtr newproperty);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_IsPropertyCategory_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_IsPropertyEnabled_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_IsPropertyExpanded_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_IsPropertyModified_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_IsPropertySelected_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_IsPropertyShown_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_IsPropertyValueUnspecified_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_LimitPropertyEditing_(IntPtr obj, System.IntPtr id, bool limit);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_ReplaceProperty_(IntPtr obj, System.IntPtr id, System.IntPtr property);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyBackgroundColor_(IntPtr obj, System.IntPtr id, NativeApiTypes.Color color, int flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyColorsToDefault_(IntPtr obj, System.IntPtr id, int flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyTextColor_(IntPtr obj, System.IntPtr id, NativeApiTypes.Color col, int flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_GetPropertyBackgroundColor_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color PropertyGrid_GetPropertyTextColor_(IntPtr obj, System.IntPtr id);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyClientData_(IntPtr obj, System.IntPtr id, System.IntPtr clientData);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyEditor_(IntPtr obj, System.IntPtr id, System.IntPtr editor);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyEditorByName_(IntPtr obj, System.IntPtr id, string editorName);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyLabel_(IntPtr obj, System.IntPtr id, string newproplabel);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyName_(IntPtr obj, System.IntPtr id, string newName);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyHelpString_(IntPtr obj, System.IntPtr id, string helpString);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_SetPropertyMaxLength_(IntPtr obj, System.IntPtr id, int maxLen);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyValueAsLong_(IntPtr obj, System.IntPtr id, long value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyValueAsInt_(IntPtr obj, System.IntPtr id, int value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyValueAsDouble_(IntPtr obj, System.IntPtr id, double value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyValueAsBool_(IntPtr obj, System.IntPtr id, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyValueAsStr_(IntPtr obj, System.IntPtr id, string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyValueAsVariant_(IntPtr obj, System.IntPtr id, System.IntPtr variant);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyValueAsDateTime_(IntPtr obj, System.IntPtr id, NativeApiTypes.DateTime value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetValidationFailureBehavior_(IntPtr obj, int vfbFlags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SortChildren_(IntPtr obj, System.IntPtr id, int flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr PropertyGrid_GetEditorByName_(string editorName);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PropertyGrid_ChangePropertyValue_(IntPtr obj, System.IntPtr id, System.IntPtr variant);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyImage_(IntPtr obj, System.IntPtr id, IntPtr bmp);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyAttribute_(IntPtr obj, System.IntPtr id, string attrName, System.IntPtr variant, long argFlags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PropertyGrid_SetPropertyAttributeAll_(IntPtr obj, string attrName, System.IntPtr variant);
            
        }
    }
}
