// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class PrintDocument : NativeObject
    {
        static PrintDocument()
        {
            SetEventCallback();
        }
        
        public PrintDocument()
        {
            SetNativePointer(NativeApi.PrintDocument_Create_());
        }
        
        public PrintDocument(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public bool OriginAtMargins
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrintDocument_GetOriginAtMargins_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrintDocument_SetOriginAtMargins_(NativePointer, value);
            }
        }
        
        public string DocumentName
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrintDocument_GetDocumentName_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrintDocument_SetDocumentName_(NativePointer, value);
            }
        }
        
        public PrinterSettings PrinterSettings
        {
            get
            {
                CheckDisposed();
                var _nnn = NativeApi.PrintDocument_GetPrinterSettings_(NativePointer);
                var _mmm = NativeObject.GetFromNativePointer<PrinterSettings>(_nnn, p => new PrinterSettings(p))!;
                ReleaseNativeObjectPointer(_nnn);
                return _mmm;
            }
            
        }
        
        public PageSettings PageSettings
        {
            get
            {
                CheckDisposed();
                var _nnn = NativeApi.PrintDocument_GetPageSettings_(NativePointer);
                var _mmm = NativeObject.GetFromNativePointer<PageSettings>(_nnn, p => new PageSettings(p))!;
                ReleaseNativeObjectPointer(_nnn);
                return _mmm;
            }
            
        }
        
        public DrawingContext PrintPage_DrawingContext
        {
            get
            {
                CheckDisposed();
                var _nnn = NativeApi.PrintDocument_GetPrintPage_DrawingContext_(NativePointer);
                var _mmm = NativeObject.GetFromNativePointer<DrawingContext>(_nnn, p => new DrawingContext(p))!;
                ReleaseNativeObjectPointer(_nnn);
                return _mmm;
            }
            
        }
        
        public bool PrintPage_HasMorePages
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrintDocument_GetPrintPage_HasMorePages_(NativePointer);
            }
            
            set
            {
                CheckDisposed();
                NativeApi.PrintDocument_SetPrintPage_HasMorePages_(NativePointer, value);
            }
        }
        
        public Alternet.Drawing.RectD PrintPage_MarginBounds
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrintDocument_GetPrintPage_MarginBounds_(NativePointer);
            }
            
        }
        
        public Alternet.Drawing.RectD PrintPage_PhysicalPageBounds
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrintDocument_GetPrintPage_PhysicalPageBounds_(NativePointer);
            }
            
        }
        
        public Alternet.Drawing.RectD PrintPage_PageBounds
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrintDocument_GetPrintPage_PageBounds_(NativePointer);
            }
            
        }
        
        public Alternet.Drawing.RectD PrintPage_PrintablePageBounds
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrintDocument_GetPrintPage_PrintablePageBounds_(NativePointer);
            }
            
        }
        
        public int PrintPage_PageNumber
        {
            get
            {
                CheckDisposed();
                return NativeApi.PrintDocument_GetPrintPage_PageNumber_(NativePointer);
            }
            
        }
        
        public void Print()
        {
            CheckDisposed();
            NativeApi.PrintDocument_Print_(NativePointer);
        }
        
        static GCHandle eventCallbackGCHandle;
        public static PrintDocument? GlobalObject;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.PrintDocumentEventCallbackType((obj, e, parameter) =>
                    UI.Application.HandleThreadExceptions(() =>
                    {
                        var w = NativeObject.GetFromNativePointer<PrintDocument>(obj, p => new PrintDocument(p));
                        w ??= GlobalObject;
                        if (w == null) return IntPtr.Zero;
                        return w.OnEvent(e, parameter);
                    }
                    )
                );
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.PrintDocument_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.PrintDocumentEvent e, IntPtr parameter)
        {
            switch (e)
            {
                case NativeApi.PrintDocumentEvent.PrintPage:
                {
                    {
                        if(PrintPage is not null)
                        {
                        var cea = new CancelEventArgs();
                        PrintPage.Invoke(this, cea);
                        return cea.Cancel ? IntPtrUtils.One : IntPtr.Zero;
                        }
                        else return IntPtr.Zero;
                    }
                }
                case NativeApi.PrintDocumentEvent.BeginPrint:
                {
                    {
                        if(BeginPrint is not null)
                        {
                        var cea = new CancelEventArgs();
                        BeginPrint.Invoke(this, cea);
                        return cea.Cancel ? IntPtrUtils.One : IntPtr.Zero;
                        }
                        else return IntPtr.Zero;
                    }
                }
                case NativeApi.PrintDocumentEvent.EndPrint:
                {
                    {
                        if(EndPrint is not null)
                        {
                        var cea = new CancelEventArgs();
                        EndPrint.Invoke(this, cea);
                        return cea.Cancel ? IntPtrUtils.One : IntPtr.Zero;
                        }
                        else return IntPtr.Zero;
                    }
                }
                default: throw new Exception("Unexpected PrintDocumentEvent value: " + e);
            }
        }
        
        public event EventHandler<CancelEventArgs>? PrintPage;
        public event EventHandler<CancelEventArgs>? BeginPrint;
        public event EventHandler<CancelEventArgs>? EndPrint;
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr PrintDocumentEventCallbackType(IntPtr obj, PrintDocumentEvent e, IntPtr param);
            
            public enum PrintDocumentEvent
            {
                PrintPage,
                BeginPrint,
                EndPrint,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrintDocument_SetEventCallback_(PrintDocumentEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr PrintDocument_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PrintDocument_GetOriginAtMargins_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrintDocument_SetOriginAtMargins_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string PrintDocument_GetDocumentName_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrintDocument_SetDocumentName_(IntPtr obj, string value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr PrintDocument_GetPrinterSettings_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr PrintDocument_GetPageSettings_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr PrintDocument_GetPrintPage_DrawingContext_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool PrintDocument_GetPrintPage_HasMorePages_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrintDocument_SetPrintPage_HasMorePages_(IntPtr obj, bool value);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.RectD PrintDocument_GetPrintPage_MarginBounds_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.RectD PrintDocument_GetPrintPage_PhysicalPageBounds_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.RectD PrintDocument_GetPrintPage_PageBounds_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern Alternet.Drawing.RectD PrintDocument_GetPrintPage_PrintablePageBounds_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int PrintDocument_GetPrintPage_PageNumber_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void PrintDocument_Print_(IntPtr obj);
            
        }
    }
}
