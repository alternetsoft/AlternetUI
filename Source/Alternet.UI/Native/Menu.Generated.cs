// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal partial class Menu : Control
    {
        static Menu()
        {
            SetEventCallback();
        }
        
        public Menu()
        {
            SetNativePointer(NativeApi.Menu_Create_());
        }
        
        public Menu(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public System.IntPtr MenuHandle
        {
            get
            {
                CheckDisposed();
                return NativeApi.Menu_GetMenuHandle_(NativePointer);
            }
            
        }
        
        public int ItemsCount
        {
            get
            {
                CheckDisposed();
                return NativeApi.Menu_GetItemsCount_(NativePointer);
            }
            
        }
        
        public void InsertItemAt(int index, MenuItem item)
        {
            CheckDisposed();
            NativeApi.Menu_InsertItemAt_(NativePointer, index, item.NativePointer);
        }
        
        public void RemoveItemAt(int index)
        {
            CheckDisposed();
            NativeApi.Menu_RemoveItemAt_(NativePointer, index);
        }
        
        public void ShowContextMenu(Control control, Alternet.Drawing.PointD position)
        {
            CheckDisposed();
            NativeApi.Menu_ShowContextMenu_(NativePointer, control.NativePointer, position);
        }
        
        static GCHandle eventCallbackGCHandle;
        public static Menu? GlobalObject;
        
        static void SetEventCallback()
        {
            if (!eventCallbackGCHandle.IsAllocated)
            {
                var sink = new NativeApi.MenuEventCallbackType((obj, e, parameter) =>
                    UI.Application.HandleThreadExceptions(() =>
                    {
                        var w = NativeObject.GetFromNativePointer<Menu>(obj, p => new Menu(p));
                        w ??= GlobalObject;
                        if (w == null) return IntPtr.Zero;
                        return w.OnEvent(e, parameter);
                    }
                    )
                );
                eventCallbackGCHandle = GCHandle.Alloc(sink);
                NativeApi.Menu_SetEventCallback_(sink);
            }
        }
        
        IntPtr OnEvent(NativeApi.MenuEvent e, IntPtr parameter)
        {
            switch (e)
            {
                case NativeApi.MenuEvent.Opened:
                {
                    OnPlatformEventOpened(); return IntPtr.Zero;
                }
                case NativeApi.MenuEvent.Closed:
                {
                    OnPlatformEventClosed(); return IntPtr.Zero;
                }
                default: throw new Exception("Unexpected MenuEvent value: " + e);
            }
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate IntPtr MenuEventCallbackType(IntPtr obj, MenuEvent e, IntPtr param);
            
            public enum MenuEvent
            {
                Opened,
                Closed,
            }
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Menu_SetEventCallback_(MenuEventCallbackType callback);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr Menu_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr Menu_GetMenuHandle_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int Menu_GetItemsCount_(IntPtr obj);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Menu_InsertItemAt_(IntPtr obj, int index, IntPtr item);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Menu_RemoveItemAt_(IntPtr obj, int index);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void Menu_ShowContextMenu_(IntPtr obj, IntPtr control, Alternet.Drawing.PointD position);
            
        }
    }
}
