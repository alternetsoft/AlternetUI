// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2023.</auto-generated>
#nullable enable
#pragma warning disable

using System;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Security;
namespace Alternet.UI.Native
{
    internal class TextBoxTextAttr : NativeObject
    {
        static TextBoxTextAttr()
        {
        }
        
        public TextBoxTextAttr()
        {
            SetNativePointer(NativeApi.TextBoxTextAttr_Create_());
        }
        
        public TextBoxTextAttr(IntPtr nativePointer) : base(nativePointer)
        {
        }
        
        public static void Delete(System.IntPtr attr)
        {
            NativeApi.TextBoxTextAttr_Delete_(attr);
        }
        
        public void Copy(System.IntPtr attr)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_Copy_(NativePointer, attr);
        }
        
        public static System.IntPtr CreateTextAttr()
        {
            var n = NativeApi.TextBoxTextAttr_CreateTextAttr_();
            var m = n;
            return m;
        }
        
        public void SetTextColor(System.IntPtr attr, Alternet.Drawing.Color colText)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetTextColor_(NativePointer, attr, colText);
        }
        
        public void SetBackgroundColor(System.IntPtr attr, Alternet.Drawing.Color colBack)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetBackgroundColor_(NativePointer, attr, colBack);
        }
        
        public void SetAlignment(System.IntPtr attr, int alignment)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetAlignment_(NativePointer, attr, alignment);
        }
        
        public void SetFontPointSize(System.IntPtr attr, int pointSize)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetFontPointSize_(NativePointer, attr, pointSize);
        }
        
        public void SetFontStyle(System.IntPtr attr, int fontStyle)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetFontStyle_(NativePointer, attr, fontStyle);
        }
        
        public void SetFontWeight(System.IntPtr attr, int fontWeight)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetFontWeight_(NativePointer, attr, fontWeight);
        }
        
        public void SetFontFaceName(System.IntPtr attr, string faceName)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetFontFaceName_(NativePointer, attr, faceName);
        }
        
        public void SetFontUnderlined(System.IntPtr attr, bool underlined)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetFontUnderlined_(NativePointer, attr, underlined);
        }
        
        public void SetFontUnderlinedEx(System.IntPtr attr, int type, Alternet.Drawing.Color colour)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetFontUnderlinedEx_(NativePointer, attr, type, colour);
        }
        
        public void SetFontStrikethrough(System.IntPtr attr, bool strikethrough)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetFontStrikethrough_(NativePointer, attr, strikethrough);
        }
        
        public void SetFontFamily(System.IntPtr attr, int family)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetFontFamily_(NativePointer, attr, family);
        }
        
        public Alternet.Drawing.Color GetTextColor(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetTextColor_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public Alternet.Drawing.Color GetBackgroundColor(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetBackgroundColor_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetAlignment(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetAlignment_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public void SetURL(System.IntPtr attr, string url)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetURL_(NativePointer, attr, url);
        }
        
        public void SetFlags(System.IntPtr attr, long flags)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetFlags_(NativePointer, attr, flags);
        }
        
        public void SetParagraphSpacingAfter(System.IntPtr attr, int spacing)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetParagraphSpacingAfter_(NativePointer, attr, spacing);
        }
        
        public void SetParagraphSpacingBefore(System.IntPtr attr, int spacing)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetParagraphSpacingBefore_(NativePointer, attr, spacing);
        }
        
        public void SetLineSpacing(System.IntPtr attr, int spacing)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetLineSpacing_(NativePointer, attr, spacing);
        }
        
        public void SetBulletStyle(System.IntPtr attr, int style)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetBulletStyle_(NativePointer, attr, style);
        }
        
        public void SetBulletNumber(System.IntPtr attr, int n)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetBulletNumber_(NativePointer, attr, n);
        }
        
        public void SetBulletText(System.IntPtr attr, string text)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetBulletText_(NativePointer, attr, text);
        }
        
        public void SetPageBreak(System.IntPtr attr, bool pageBreak)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetPageBreak_(NativePointer, attr, pageBreak);
        }
        
        public void SetCharacterStyleName(System.IntPtr attr, string name)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetCharacterStyleName_(NativePointer, attr, name);
        }
        
        public void SetParagraphStyleName(System.IntPtr attr, string name)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetParagraphStyleName_(NativePointer, attr, name);
        }
        
        public void SetListStyleName(System.IntPtr attr, string name)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetListStyleName_(NativePointer, attr, name);
        }
        
        public void SetBulletFont(System.IntPtr attr, string bulletFont)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetBulletFont_(NativePointer, attr, bulletFont);
        }
        
        public void SetBulletName(System.IntPtr attr, string name)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetBulletName_(NativePointer, attr, name);
        }
        
        public void SetTextEffects(System.IntPtr attr, int effects)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetTextEffects_(NativePointer, attr, effects);
        }
        
        public void SetTextEffectFlags(System.IntPtr attr, int effects)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetTextEffectFlags_(NativePointer, attr, effects);
        }
        
        public void SetOutlineLevel(System.IntPtr attr, int level)
        {
            CheckDisposed();
            NativeApi.TextBoxTextAttr_SetOutlineLevel_(NativePointer, attr, level);
        }
        
        public long GetFlags(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetFlags_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetFontSize(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetFontSize_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetFontStyle(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetFontStyle_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetFontWeight(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetFontWeight_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public bool GetFontUnderlined(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetFontUnderlined_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetUnderlineType(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetUnderlineType_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public Alternet.Drawing.Color GetUnderlineColor(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetUnderlineColor_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public bool GetFontStrikethrough(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetFontStrikethrough_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public string GetFontFaceName(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetFontFaceName_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetFontFamily(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetFontFamily_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetParagraphSpacingAfter(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetParagraphSpacingAfter_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetParagraphSpacingBefore(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetParagraphSpacingBefore_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetLineSpacing(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetLineSpacing_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetBulletStyle(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetBulletStyle_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetBulletNumber(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetBulletNumber_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public string GetBulletText(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetBulletText_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public string GetURL(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetURL_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetTextEffects(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetTextEffects_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetTextEffectFlags(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetTextEffectFlags_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public int GetOutlineLevel(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_GetOutlineLevel_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public bool IsCharacterStyle(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_IsCharacterStyle_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public bool IsParagraphStyle(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_IsParagraphStyle_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        public bool IsDefault(System.IntPtr attr)
        {
            CheckDisposed();
            var n = NativeApi.TextBoxTextAttr_IsDefault_(NativePointer, attr);
            var m = n;
            return m;
        }
        
        
        [SuppressUnmanagedCodeSecurity]
        public class NativeApi : NativeApiProvider
        {
            static NativeApi() => Initialize();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr TextBoxTextAttr_Create_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_Delete_(System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_Copy_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern System.IntPtr TextBoxTextAttr_CreateTextAttr_();
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetTextColor_(IntPtr obj, System.IntPtr attr, NativeApiTypes.Color colText);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetBackgroundColor_(IntPtr obj, System.IntPtr attr, NativeApiTypes.Color colBack);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetAlignment_(IntPtr obj, System.IntPtr attr, int alignment);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetFontPointSize_(IntPtr obj, System.IntPtr attr, int pointSize);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetFontStyle_(IntPtr obj, System.IntPtr attr, int fontStyle);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetFontWeight_(IntPtr obj, System.IntPtr attr, int fontWeight);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetFontFaceName_(IntPtr obj, System.IntPtr attr, string faceName);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetFontUnderlined_(IntPtr obj, System.IntPtr attr, bool underlined);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetFontUnderlinedEx_(IntPtr obj, System.IntPtr attr, int type, NativeApiTypes.Color colour);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetFontStrikethrough_(IntPtr obj, System.IntPtr attr, bool strikethrough);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetFontFamily_(IntPtr obj, System.IntPtr attr, int family);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color TextBoxTextAttr_GetTextColor_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color TextBoxTextAttr_GetBackgroundColor_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetAlignment_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetURL_(IntPtr obj, System.IntPtr attr, string url);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetFlags_(IntPtr obj, System.IntPtr attr, long flags);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetParagraphSpacingAfter_(IntPtr obj, System.IntPtr attr, int spacing);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetParagraphSpacingBefore_(IntPtr obj, System.IntPtr attr, int spacing);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetLineSpacing_(IntPtr obj, System.IntPtr attr, int spacing);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetBulletStyle_(IntPtr obj, System.IntPtr attr, int style);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetBulletNumber_(IntPtr obj, System.IntPtr attr, int n);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetBulletText_(IntPtr obj, System.IntPtr attr, string text);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetPageBreak_(IntPtr obj, System.IntPtr attr, bool pageBreak);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetCharacterStyleName_(IntPtr obj, System.IntPtr attr, string name);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetParagraphStyleName_(IntPtr obj, System.IntPtr attr, string name);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetListStyleName_(IntPtr obj, System.IntPtr attr, string name);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetBulletFont_(IntPtr obj, System.IntPtr attr, string bulletFont);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetBulletName_(IntPtr obj, System.IntPtr attr, string name);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetTextEffects_(IntPtr obj, System.IntPtr attr, int effects);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetTextEffectFlags_(IntPtr obj, System.IntPtr attr, int effects);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern void TextBoxTextAttr_SetOutlineLevel_(IntPtr obj, System.IntPtr attr, int level);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern long TextBoxTextAttr_GetFlags_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetFontSize_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetFontStyle_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetFontWeight_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool TextBoxTextAttr_GetFontUnderlined_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetUnderlineType_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern NativeApiTypes.Color TextBoxTextAttr_GetUnderlineColor_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool TextBoxTextAttr_GetFontStrikethrough_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string TextBoxTextAttr_GetFontFaceName_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetFontFamily_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetParagraphSpacingAfter_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetParagraphSpacingBefore_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetLineSpacing_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetBulletStyle_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetBulletNumber_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string TextBoxTextAttr_GetBulletText_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern string TextBoxTextAttr_GetURL_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetTextEffects_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetTextEffectFlags_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern int TextBoxTextAttr_GetOutlineLevel_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool TextBoxTextAttr_IsCharacterStyle_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool TextBoxTextAttr_IsParagraphStyle_(IntPtr obj, System.IntPtr attr);
            
            [DllImport(NativeModuleName, CallingConvention = CallingConvention.Cdecl)]
            public static extern bool TextBoxTextAttr_IsDefault_(IntPtr obj, System.IntPtr attr);
            
        }
    }
}
