<?xml version="1.0" encoding="utf-8"?>
<LexScheme xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Author>AlterNET Software</Author>
  <Name>Java language</Name>
  <Desc>Syntax Scheme for Java Language</Desc>
  <Copyright>Copyright AlterNET Software, 2016-2019</Copyright>
  <FileExtension>.j</FileExtension>
  <FileType>java</FileType>
  <Version>1.5</Version>
  <Styles>
    <Style>
      <Name>idents</Name>
      <ForeColor>ControlText</ForeColor>
    </Style>
    <Style>
      <Name>numbers</Name>
      <ForeColor>ControlText</ForeColor>
    </Style>
    <Style>
      <Name>reswords</Name>
      <ForeColor>Blue</ForeColor>
    </Style>
    <Style>
      <Name>comments</Name>
      <ForeColor>Green</ForeColor>
      <PlainText>true</PlainText>
    </Style>
    <Style>
      <Name>whitespace</Name>
    </Style>
    <Style>
      <Name>strings</Name>
      <ForeColor>ControlText</ForeColor>
    </Style>
  </Styles>
  <States>
    <State>
      <Name>normal</Name>
      <CaseSensitive>true</CaseSensitive>
      <SyntaxBlocks>
        <SyntaxBlock>
          <Name>idents</Name>
          <LexStyle>0</LexStyle>
          <LeaveState>0</LeaveState>
          <ResWordSets>
            <ResWordSet>
              <ResWordStyle>2</ResWordStyle>
              <ResWords>
                <word>else</word>
                <word>synchronized</word>
                <word>final</word>
                <word>throws</word>
                <word>protected</word>
                <word>volatile</word>
                <word>true</word>
                <word>long</word>
                <word>class</word>
                <word>implements</word>
                <word>false</word>
                <word>int</word>
                <word>this</word>
                <word>throw</word>
                <word>native</word>
                <word>while</word>
                <word>private</word>
                <word>package</word>
                <word>short</word>
                <word>instanceof</word>
                <word>interface</word>
                <word>const</word>
                <word>float</word>
                <word>new</word>
                <word>for</word>
                <word>continue</word>
                <word>import</word>
                <word>finally</word>
                <word>switch</word>
                <word>transient</word>
                <word>try</word>
                <word>break</word>
                <word>null</word>
                <word>return</word>
                <word>abstract</word>
                <word>case</word>
                <word>default</word>
                <word>public</word>
                <word>super</word>
                <word>if</word>
                <word>catch</word>
                <word>do</word>
                <word>char</word>
                <word>goto</word>
                <word>void</word>
                <word>static</word>
                <word>byte</word>
                <word>extends</word>
                <word>boolean</word>
                <word>double</word>
              </ResWords>
            </ResWordSet>
          </ResWordSets>
          <Expressions>
            <string>[a-zA-Z_][a-zA-Z0-9_]*</string>
          </Expressions>
        </SyntaxBlock>
        <SyntaxBlock>
          <Name>comment1</Name>
          <LexStyle>3</LexStyle>
          <LeaveState>0</LeaveState>
          <Expressions>
            <string>//.*</string>
          </Expressions>
        </SyntaxBlock>
        <SyntaxBlock>
          <Name>comment2</Name>
          <LexStyle>3</LexStyle>
          <LeaveState>1</LeaveState>
          <Expressions>
            <string>/\*</string>
          </Expressions>
        </SyntaxBlock>
        <SyntaxBlock>
          <Name>numbers</Name>
          <LexStyle>1</LexStyle>
          <LeaveState>0</LeaveState>
          <Expressions>
            <string>([0-9]+\.[0-9]*(e|E)(\+|\-)?[0-9]+)|([0-9]+\.[0-9]*)|(0(x|X)[0-9a-fA-F]+)|([0-9]+)</string>
          </Expressions>
        </SyntaxBlock>
        <SyntaxBlock>
          <Name>string1</Name>
          <LexStyle>5</LexStyle>
          <LeaveState>0</LeaveState>
          <Expressions>
            <string>('')|'((((\\')|('')|[^'])*')|(((\\')|('')|[^'])*))</string>
          </Expressions>
        </SyntaxBlock>
        <SyntaxBlock>
          <Name>string2</Name>
          <LexStyle>5</LexStyle>
          <LeaveState>0</LeaveState>
          <Expressions>
            <string>("")|"((((\\")|("")|[^"])*")|(((\\")|("")|[^"])*))</string>
          </Expressions>
        </SyntaxBlock>
        <SyntaxBlock>
          <Name>whitespace</Name>
          <LexStyle>4</LexStyle>
          <LeaveState>0</LeaveState>
          <Expressions>
            <string>(\s)*</string>
          </Expressions>
        </SyntaxBlock>
      </SyntaxBlocks>
    </State>
    <State>
      <Name>comment</Name>
      <CaseSensitive>true</CaseSensitive>
      <SyntaxBlocks>
        <SyntaxBlock>
          <Name>comment21</Name>
          <LexStyle>3</LexStyle>
          <LeaveState>0</LeaveState>
          <Expressions>
            <string>\*/</string>
          </Expressions>
        </SyntaxBlock>
        <SyntaxBlock>
          <Name>comment22</Name>
          <LexStyle>3</LexStyle>
          <LeaveState>1</LeaveState>
          <Expressions>
            <string>((?!\*/).)+</string>
          </Expressions>
        </SyntaxBlock>
      </SyntaxBlocks>
    </State>
  </States>
</LexScheme>