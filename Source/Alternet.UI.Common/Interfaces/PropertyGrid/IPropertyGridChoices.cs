using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Alternet.Drawing;

namespace Alternet.UI
{
    /// <summary>
    /// Choices used in <see cref="PropertyGrid"/> items for enum and flags properties.
    /// </summary>
    public interface IPropertyGridChoices
    {
        /// <summary>
        /// Gets the number of elements actually contained in the <see cref="IPropertyGridChoices"/>.
        /// </summary>
        int Count { get; }

        /// <summary>
        /// Gets copy of this instance with additional empty element.
        /// </summary>
        /// <remarks>
        /// This is useful for editing nullable properties.
        /// </remarks>
        IPropertyGridChoices NullableChoices { get; }

        /// <summary>
        /// Gets or sets "nullable" value which is changed to <c>null</c> when is set back to
        /// object property. By default it is <see cref="int.MaxValue"/>.
        /// </summary>
        int NullableValue { get; set; }

        /// <summary>
        /// Gets whether this instance is obtained from <see cref="NullableChoices"/>.
        /// </summary>
        bool IsNullable { get; }

        /// <summary>
        /// Gets whether fonts where specified for items.
        /// </summary>
        bool HasCustomFonts { get; }

        /// <summary>
        /// Gets whether bitmaps where specified for items.
        /// </summary>
        bool HasBitmaps { get; }

        /// <summary>
        /// Gets whether foreground colors where specified for items.
        /// </summary>
        bool HasCustomFgColors { get; }

        /// <summary>
        /// Gets whether background colors where specified for items.
        /// </summary>
        bool HasCustomBgColors { get; }

        /// <summary>
        /// Adds new item.
        /// </summary>
        /// <param name="text">Item title.</param>
        /// <param name="value">Item value (id).</param>
        /// <param name="bitmap">Item image.</param>
        /// <returns>Added item index.</returns>
        int Add(string text, int value, ImageSet? bitmap = null);

        /// <summary>
        /// Adds new item.
        /// </summary>
        /// <param name="value">Item value.</param>
        /// <param name="bitmap">Item image</param>
        /// <returns>Added item index.</returns>
        /// <remarks>
        /// Items title is generated automatically using ToString().
        /// </remarks>
        int Add(object value, ImageSet? bitmap = null);

        /// <summary>
        /// Adds new item.
        /// </summary>
        /// <param name="text">Item title.</param>
        /// <param name="value">Item value.</param>
        /// <param name="bitmap">Item image</param>
        /// <returns>Added item index.</returns>
        int Add(string text, object value, ImageSet? bitmap = null);

        /// <summary>
        /// Adds new item with autogenerated value (id).
        /// </summary>
        /// <param name="text">Item title.</param>
        /// <param name="value">Item value(id).</param>
        void Add(string text, out int value);

        /// <summary>
        /// Adds the elements of the specified collection to the end.
        /// </summary>
        /// <param name="items">The collection whose elements should be added to the end.</param>
        void AddRange(IEnumerable<string> items);

        /// <summary>
        /// Adds the elements of the <see cref="IPropertyGridChoices"/> to the end.
        /// </summary>
        /// <param name="choices"><see cref="IPropertyGridChoices"/> whose elements should be
        /// added to the end.</param>
        void AddRange(IPropertyGridChoices choices);

        /// <summary>
        /// Adds the elements of the specified collection to the end.
        /// </summary>
        /// <param name="items">The collection whose elements should be added to the end.</param>
        void AddRange(IEnumerable<object> items);

        /// <summary>
        /// Searches for the specified item by it's title and returns value (id) of the item.
        /// </summary>
        /// <param name="text">Item title.</param>
        int? GetValueFromLabel(string text);

        /// <summary>
        /// Searches for the specified item by it's value and returns title of the item.
        /// </summary>
        /// <param name="value">Item value (id).</param>
        string? GetLabelFromValue(int value);

        /// <summary>
        /// Returns index of item with given title.
        /// </summary>
        /// <param name="str">Item title.</param>
        /// <returns></returns>
        int GetLabelIndex(string str);

        /// <summary>
        /// Returns index of item with given value (id).
        /// </summary>
        /// <param name="val">Item value.</param>
        /// <returns></returns>
        int GetValueIndex(int val);

        /// <summary>
        /// Inserts a single item.
        /// </summary>
        /// <param name="index">Index in list where item will be inserted.</param>
        /// <param name="text">Item title.</param>
        /// <param name="value">Item value (id).</param>
        /// <param name="bitmap">Item image.</param>
        void Insert(int index, string text, int value, ImageSet? bitmap);

        /// <summary>
        /// Returns false if this is a constant empty set of choices,
        /// which should not be modified.
        /// </summary>
        bool IsOk();

        /// <summary>
        /// Sets item title for the given enum value.
        /// </summary>
        /// <typeparam name="T">Type of the item value.</typeparam>
        /// <param name="value">Item value (id).</param>
        /// <param name="label">New item title.</param>
        /// <example>
        /// <code>
        /// var localizableEnum = PropertyGrid.GetChoices&#60;BrushType&#62;();
        /// localizableEnum.SetLabelForValue&#60;BrushType&#62;(
        ///     BrushType.LinearGradient, "Linear Gradient");
        /// </code>
        /// </example>
        void SetLabelForValue<T>(T value, string label)
            where T : Enum;

        /// <summary>
        /// Removes specified enum value from the list of choices.
        /// </summary>
        /// <typeparam name="T">Type of the item value.</typeparam>
        /// <param name="value">Item value.</param>
        void RemoveValue<T>(T value)
            where T : Enum;

        /// <summary>
        /// Sets item label.
        /// </summary>
        /// <param name="index">Item index.</param>
        /// <param name="value">New item label.</param>
        void SetLabel(int index, string value);

        /// <summary>
        /// Sets item title for the given item value.
        /// </summary>
        /// <param name="value">Item value (id).</param>
        /// <param name="label">New item title.</param>
        void SetLabelForValue(int value, string label);

        /// <summary>
        /// Sets item bitmap.
        /// </summary>
        /// <param name="index">Item index.</param>
        /// <param name="bitmap">New item image.</param>
        void SetBitmap(int index, ImageSet? bitmap);

        /// <summary>
        /// Sets item foreground color.
        /// </summary>
        /// <param name="index">Item index.</param>
        /// <param name="color">New item foreground color.</param>
        void SetFgColor(int index, Color color);

        /// <summary>
        /// Sets item background color.
        /// </summary>
        /// <param name="index">Item index.</param>
        /// <param name="color">New item background color.</param>
        void SetBgColor(int index, Color color);

        /// <summary>
        /// Gets item foreground color.
        /// </summary>
        /// <param name="index">Item index.</param>
        /// <returns></returns>
        Color GetFgColor(int index);

        /// <summary>
        /// Gets item background color.
        /// </summary>
        /// <param name="index">Item index.</param>
        /// <returns></returns>
        Color GetBgColor(int index);

        /// <summary>
        /// Returns label of item at specified index.
        /// </summary>
        /// <param name="index">Item index.</param>
        string GetLabel(int index);

        /// <summary>
        /// Returns value of item at specified index.
        /// </summary>
        /// <param name="index">Item index.</param>
        int GetValue(int index);

        /// <summary>
        /// Removes items starting at specified index.
        /// </summary>
        /// <param name="index">The zero-based index of the item(s) to remove.</param>
        /// <param name="count">Number of items to remove.</param>
        void RemoveAt(int index, int count = 1);

        /// <summary>
        /// Delete all choices.
        /// </summary>
        void Clear();
    }
}
