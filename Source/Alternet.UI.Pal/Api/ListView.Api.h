// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2023 AlterNET Software.</auto-generated>

#pragma once

#include "ListView.h"
#include "ImageList.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API ListView* ListView_Create_()
{
    return new ListView();
}

ALTERNET_UI_API c_bool ListView_GetHasBorder_(ListView* obj)
{
    return obj->GetHasBorder();
}

ALTERNET_UI_API void ListView_SetHasBorder_(ListView* obj, c_bool value)
{
    obj->SetHasBorder(value);
}

ALTERNET_UI_API int64_t ListView_GetItemsCount_(ListView* obj)
{
    return obj->GetItemsCount();
}

ALTERNET_UI_API ImageList* ListView_GetSmallImageList_(ListView* obj)
{
    return obj->GetSmallImageList();
}

ALTERNET_UI_API void ListView_SetSmallImageList_(ListView* obj, ImageList* value)
{
    obj->SetSmallImageList(value);
}

ALTERNET_UI_API ImageList* ListView_GetLargeImageList_(ListView* obj)
{
    return obj->GetLargeImageList();
}

ALTERNET_UI_API void ListView_SetLargeImageList_(ListView* obj, ImageList* value)
{
    obj->SetLargeImageList(value);
}

ALTERNET_UI_API ListViewView ListView_GetCurrentView_(ListView* obj)
{
    return obj->GetCurrentView();
}

ALTERNET_UI_API void ListView_SetCurrentView_(ListView* obj, ListViewView value)
{
    obj->SetCurrentView(value);
}

ALTERNET_UI_API ListViewSelectionMode ListView_GetSelectionMode_(ListView* obj)
{
    return obj->GetSelectionMode();
}

ALTERNET_UI_API void ListView_SetSelectionMode_(ListView* obj, ListViewSelectionMode value)
{
    obj->SetSelectionMode(value);
}

ALTERNET_UI_API c_bool ListView_GetAllowLabelEdit_(ListView* obj)
{
    return obj->GetAllowLabelEdit();
}

ALTERNET_UI_API void ListView_SetAllowLabelEdit_(ListView* obj, c_bool value)
{
    obj->SetAllowLabelEdit(value);
}

ALTERNET_UI_API int64_t ListView_GetTopItemIndex_(ListView* obj)
{
    return obj->GetTopItemIndex();
}

ALTERNET_UI_API ListViewGridLinesDisplayMode ListView_GetGridLinesDisplayMode_(ListView* obj)
{
    return obj->GetGridLinesDisplayMode();
}

ALTERNET_UI_API void ListView_SetGridLinesDisplayMode_(ListView* obj, ListViewGridLinesDisplayMode value)
{
    obj->SetGridLinesDisplayMode(value);
}

ALTERNET_UI_API ListViewSortMode ListView_GetSortMode_(ListView* obj)
{
    return obj->GetSortMode();
}

ALTERNET_UI_API void ListView_SetSortMode_(ListView* obj, ListViewSortMode value)
{
    obj->SetSortMode(value);
}

ALTERNET_UI_API c_bool ListView_GetColumnHeaderVisible_(ListView* obj)
{
    return obj->GetColumnHeaderVisible();
}

ALTERNET_UI_API void ListView_SetColumnHeaderVisible_(ListView* obj, c_bool value)
{
    obj->SetColumnHeaderVisible(value);
}

ALTERNET_UI_API int64_t ListView_GetFocusedItemIndex_(ListView* obj)
{
    return obj->GetFocusedItemIndex();
}

ALTERNET_UI_API void ListView_SetFocusedItemIndex_(ListView* obj, int64_t value)
{
    obj->SetFocusedItemIndex(value);
}

ALTERNET_UI_API void* ListView_OpenSelectedIndicesArray_(ListView* obj)
{
    return obj->OpenSelectedIndicesArray();
}

ALTERNET_UI_API int ListView_GetSelectedIndicesItemCount_(ListView* obj, void* array)
{
    return obj->GetSelectedIndicesItemCount(array);
}

ALTERNET_UI_API int64_t ListView_GetSelectedIndicesItemAt_(ListView* obj, void* array, int index)
{
    return obj->GetSelectedIndicesItemAt(array, index);
}

ALTERNET_UI_API void ListView_CloseSelectedIndicesArray_(ListView* obj, void* array)
{
    obj->CloseSelectedIndicesArray(array);
}

ALTERNET_UI_API void ListView_InsertItemAt_(ListView* obj, int64_t index, const char16_t* text, int64_t columnIndex, int imageIndex)
{
    obj->InsertItemAt(index, text, columnIndex, imageIndex);
}

ALTERNET_UI_API void ListView_RemoveItemAt_(ListView* obj, int64_t index)
{
    obj->RemoveItemAt(index);
}

ALTERNET_UI_API void ListView_ClearItems_(ListView* obj)
{
    obj->ClearItems();
}

ALTERNET_UI_API void ListView_InsertColumnAt_(ListView* obj, int64_t index, const char16_t* header, double width, ListViewColumnWidthMode widthMode)
{
    obj->InsertColumnAt(index, header, width, widthMode);
}

ALTERNET_UI_API void ListView_RemoveColumnAt_(ListView* obj, int64_t index)
{
    obj->RemoveColumnAt(index);
}

ALTERNET_UI_API void ListView_ClearSelected_(ListView* obj)
{
    obj->ClearSelected();
}

ALTERNET_UI_API void ListView_SetSelected_(ListView* obj, int64_t index, c_bool value)
{
    obj->SetSelected(index, value);
}

ALTERNET_UI_API void* ListView_ItemHitTest_(ListView* obj, Point point)
{
    return obj->ItemHitTest(point);
}

ALTERNET_UI_API ListViewHitTestLocations ListView_GetHitTestResultLocations_(ListView* obj, void* hitTestResult)
{
    return obj->GetHitTestResultLocations(hitTestResult);
}

ALTERNET_UI_API int64_t ListView_GetHitTestResultItemIndex_(ListView* obj, void* hitTestResult)
{
    return obj->GetHitTestResultItemIndex(hitTestResult);
}

ALTERNET_UI_API int64_t ListView_GetHitTestResultColumnIndex_(ListView* obj, void* hitTestResult)
{
    return obj->GetHitTestResultColumnIndex(hitTestResult);
}

ALTERNET_UI_API void ListView_FreeHitTestResult_(ListView* obj, void* hitTestResult)
{
    obj->FreeHitTestResult(hitTestResult);
}

ALTERNET_UI_API void ListView_BeginLabelEdit_(ListView* obj, int64_t itemIndex)
{
    obj->BeginLabelEdit(itemIndex);
}

ALTERNET_UI_API Rect_C ListView_GetItemBounds_(ListView* obj, int64_t itemIndex, ListViewItemBoundsPortion portion)
{
    return obj->GetItemBounds(itemIndex, portion);
}

ALTERNET_UI_API void ListView_Clear_(ListView* obj)
{
    obj->Clear();
}

ALTERNET_UI_API void ListView_EnsureItemVisible_(ListView* obj, int64_t itemIndex)
{
    obj->EnsureItemVisible(itemIndex);
}

ALTERNET_UI_API void ListView_SetItemText_(ListView* obj, int64_t itemIndex, int64_t columnIndex, const char16_t* text)
{
    obj->SetItemText(itemIndex, columnIndex, text);
}

ALTERNET_UI_API void ListView_SetItemImageIndex_(ListView* obj, int64_t itemIndex, int64_t columnIndex, int imageIndex)
{
    obj->SetItemImageIndex(itemIndex, columnIndex, imageIndex);
}

ALTERNET_UI_API void ListView_SetColumnWidth_(ListView* obj, int64_t columnIndex, double fixedWidth, ListViewColumnWidthMode widthMode)
{
    obj->SetColumnWidth(columnIndex, fixedWidth, widthMode);
}

ALTERNET_UI_API void ListView_SetColumnTitle_(ListView* obj, int64_t columnIndex, const char16_t* text)
{
    obj->SetColumnTitle(columnIndex, text);
}

ALTERNET_UI_API void ListView_SetEventCallback_(ListView::ListViewEventCallbackType callback)
{
    ListView::SetEventCallback(callback);
}

