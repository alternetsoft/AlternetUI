// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
static Color FindFirstUnusedColor(void* handle, uint8_t startR, uint8_t startG, uint8_t startB);
static void* CreateImage();
static void* CreateImageWithSize(int width, int height, bool clear);
static void* CreateImageFromFileWithBitmapType(const string& name, int bitmapType, int index);
static void* CreateImageFromFileWithMimeType(const string& name, const string& mimetype, int index);
static void* CreateImageFromStreamWithBitmapData(void* stream, int bitmapType, int index);
static void* CreateImageFromStreamWithMimeType(void* stream, const string& mimetype, int index);
static void* CreateImageWithSizeAndData(int width, int height, void* data, bool static_data);
static void* CreateImageWithAlpha(int width, int height, void* data, void* alpha, bool static_data);
static void DeleteImage(void* handle);
static void SetAlpha(void* handle, int x, int y, uint8_t alpha);
static void ClearAlpha(void* handle);
static void SetLoadFlags(void* handle, int flags);
static void SetMask(void* handle, bool hasMask);
static void SetMaskColor(void* handle, uint8_t red, uint8_t green, uint8_t blue);
static bool SetMaskFromImage(void* handle, void* image, uint8_t mr, uint8_t mg, uint8_t mb);
static void SetOptionString(void* handle, const string& name, const string& value);
static void SetOptionInt(void* handle, const string& name, int value);
static void SetRGB(void* handle, int x, int y, uint8_t r, uint8_t g, uint8_t b);
static void SetRGBRect(void* handle, const RectI& rect, uint8_t red, uint8_t green, uint8_t blue);
static void SetImageType(void* handle, int type);
static void SetDefaultLoadFlags(int flags);
static int GetLoadFlags(void* handle);
static void* Copy(void* handle);
static bool CreateFreshImage(void* handle, int width, int height, bool clear);
static void Clear(void* handle, uint8_t value);
static void DestroyImageData(void* handle);
static void InitAlpha(void* handle);
static void* Blur(void* handle, int blurRadius);
static void* BlurHorizontal(void* handle, int blurRadius);
static void* BlurVertical(void* handle, int blurRadius);
static void* Mirror(void* handle, bool horizontally);
static void Paste(void* handle, void* image, int x, int y, int alphaBlend);
static void Replace(void* handle, uint8_t r1, uint8_t g1, uint8_t b1, uint8_t r2, uint8_t g2, uint8_t b2);
static void Rescale(void* handle, int width, int height, int quality);
static void Resize(void* handle, const SizeI& size, const PointI& pos, int red, int green, int blue);
static void* Rotate90(void* handle, bool clockwise);
static void* Rotate180(void* handle);
static void RotateHue(void* handle, double angle);
static void ChangeSaturation(void* handle, double factor);
static void ChangeBrightness(void* handle, double factor);
static void ChangeHSV(void* handle, double angleH, double factorS, double factorV);
static void* Scale(void* handle, int width, int height, int quality);
static void* Size(void* handle, const SizeI& size, const PointI& pos, int red, int green, int blue);
static bool ConvertAlphaToMask(void* handle, uint8_t threshold);
static bool ConvertAlphaToMaskUseColor(void* handle, uint8_t mr, uint8_t mg, uint8_t mb, uint8_t threshold);
static void* ConvertToGreyscaleEx(void* handle, double weight_r, double weight_g, double weight_b);
static void* ConvertToGreyscale(void* handle);
static void* ConvertToMono(void* handle, uint8_t r, uint8_t g, uint8_t b);
static void* ConvertToDisabled(void* handle, uint8_t brightness);
static void* ChangeLightness(void* handle, int alpha);
static uint8_t GetAlpha(void* handle, int x, int y);
static uint8_t GetRed(void* handle, int x, int y);
static uint8_t GetGreen(void* handle, int x, int y);
static uint8_t GetBlue(void* handle, int x, int y);
static uint8_t GetMaskRed(void* handle);
static uint8_t GetMaskGreen(void* handle);
static uint8_t GetMaskBlue(void* handle);
static int GetWidth(void* handle);
static int GetHeight(void* handle);
static SizeI GetSize(void* handle);
static string GetOptionString(void* handle, const string& name);
static int GetOptionInt(void* handle, const string& name);
static void* GetSubImage(void* handle, const RectI& rect);
static int GetImageType(void* handle);
static bool HasAlpha(void* handle);
static bool HasMask(void* handle);
static bool HasOption(void* handle, const string& name);
static bool IsOk(void* handle);
static bool IsTransparent(void* handle, int x, int y, uint8_t threshold);
static bool LoadStreamWithBitmapType(void* handle, void* stream, int bitmapType, int index);
static bool LoadFileWithBitmapType(void* handle, const string& name, int bitmapType, int index);
static bool LoadFileWithMimeType(void* handle, const string& name, const string& mimetype, int index);
static bool LoadStreamWithMimeType(void* handle, void* stream, const string& mimetype, int index);
static bool SaveStreamWithMimeType(void* handle, void* stream, const string& mimetype);
static bool SaveFileWithBitmapType(void* handle, const string& name, int bitmapType);
static bool SaveFileWithMimeType(void* handle, const string& name, const string& mimetype);
static bool SaveFile(void* handle, const string& name);
static bool SaveStreamWithBitmapType(void* handle, void* stream, int type);
static bool CanRead(const string& filename);
static bool CanReadStream(void* stream);
static int GetDefaultLoadFlags();
static string GetImageExtWildcard();
static void AddHandler(void* handler);
static void CleanUpHandlers();
static void* FindHandlerByName(const string& name);
static void* FindHandlerByExt(const string& extension, int bitmapType);
static void* FindHandlerByBitmapType(int bitmapType);
static void* FindHandlerByMime(const string& mimetype);
static void InsertHandler(void* handler);
static bool RemoveHandler(const string& name);
static int GetImageCountInFile(const string& filename, int bitmapType);
static int GetImageCountInStream(void* stream, int bitmapType);
static void* GetAlphaData(void* handle);
static void* GetData(void* handle);
static bool CreateData(void* handle, int width, int height, void* data, bool static_data);
static bool CreateAlphaData(void* handle, int width, int height, void* data, void* alpha, bool static_data);
static void SetAlphaData(void* handle, void* alpha, bool static_data);
static void SetData(void* handle, void* data, bool static_data);
static void SetDataWithSize(void* handle, void* data, int new_width, int new_height, bool static_data);
static void* LockBits(void* handle);
static int GetStride(void* handle);
static void UnlockBits(void* handle);

public:
GenericImage();

protected:
virtual ~GenericImage();

private:
BYREF_ONLY(GenericImage);
