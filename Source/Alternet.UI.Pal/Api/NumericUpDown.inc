// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
bool GetHasBorder();
void SetHasBorder(bool value);

int GetMinimum();
void SetMinimum(int value);

int GetMaximum();
void SetMaximum(int value);

int GetValue();
void SetValue(int value);


public:

enum class NumericUpDownEvent
{
    ValueChanged,
};

typedef void* (*NumericUpDownEventCallbackType)(NumericUpDown* obj, NumericUpDownEvent event, void* param);

static void SetEventCallback(NumericUpDownEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(NumericUpDownEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(NumericUpDownEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(NumericUpDownEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static NumericUpDownEventCallbackType eventCallback = nullptr;

public:
NumericUpDown();

protected:
virtual ~NumericUpDown();

private:
BYREF_ONLY(NumericUpDown);
