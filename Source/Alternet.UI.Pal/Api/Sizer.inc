// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
public:
static void* AddWindow(void* handle, void* window, int proportion, int flag, int border, void* userData);
static void* AddSizer(void* handle, void* sizer, int proportion, int flag, int border, void* userData);
static void* AddCustomBox(void* handle, int width, int height, int proportion, int flag, int border, void* userData);
static void* AddWindow2(void* handle, void* window, void* sizerFlags);
static void* AddSizer2(void* handle, void* sizer, void* sizerFlags);
static void* AddCustomBox2(void* handle, int width, int height, void* sizerFlags);
static void* AddItem(void* handle, void* item);
static void* AddSpacer(void* handle, int size);
static void* AddStretchSpacer(void* handle, int prop);
static void* InsertWindow(void* handle, int index, void* window, int proportion, int flag, int border, void* userData);
static void* InsertSizer(void* handle, int index, void* sizer, int proportion, int flag, int border, void* userData);
static void* InsertCustomBox(void* handle, int index, int width, int height, int proportion, int flag, int border, void* userData);
static void* InsertWindow2(void* handle, int index, void* window, void* sizerFlags);
static void* InsertSizer2(void* handle, int index, void* sizer, void* sizerFlags);
static void* InsertCustomBox2(void* handle, int index, int width, int height, void* sizerFlags);
static void* InsertItem(void* handle, int index, void* item);
static void* InsertSpacer(void* handle, int index, int size);
static void* InsertStretchSpacer(void* handle, int index, int prop);
static void* PrependWindow(void* handle, void* window, int proportion, int flag, int border, void* userData);
static void* PrependSizer(void* handle, void* sizer, int proportion, int flag, int border, void* userData);
static void* PrependCustomBox(void* handle, int width, int height, int proportion, int flag, int border, void* userData);
static void* PrependWindow2(void* handle, void* window, void* sizerFlags);
static void* PrependSizer2(void* handle, void* sizer, void* sizerFlags);
static void* PrependCustomBox2(void* handle, int width, int height, void* sizerFlags);
static void* PrependItem(void* handle, void* item);
static void* PrependSpacer(void* handle, int size);
static void* PrependStretchSpacer(void* handle, int prop);
static void SetContainingWindow(void* handle, void* window);
static void* GetContainingWindow(void* handle);
static bool Remove(void* handle, void* sizer);
static bool Remove2(void* handle, int index);
static bool DetachWindow(void* handle, void* window);
static bool DetachSizer(void* handle, void* sizer);
static bool Detach(void* handle, int index);
static bool ReplaceWindow(void* handle, void* oldwin, void* newwin, bool recursive);
static bool ReplaceSizer(void* handle, void* oldsz, void* newsz, bool recursive);
static bool ReplaceItem(void* handle, int index, void* newitem);
static void Clear(void* handle, bool delete_windows);
static void DeleteWindows(void* handle);
static bool InformFirstDirection(void* handle, int direction, int size, int availableOtherDir);
static void SetMinSize(void* handle, int width, int height);
static bool SetWindowItemMinSize(void* handle, void* window, int width, int height);
static bool SetSizerItemMinSize(void* handle, void* sizer, int width, int height);
static bool SetCustomBoxItemMinSize(void* handle, int index, int width, int height);
static SizeI GetSize(void* handle);
static PointI GetPosition(void* handle);
static SizeI GetMinSize(void* handle);
static SizeI CalcMin(void* handle);
static void RepositionChildren(void* handle, const SizeI& minSize);
static void RecalcSizes(void* handle);
static void Layout(void* handle);
static SizeI ComputeFittingClientSize(void* handle, void* window);
static SizeI ComputeFittingWindowSize(void* handle, void* window);
static SizeI Fit(void* handle, void* window);
static void FitInside(void* handle, void* window);
static void SetSizeHints(void* handle, void* window);
static void* GetChildren(void* handle);
static void SetDimension(void* handle, int x, int y, int width, int height);
static int GetItemCount(void* handle);
static bool IsEmpty(void* handle);
static void* GetItemWindow(void* handle, void* window, bool recursive);
static void* GetItemSizer(void* handle, void* sizer, bool recursive);
static void* GetItem(void* handle, int index);
static void* GetItemById(void* handle, int id, bool recursive);
static bool ShowWindow(void* handle, void* window, bool show, bool recursive);
static bool ShowSizer(void* handle, void* sizer, bool show, bool recursive);
static bool ShowItem(void* handle, int index, bool show);
static bool HideSizer(void* handle, void* sizer, bool recursive);
static bool HideWindow(void* handle, void* window, bool recursive);
static bool Hide(void* handle, int index);
static bool IsShownWindow(void* handle, void* window);
static bool IsShownSizer(void* handle, void* sizer);
static bool IsShown(void* handle, int index);
static void ShowItems(void* handle, bool show);
static void Show(void* handle, bool show);
static bool AreAnyItemsShown(void* handle);
public:
Sizer();
protected:
virtual ~Sizer();
private:
BYREF_ONLY(Sizer);
