// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
public:

int64_t GetStyles();
void SetStyles(int64_t value);


int GetMinimumPaneSize();
void SetMinimumPaneSize(int value);


double GetSashGravity();
void SetSashGravity(double value);


int GetDefaultSashSize();


int GetSashSize();


int GetSplitMode();
void SetSplitMode(int value);


bool GetSashVisible();
void SetSashVisible(bool value);


bool GetIsSplit();


bool GetCanDoubleClick();
void SetCanDoubleClick(bool value);


bool GetCanMoveSplitter();
void SetCanMoveSplitter(bool value);


int GetSashPosition();
void SetSashPosition(int value);


bool GetRedrawOnSashPosition();
void SetRedrawOnSashPosition(bool value);


Control* GetControl1();


Control* GetControl2();

static void* CreateEx(int64_t styles);
static void SetMinSashSize(int value);
void Initialize(Control* window);
bool Replace(Control* winOld, Control* winNew);
bool SplitHorizontally(Control* window1, Control* window2, int sashPosition);
bool SplitVertically(Control* window1, Control* window2, int sashPosition);
bool DoUnsplit(Control* toRemove);
void UpdateSize();
public:
enum class SplitterPanelEvent
{
    SplitterSashPosChanging,
    SplitterSashPosResize,
    SplitterSashPosChanged,
    Unsplit,
    SplitterDoubleClick,
};
typedef void* (*SplitterPanelEventCallbackType)(SplitterPanel* obj, SplitterPanelEvent event, void* param);
static void SetEventCallback(SplitterPanelEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(SplitterPanelEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(SplitterPanelEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static SplitterPanelEventCallbackType eventCallback = nullptr;
public:
SplitterPanel();
protected:
virtual ~SplitterPanel();
private:
BYREF_ONLY(SplitterPanel);
