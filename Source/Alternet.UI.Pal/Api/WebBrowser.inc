// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2023.</auto-generated>
public:

bool GetCanGoBack();


bool GetCanGoForward();


bool GetCanCut();


bool GetCanCopy();


bool GetCanUndo();


bool GetCanRedo();


bool GetIsBusy();


bool GetCanPaste();


float GetZoomFactor();
void SetZoomFactor(float value);


bool GetHasSelection();


string GetSelectedSource();


string GetSelectedText();


string GetPageSource();


string GetPageText();


bool GetAccessToDevToolsEnabled();
void SetAccessToDevToolsEnabled(bool value);


string GetUserAgent();
void SetUserAgent(const string& value);


bool GetContextMenuEnabled();
void SetContextMenuEnabled(bool value);


bool GetEditable();
void SetEditable(bool value);


int GetZoom();
void SetZoom(int value);

string DoCommand(const string& cmdName, const string& cmdParam1, const string& cmdParam2);
static string DoCommandGlobal(const string& cmdName, const string& cmdParam1, const string& cmdParam2);
void* GetNativeBackend();
void GoBack();
void GoForward();
void Stop();
void ClearSelection();
void Copy();
void Paste();
void Cut();
void ClearHistory();
void EnableHistory(bool enable);
void ReloadDefault();
void Reload(bool noCache);
void SelectAll();
void DeleteSelection();
void Undo();
void Redo();
void Print();
void RemoveAllUserScripts();
bool AddScriptMessageHandler(const string& name);
bool RemoveScriptMessageHandler(const string& name);
void RunScriptAsync(const string& javascript, void* clientData);
string GetCurrentTitle();
string GetCurrentURL();
void LoadURL(const string& url);
string RunScript(const string& javascript);
void SetPage(const string& text, const string& baseUrl);
bool AddUserScript(const string& javascript, int injectionTime);
public:
enum class WebBrowserEvent
{
    Navigating,
    Navigated,
    Loaded,
    Error,
    NewWindow,
    TitleChanged,
    FullScreenChanged,
    ScriptMessageReceived,
    ScriptResult,
};
typedef void* (*WebBrowserEventCallbackType)(WebBrowser* obj, WebBrowserEvent event, void* param);
static void SetEventCallback(WebBrowserEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(WebBrowserEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(WebBrowserEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static WebBrowserEventCallbackType eventCallback = nullptr;
public:
WebBrowser();
protected:
virtual ~WebBrowser();
private:
BYREF_ONLY(WebBrowser);
