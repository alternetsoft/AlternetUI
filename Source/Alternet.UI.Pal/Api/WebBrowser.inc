// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
static bool GetIsEdgeBackendEnabled();
static void SetIsEdgeBackendEnabled(bool value);

bool GetHasBorder();
void SetHasBorder(bool value);

bool GetCanGoBack();

bool GetCanGoForward();

bool GetCanCut();

bool GetCanCopy();

bool GetCanUndo();

bool GetCanRedo();

bool GetIsBusy();

bool GetCanPaste();

float GetZoomFactor();
void SetZoomFactor(float value);

bool GetHasSelection();

string GetSelectedSource();

string GetSelectedText();

string GetPageSource();

string GetPageText();

bool GetAccessToDevToolsEnabled();
void SetAccessToDevToolsEnabled(bool value);

int GetPreferredColorScheme();
void SetPreferredColorScheme(int value);

string GetUserAgent();
void SetUserAgent(const string& value);

bool GetContextMenuEnabled();
void SetContextMenuEnabled(bool value);

bool GetEditable();
void SetEditable(bool value);

int GetZoom();
void SetZoom(int value);

bool GetIsEdge();

static void* CreateWebBrowser(const string& url);
static void SetDefaultUserAgent(const string& value);
static void SetDefaultScriptMesageName(const string& value);
static void SetDefaultFSNameMemory(const string& value);
static void SetDefaultFSNameArchive(const string& value);
string DoCommand(const string& cmdName, const string& cmdParam1, const string& cmdParam2);
static string DoCommandGlobal(const string& cmdName, const string& cmdParam1, const string& cmdParam2);
void SetVirtualHostNameToFolderMapping(const string& hostName, const string& folderPath, int accessKind);
void* GetNativeBackend();
void GoBack();
void GoForward();
void Stop();
void ClearSelection();
void Copy();
void Paste();
void Cut();
void ClearHistory();
void EnableHistory(bool enable);
void ReloadDefault();
void Reload(bool noCache);
void SelectAll();
void DeleteSelection();
void Undo();
void Redo();
void Print();
void RemoveAllUserScripts();
bool AddScriptMessageHandler(const string& name);
bool RemoveScriptMessageHandler(const string& name);
void RunScriptAsync(const string& javascript, void* clientData);
void CreateBackend();
static int GetBackendOS();
static void SetEdgePath(const string& path);
string GetCurrentTitle();
string GetCurrentURL();
void LoadURL(const string& url);
string RunScript(const string& javascript);
void SetPage(const string& text, const string& baseUrl);
bool AddUserScript(const string& javascript, int injectionTime);

public:

enum class WebBrowserEvent
{
    Navigating,
    Navigated,
    Loaded,
    Error,
    NewWindow,
    TitleChanged,
    FullScreenChanged,
    ScriptMessageReceived,
    ScriptResult,
    BeforeBrowserCreate,
};

typedef void* (*WebBrowserEventCallbackType)(WebBrowser* obj, WebBrowserEvent event, void* param);

static void SetEventCallback(WebBrowserEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(WebBrowserEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(WebBrowserEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(WebBrowserEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static WebBrowserEventCallbackType eventCallback = nullptr;

public:
WebBrowser();

protected:
virtual ~WebBrowser();

private:
BYREF_ONLY(WebBrowser);
