// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

#pragma once

#include "GraphicsPath.h"
#include "DrawingContext.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API GraphicsPath* GraphicsPath_Create_()
{
    return MarshalExceptions<GraphicsPath*>([&](){
        return new GraphicsPath();
    });
}

ALTERNET_UI_API FillMode GraphicsPath_GetFillMode_(GraphicsPath* obj)
{
    return MarshalExceptions<FillMode>([&](){
        return obj->GetFillMode();
    });
}

ALTERNET_UI_API void GraphicsPath_SetFillMode_(GraphicsPath* obj, FillMode value)
{
    MarshalExceptions<void>([&](){
        obj->SetFillMode(value);
    });
}

ALTERNET_UI_API void GraphicsPath_Initialize_(GraphicsPath* obj, DrawingContext* dc)
{
    MarshalExceptions<void>([&](){
        obj->Initialize(dc);
    });
}

ALTERNET_UI_API void GraphicsPath_AddLines_(GraphicsPath* obj, PointD* points, int pointCount)
{
    MarshalExceptions<void>([&](){
        obj->AddLines(points, pointCount);
    });
}

ALTERNET_UI_API void GraphicsPath_AddLine_(GraphicsPath* obj, PointD pt1, PointD pt2)
{
    MarshalExceptions<void>([&](){
        obj->AddLine(pt1, pt2);
    });
}

ALTERNET_UI_API void GraphicsPath_AddLineTo_(GraphicsPath* obj, PointD pt)
{
    MarshalExceptions<void>([&](){
        obj->AddLineTo(pt);
    });
}

ALTERNET_UI_API void GraphicsPath_AddEllipse_(GraphicsPath* obj, RectD rect)
{
    MarshalExceptions<void>([&](){
        obj->AddEllipse(rect);
    });
}

ALTERNET_UI_API void GraphicsPath_AddBezier_(GraphicsPath* obj, PointD startPoint, PointD controlPoint1, PointD controlPoint2, PointD endPoint)
{
    MarshalExceptions<void>([&](){
        obj->AddBezier(startPoint, controlPoint1, controlPoint2, endPoint);
    });
}

ALTERNET_UI_API void GraphicsPath_AddBezierTo_(GraphicsPath* obj, PointD controlPoint1, PointD controlPoint2, PointD endPoint)
{
    MarshalExceptions<void>([&](){
        obj->AddBezierTo(controlPoint1, controlPoint2, endPoint);
    });
}

ALTERNET_UI_API void GraphicsPath_AddArc_(GraphicsPath* obj, PointD center, float radius, float startAngle, float sweepAngle)
{
    MarshalExceptions<void>([&](){
        obj->AddArc(center, radius, startAngle, sweepAngle);
    });
}

ALTERNET_UI_API void GraphicsPath_AddRectangle_(GraphicsPath* obj, RectD rect)
{
    MarshalExceptions<void>([&](){
        obj->AddRectangle(rect);
    });
}

ALTERNET_UI_API void GraphicsPath_AddRoundedRectangle_(GraphicsPath* obj, RectD rect, float cornerRadius)
{
    MarshalExceptions<void>([&](){
        obj->AddRoundedRectangle(rect, cornerRadius);
    });
}

ALTERNET_UI_API RectD_C GraphicsPath_GetBounds_(GraphicsPath* obj)
{
    return MarshalExceptions<RectD_C>([&](){
        return obj->GetBounds();
    });
}

ALTERNET_UI_API void GraphicsPath_StartFigure_(GraphicsPath* obj, PointD point)
{
    MarshalExceptions<void>([&](){
        obj->StartFigure(point);
    });
}

ALTERNET_UI_API void GraphicsPath_CloseFigure_(GraphicsPath* obj)
{
    MarshalExceptions<void>([&](){
        obj->CloseFigure();
    });
}

