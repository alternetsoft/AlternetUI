// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2023 AlterNET Software.</auto-generated>

#pragma once

#include "GraphicsPath.h"
#include "DrawingContext.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API GraphicsPath* GraphicsPath_Create_()
{
    return new GraphicsPath();
}

ALTERNET_UI_API FillMode GraphicsPath_GetFillMode_(GraphicsPath* obj)
{
    return obj->GetFillMode();
}

ALTERNET_UI_API void GraphicsPath_SetFillMode_(GraphicsPath* obj, FillMode value)
{
    obj->SetFillMode(value);
}

ALTERNET_UI_API void GraphicsPath_Initialize_(GraphicsPath* obj, DrawingContext* dc)
{
    obj->Initialize(dc);
}

ALTERNET_UI_API void GraphicsPath_AddLines_(GraphicsPath* obj, Point* points, int pointsCount)
{
    obj->AddLines(points, pointsCount);
}

ALTERNET_UI_API void GraphicsPath_AddLine_(GraphicsPath* obj, Point pt1, Point pt2)
{
    obj->AddLine(pt1, pt2);
}

ALTERNET_UI_API void GraphicsPath_AddLineTo_(GraphicsPath* obj, Point pt)
{
    obj->AddLineTo(pt);
}

ALTERNET_UI_API void GraphicsPath_AddEllipse_(GraphicsPath* obj, Rect rect)
{
    obj->AddEllipse(rect);
}

ALTERNET_UI_API void GraphicsPath_AddBezier_(GraphicsPath* obj, Point startPoint, Point controlPoint1, Point controlPoint2, Point endPoint)
{
    obj->AddBezier(startPoint, controlPoint1, controlPoint2, endPoint);
}

ALTERNET_UI_API void GraphicsPath_AddBezierTo_(GraphicsPath* obj, Point controlPoint1, Point controlPoint2, Point endPoint)
{
    obj->AddBezierTo(controlPoint1, controlPoint2, endPoint);
}

ALTERNET_UI_API void GraphicsPath_AddArc_(GraphicsPath* obj, Point center, double radius, double startAngle, double sweepAngle)
{
    obj->AddArc(center, radius, startAngle, sweepAngle);
}

ALTERNET_UI_API void GraphicsPath_AddRectangle_(GraphicsPath* obj, Rect rect)
{
    obj->AddRectangle(rect);
}

ALTERNET_UI_API void GraphicsPath_AddRoundedRectangle_(GraphicsPath* obj, Rect rect, double cornerRadius)
{
    obj->AddRoundedRectangle(rect, cornerRadius);
}

ALTERNET_UI_API Rect_C GraphicsPath_GetBounds_(GraphicsPath* obj)
{
    return obj->GetBounds();
}

ALTERNET_UI_API void GraphicsPath_StartFigure_(GraphicsPath* obj, Point point)
{
    obj->StartFigure(point);
}

ALTERNET_UI_API void GraphicsPath_CloseFigure_(GraphicsPath* obj)
{
    obj->CloseFigure();
}

