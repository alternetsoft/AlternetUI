// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2023.</auto-generated>
public:

int GetEventValidationFailureBehavior();
void SetEventValidationFailureBehavior(int value);


int GetEventColumn();


void* GetEventProperty();


string GetEventPropertyName();


string GetEventValidationFailureMessage();
void SetEventValidationFailureMessage(const string& value);


static string GetNameAsLabel();


bool GetHasBorder();
void SetHasBorder(bool value);


int64_t GetCreateStyle();
void SetCreateStyle(int64_t value);

void* GetPropertyCategory(void* id);
void* GetPropertyClientData(void* id);
string GetPropertyHelpString(void* id);
void* GetPropertyImage(void* id);
string GetPropertyLabel(void* id);
void* GetPropertyParent(void* id);
string GetPropertyValueAsString(void* id);
int64_t GetPropertyValueAsLong(void* id);
uint64_t GetPropertyValueAsULong(void* id);
int GetPropertyValueAsInt(void* id);
bool GetPropertyValueAsBool(void* id);
double GetPropertyValueAsDouble(void* id);
DateTime GetPropertyValueAsDateTime(void* id);
bool HideProperty(void* id, bool hide, int flags);
void* Insert(void* priorThis, void* newproperty);
void* InsertByIndex(void* parent, int index, void* newproperty);
bool IsPropertyCategory(void* id);
bool IsPropertyEnabled(void* id);
bool IsPropertyExpanded(void* id);
bool IsPropertyModified(void* id);
bool IsPropertySelected(void* id);
bool IsPropertyShown(void* id);
bool IsPropertyValueUnspecified(void* id);
void LimitPropertyEditing(void* id, bool limit);
void* ReplaceProperty(void* id, void* property);
void SetPropertyBackgroundColor(void* id, const Color& color, int flags);
void SetPropertyColorsToDefault(void* id, int flags);
void SetPropertyTextColor(void* id, const Color& col, int flags);
Color GetPropertyBackgroundColor(void* id);
Color GetPropertyTextColor(void* id);
void SetPropertyClientData(void* id, void* clientData);
void SetPropertyEditor(void* id, void* editor);
void SetPropertyEditorByName(void* id, const string& editorName);
void SetPropertyLabel(void* id, const string& newproplabel);
void SetPropertyName(void* id, const string& newName);
void SetPropertyHelpString(void* id, const string& helpString);
bool SetPropertyMaxLength(void* id, int maxLen);
void SetPropertyValueAsLong(void* id, int64_t value);
void SetPropertyValueAsInt(void* id, int value);
void SetPropertyValueAsDouble(void* id, double value);
void SetPropertyValueAsBool(void* id, bool value);
void SetPropertyValueAsStr(void* id, const string& value);
void SetPropertyValueAsDateTime(void* id, const DateTime& value);
void SetValidationFailureBehavior(int vfbFlags);
void SortChildren(void* id, int flags);
static void* GetEditorByName(const string& editorName);
static void* CreateEx(int64_t styles);
void* CreateStringProperty(const string& label, const string& name, const string& value);
void* CreateBoolProperty(const string& label, const string& name, bool value);
void* CreateIntProperty(const string& label, const string& name, int64_t value);
void* CreateFloatProperty(const string& label, const string& name, double value);
void* CreateUIntProperty(const string& label, const string& name, uint64_t value);
void* CreateLongStringProperty(const string& label, const string& name, const string& value);
void* CreateDateProperty(const string& label, const string& name, const DateTime& value);
void Clear();
void* Append(void* property);
void* CreateEnumProperty(const string& label, const string& name, void* choices, int value);
void* CreateFlagsProperty(const string& label, const string& name, void* choices, int value);
bool ClearSelection(bool validation);
void ClearModifiedStatus();
bool CollapseAll();
bool EditorValidate();
bool ExpandAll(bool expand);
void* CreatePropCategory(const string& label, const string& name);
void* GetFirst(int flags);
void* GetProperty(const string& name);
void* GetPropertyByLabel(const string& label);
void* GetPropertyByName(const string& name);
void* GetPropertyByNameAndSubName(const string& name, const string& subname);
void* GetSelection();
string GetPropertyName(void* property);
static void InitAllTypeHandlers();
static void RegisterAdditionalEditors();
bool RestoreEditableState(const string& src, int restoreStates);
string SaveEditableState(int includedStates);
static void SetBoolChoices(const string& trueChoice, const string& falseChoice);
bool SetColumnProportion(uint32_t column, int proportion);
int GetColumnProportion(uint32_t column);
void Sort(int flags);
void RefreshProperty(void* p);
void* CreateColorProperty(const string& label, const string& name, const Color& value);
void SetPropertyReadOnly(void* id, bool set, int flags);
void SetPropertyValueUnspecified(void* id);
void* AppendIn(void* id, void* newproperty);
void BeginAddChildren(void* id);
bool Collapse(void* id);
void DeleteProperty(void* id);
void* RemoveProperty(void* id);
bool DisableProperty(void* id);
bool EnableProperty(void* id, bool enable);
void EndAddChildren(void* id);
bool Expand(void* id);
void* GetFirstChild(void* id);
public:
enum class PropertyGridEvent
{
    Selected,
    Changed,
    Changing,
    Highlighted,
    RightClick,
    DoubleClick,
    ItemCollapsed,
    ItemExpanded,
    LabelEditBegin,
    LabelEditEnding,
    ColBeginDrag,
    ColDragging,
    ColEndDrag,
};
typedef void* (*PropertyGridEventCallbackType)(PropertyGrid* obj, PropertyGridEvent event, void* param);
static void SetEventCallback(PropertyGridEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(PropertyGridEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(PropertyGridEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static PropertyGridEventCallbackType eventCallback = nullptr;
public:
PropertyGrid();
protected:
virtual ~PropertyGrid();
private:
BYREF_ONLY(PropertyGrid);
