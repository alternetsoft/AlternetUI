// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
int GetEventValidationFailureBehavior();
void SetEventValidationFailureBehavior(int value);

void* GetEventPropValue();

int GetEventColumn();

void* GetEventProperty();

string GetEventPropertyName();

string GetEventValidationFailureMessage();
void SetEventValidationFailureMessage(const string& value);

static string GetNameAsLabel();

bool GetHasBorder();
void SetHasBorder(bool value);

int64_t GetCreateStyle();
void SetCreateStyle(int64_t value);

int64_t GetCreateStyleEx();
void SetCreateStyleEx(int64_t value);

PointI CalcScrolledPosition(const PointI& point);
PointI CalcUnscrolledPosition(const PointI& point);
int GetHitTestColumn(const PointI& point);
void* GetHitTestProp(const PointI& point);
static void* ColorDatabaseCreate();
static void ColorDatabaseDelete(void* handle);
static void ColorDatabaseSetGlobal(void* handle);
static void ColorDatabaseAdd(void* handle, const string& name, const Color& color);
static Color ColorDatabaseFind(void* handle, const string& name);
static string ColorDatabaseFindName(void* handle, const Color& color);
static void KnownColorsClear();
static void KnownColorsAdd(const string& name, const string& title, const Color& value, int knownColor);
static void KnownColorsApply();
static void KnownColorsSetCustomColorTitle(const string& value);
void* GetPropertyValidator(void* prop);
void SetPropertyValidator(void* prop, void* validator);
void SetPropertyFlag(void* prop, int flag, bool value);
static void* CreateEx(int64_t styles);
void AddActionTrigger(int action, int keycode, int modifiers);
void DedicateKey(int keycode);
static void AutoGetTranslation(bool enable);
void CenterSplitter(bool enableAutoResizing);
void ClearActionTriggers(int action);
bool CommitChangesFromEditor(uint32_t flags);
void EditorsValueWasModified();
void EditorsValueWasNotModified();
bool EnableCategories(bool enable);
SizeD FitColumns();
Color GetCaptionBackgroundColor();
Color GetCaptionForegroundColor();
Color GetCellBackgroundColor();
Color GetCellDisabledTextColor();
Color GetCellTextColor();
uint32_t GetColumnCount();
Color GetEmptySpaceColor();
int GetFontHeight();
Color GetLineColor();
Color GetMarginColor();
int GetMarginWidth();
int GetRowHeight();
Color GetSelectionBackgroundColor();
Color GetSelectionForegroundColor();
int GetSplitterPosition(uint32_t splitterIndex);
int GetVerticalSpacing();
bool IsEditorFocused();
bool IsEditorsValueModified();
bool IsAnyModified();
void ResetColors();
void ResetColumnSizes(bool enableAutoResizing);
void MakeColumnEditable(uint32_t column, bool editable);
void BeginLabelEdit(uint32_t column);
void EndLabelEdit(bool commit);
void SetCaptionBackgroundColor(const Color& col);
void SetCaptionTextColor(const Color& col);
void SetCellBackgroundColor(const Color& col);
void SetCellDisabledTextColor(const Color& col);
void SetCellTextColor(const Color& col);
void SetColumnCount(int colCount);
void SetEmptySpaceColor(const Color& col);
void SetLineColor(const Color& col);
void SetMarginColor(const Color& col);
void SetSelectionBackgroundColor(const Color& col);
void SetSelectionTextColor(const Color& col);
void SetSplitterPosition(int newXPos, int col);
string GetUnspecifiedValueText(int argFlags);
void SetVirtualWidth(int width);
void SetSplitterLeft(bool privateChildrenToo);
void SetVerticalSpacing(int vspacing);
bool HasVirtualWidth();
uint32_t GetCommonValueCount();
string GetCommonValueLabel(uint32_t i);
int GetUnspecifiedCommonValue();
void SetUnspecifiedCommonValue(int index);
static bool IsSmallScreen();
void RefreshEditor();
bool WasValueChangedInEvent();
int GetSpacingY();
void SetupTextCtrlValue(const string& text);
bool UnfocusEditor();
void* GetLastItem(int flags);
void* GetRoot();
void* GetSelectedProperty();
bool EnsureVisible(void* propArg);
bool SelectProperty(void* propArg, bool focus);
bool AddToSelection(void* propArg);
bool RemoveFromSelection(void* propArg);
void SetCurrentCategory(void* propArg);
RectI GetImageRect(void* p, int item);
SizeI GetImageSize(void* p, int item);
void* CreateStringProperty(const string& label, const string& name, const string& value);
void* CreateFilenameProperty(const string& label, const string& name, const string& value);
void* CreateDirProperty(const string& label, const string& name, const string& value);
void* CreateImageFilenameProperty(const string& label, const string& name, const string& value);
void* CreateSystemColorProperty(const string& label, const string& name, const Color& value, uint32_t kind);
void* CreateCursorProperty(const string& label, const string& name, int value);
void* CreateBoolProperty(const string& label, const string& name, bool value);
void* CreateIntProperty(const string& label, const string& name, int64_t value);
void* CreateFloatProperty(const string& label, const string& name, double value);
void* CreateUIntProperty(const string& label, const string& name, uint64_t value);
void* CreateLongStringProperty(const string& label, const string& name, const string& value);
void* CreateDateProperty(const string& label, const string& name, const DateTime& value);
void Clear();
void* Append(void* property);
void* CreateEditEnumProperty(const string& label, const string& name, void* choices, const string& value);
void* CreateEnumProperty(const string& label, const string& name, void* choices, int value);
void* CreateFlagsProperty(const string& label, const string& name, void* choices, int value);
bool ClearSelection(bool validation);
void ClearModifiedStatus();
bool CollapseAll();
bool EditorValidate();
bool ExpandAll(bool expand);
void* CreatePropCategory(const string& label, const string& name);
void* GetFirst(int flags);
void* GetProperty(const string& name);
void* GetPropertyByLabel(const string& label);
void* GetPropertyByName(const string& name);
void* GetPropertyByNameAndSubName(const string& name, const string& subname);
void* GetSelection();
string GetPropertyName(void* property);
static void InitAllTypeHandlers();
static void RegisterAdditionalEditors();
bool RestoreEditableState(const string& src, int restoreStates);
string SaveEditableState(int includedStates);
static void SetBoolChoices(const string& trueChoice, const string& falseChoice);
bool SetColumnProportion(uint32_t column, int proportion);
int GetColumnProportion(uint32_t column);
void Sort(int flags);
void RefreshProperty(void* p);
void* CreateColorProperty(const string& label, const string& name, const Color& value);
void SetPropertyReadOnly(void* id, bool set, int flags);
void SetPropertyValueUnspecified(void* id);
void* AppendIn(void* id, void* newproperty);
void BeginAddChildren(void* id);
bool Collapse(void* id);
void DeleteProperty(void* id);
void* RemoveProperty(void* id);
bool DisableProperty(void* id);
bool EnableProperty(void* id, bool enable);
void EndAddChildren(void* id);
bool Expand(void* id);
void* GetFirstChild(void* id);
void* GetPropertyCategory(void* id);
void* GetPropertyClientData(void* id);
string GetPropertyHelpString(void* id);
void* GetPropertyImage(void* id);
string GetPropertyLabel(void* id);
void* GetPropertyParent(void* id);
void* GetPropertyValueAsVariant(void* id);
string GetPropertyValueAsString(void* id);
int64_t GetPropertyValueAsLong(void* id);
uint64_t GetPropertyValueAsULong(void* id);
int GetPropertyValueAsInt(void* id);
bool GetPropertyValueAsBool(void* id);
double GetPropertyValueAsDouble(void* id);
DateTime GetPropertyValueAsDateTime(void* id);
bool HideProperty(void* id, bool hide, int flags);
void* Insert(void* priorThis, void* newproperty);
void* InsertByIndex(void* parent, int index, void* newproperty);
bool IsPropertyCategory(void* id);
bool IsPropertyEnabled(void* id);
bool IsPropertyExpanded(void* id);
bool IsPropertyModified(void* id);
bool IsPropertySelected(void* id);
bool IsPropertyShown(void* id);
bool IsPropertyValueUnspecified(void* id);
void LimitPropertyEditing(void* id, bool limit);
void* ReplaceProperty(void* id, void* property);
void SetPropertyBackgroundColor(void* id, const Color& color, int flags);
void SetPropertyColorsToDefault(void* id, int flags);
void SetPropertyTextColor(void* id, const Color& col, int flags);
Color GetPropertyBackgroundColor(void* id);
Color GetPropertyTextColor(void* id);
void SetPropertyClientData(void* id, void* clientData);
void SetPropertyEditor(void* id, void* editor);
void SetPropertyEditorByName(void* id, const string& editorName);
void SetPropertyLabel(void* id, const string& newproplabel);
void SetPropertyName(void* id, const string& newName);
void SetPropertyHelpString(void* id, const string& helpString);
bool SetPropertyMaxLength(void* id, int maxLen);
void SetPropertyValueAsLong(void* id, int64_t value);
void SetPropertyValueAsInt(void* id, int value);
void SetPropertyValueAsDouble(void* id, double value);
void SetPropertyValueAsBool(void* id, bool value);
void SetPropertyValueAsStr(void* id, const string& value);
void SetPropertyValueAsVariant(void* id, void* variant);
void SetPropertyValueAsDateTime(void* id, const DateTime& value);
void SetValidationFailureBehavior(int vfbFlags);
void SortChildren(void* id, int flags);
static void* GetEditorByName(const string& editorName);
bool ChangePropertyValue(void* id, void* variant);
void SetPropertyImage(void* id, ImageSet* bmp);
void SetPropertyAttribute(void* id, const string& attrName, void* variant, int64_t argFlags);
void SetPropertyAttributeAll(const string& attrName, void* variant);

public:

enum class PropertyGridEvent
{
    Selected,
    Changed,
    Changing,
    Highlighted,
    ButtonClick,
    RightClick,
    DoubleClick,
    ItemCollapsed,
    ItemExpanded,
    LabelEditBegin,
    LabelEditEnding,
    ColBeginDrag,
    ColDragging,
    ColEndDrag,
};

typedef void* (*PropertyGridEventCallbackType)(PropertyGrid* obj, PropertyGridEvent event, void* param);

static void SetEventCallback(PropertyGridEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(PropertyGridEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(PropertyGridEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(PropertyGridEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static PropertyGridEventCallbackType eventCallback = nullptr;

public:
PropertyGrid();

protected:
virtual ~PropertyGrid();

private:
BYREF_ONLY(PropertyGrid);
