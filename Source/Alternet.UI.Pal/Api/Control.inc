// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2022.</auto-generated>
public:

Control* GetParentRefCounted();


optional<string> GetToolTip();
void SetToolTip(optional<string> value);


bool GetAllowDrop();
void SetAllowDrop(bool value);


Size GetSize();
void SetSize(const Size& value);


Point GetLocation();
void SetLocation(const Point& value);


Rect GetBounds();
void SetBounds(const Rect& value);


Size GetClientSize();
void SetClientSize(const Size& value);


virtual Thickness GetIntrinsicLayoutPadding();


virtual Thickness GetIntrinsicPreferredSizePadding();


bool GetVisible();
void SetVisible(bool value);


virtual bool GetEnabled();
virtual void SetEnabled(bool value);


bool GetUserPaint();
void SetUserPaint(bool value);


bool GetIsMouseOver();


bool GetHasWindowCreated();


Color GetBackgroundColor();
void SetBackgroundColor(const Color& value);


Color GetForegroundColor();
void SetForegroundColor(const Color& value);


Font* GetFont();
void SetFont(Font* value);


bool GetIsMouseCaptured();


bool GetTabStop();
void SetTabStop(bool value);


bool GetIsFocused();


void* GetHandle();


bool GetIsScrollable();
void SetIsScrollable(bool value);

bool IsScrollBarVisible(ScrollBarOrientation orientation);
int GetScrollBarValue(ScrollBarOrientation orientation);
int GetScrollBarLargeChange(ScrollBarOrientation orientation);
int GetScrollBarMaximum(ScrollBarOrientation orientation);
void SetMouseCapture(bool value);
void AddChild(Control* control);
void RemoveChild(Control* control);
void Invalidate();
void Update();
virtual Size GetPreferredSize(const Size& availableSize);
DragDropEffects DoDragDrop(UnmanagedDataObject* data, DragDropEffects allowedEffects);
DrawingContext* OpenPaintDrawingContext();
DrawingContext* OpenClientDrawingContext();
void BeginUpdate();
void EndUpdate();
static Control* HitTest(const Point& screenPoint);
Point ClientToScreen(const Point& point);
Point ScreenToClient(const Point& point);
Int32Point ScreenToDevice(const Point& point);
Point DeviceToScreen(const Int32Point& point);
static Control* GetFocusedControl();
bool SetFocus();
void FocusNextControl(bool forward, bool nested);
void BeginInit();
void EndInit();
void Destroy();
void SaveScreenshot(const string& fileName);
void SendSizeEvent();
void SetScrollBar(ScrollBarOrientation orientation, bool visible, int value, int largeChange, int maximum);
public:
enum class ControlEvent
{
    Paint,
    MouseEnter,
    MouseLeave,
    MouseClick,
    VisibleChanged,
    MouseCaptureLost,
    Destroyed,
    DragDrop,
    DragOver,
    DragEnter,
    DragLeave,
    GotFocus,
    LostFocus,
    VerticalScrollBarValueChanged,
    HorizontalScrollBarValueChanged,
};
typedef void* (*ControlEventCallbackType)(Control* obj, ControlEvent event, void* param);
static void SetEventCallback(ControlEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(ControlEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(ControlEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static ControlEventCallbackType eventCallback = nullptr;
protected:
Control();
protected:
virtual ~Control();
private:
BYREF_ONLY(Control);
