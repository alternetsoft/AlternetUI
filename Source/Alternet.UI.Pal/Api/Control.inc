// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
public:

bool GetProcessIdle();
void SetProcessIdle(bool value);


bool GetProcessUIUpdates();
void SetProcessUIUpdates(bool value);


bool GetIsBold();
void SetIsBold(bool value);


bool GetAcceptsFocus();
void SetAcceptsFocus(bool value);


bool GetAcceptsFocusFromKeyboard();
void SetAcceptsFocusFromKeyboard(bool value);


bool GetAcceptsFocusRecursively();
void SetAcceptsFocusRecursively(bool value);


bool GetAcceptsFocusAll();
void SetAcceptsFocusAll(bool value);


int GetBorderStyle();
void SetBorderStyle(int value);


int GetLayoutDirection();
void SetLayoutDirection(int value);


string GetName();
void SetName(const string& value);


int GetId();
void SetId(int value);


bool GetIsActive();


bool GetIsHandleCreated();


bool GetIsWxWidgetCreated();


void* GetHandle();


void* GetWxWidget();


bool GetIsScrollable();
void SetIsScrollable(bool value);


bool GetIsMouseCaptured();


bool GetTabStop();
void SetTabStop(bool value);


bool GetIsFocused();


bool GetIsFocusable();


bool GetCanAcceptFocus();


Control* GetParentRefCounted();


optional<string> GetToolTip();
void SetToolTip(optional<string> value);


bool GetAllowDrop();
void SetAllowDrop(bool value);


SizeD GetSize();
void SetSize(const SizeD& value);


PointD GetLocation();
void SetLocation(const PointD& value);


RectD GetBounds();
void SetBounds(const RectD& value);


SizeD GetClientSize();
void SetClientSize(const SizeD& value);


virtual Thickness GetIntrinsicLayoutPadding();


virtual Thickness GetIntrinsicPreferredSizePadding();


bool GetVisible();
void SetVisible(bool value);


virtual bool GetEnabled();
virtual void SetEnabled(bool value);


bool GetUserPaint();
void SetUserPaint(bool value);


bool GetIsMouseOver();


bool GetHasWindowCreated();


Color GetBackgroundColor();
void SetBackgroundColor(const Color& value);


Color GetForegroundColor();
void SetForegroundColor(const Color& value);


Font* GetFont();
void SetFont(Font* value);


SizeD GetMinimumSize();
void SetMinimumSize(const SizeD& value);


SizeD GetMaximumSize();
void SetMaximumSize(const SizeD& value);

int GetScrollBarLargeChange(ScrollBarOrientation orientation);
int GetScrollBarMaximum(ScrollBarOrientation orientation);
int GetScrollBarEvtKind();
int GetScrollBarEvtPosition();
static Control* HitTest(const PointD& screenPoint);
static Control* GetFocusedControl();
static void NotifyCaptureLost();
void Freeze();
void Thaw();
void ShowPopupMenu(void* menu, double x, double y);
void BeginIgnoreRecreate();
void EndIgnoreRecreate();
SizeD GetDPI();
void SetMouseCapture(bool value);
void AddChild(Control* control);
void RemoveChild(Control* control);
void Invalidate();
void Update();
virtual SizeD GetPreferredSize(const SizeD& availableSize);
DragDropEffects DoDragDrop(UnmanagedDataObject* data, DragDropEffects allowedEffects);
DrawingContext* OpenPaintDrawingContext();
DrawingContext* OpenClientDrawingContext();
void BeginUpdate();
void EndUpdate();
void RecreateWindow();
void ResetBackgroundColor();
void ResetForegroundColor();
PointD ClientToScreen(const PointD& point);
PointD ScreenToClient(const PointD& point);
PointI ScreenToDevice(const PointD& point);
PointD DeviceToScreen(const PointI& point);
bool SetFocus();
void FocusNextControl(bool forward, bool nested);
void BeginInit();
void EndInit();
void Destroy();
void SaveScreenshot(const string& fileName);
void SendSizeEvent();
void SendMouseDownEvent(int x, int y);
void SendMouseUpEvent(int x, int y);
void SetBoundsEx(const RectD& rect, int flags);
void* GetContainingSizer();
void* GetSizer();
void SetSizer(void* sizer, bool deleteOld);
void SetSizerAndFit(void* sizer, bool deleteOld);
void SetScrollBar(ScrollBarOrientation orientation, bool visible, int value, int largeChange, int maximum);
bool IsScrollBarVisible(ScrollBarOrientation orientation);
int GetScrollBarValue(ScrollBarOrientation orientation);
void CenterOnParent(int orientation);
void RefreshRect(const RectD& rect, bool eraseBackground);
void Raise();
void Lower();
void DisableRecreate();
void EnableRecreate();
void UnsetToolTip();
bool IsTransparentBackgroundSupported();
bool SetBackgroundStyle(int style);
int GetBackgroundStyle();
void AlwaysShowScrollbars(bool hflag, bool vflag);
Color GetDefaultAttributesBgColor();
Color GetDefaultAttributesFgColor();
Font* GetDefaultAttributesFont();
static Color GetClassDefaultAttributesBgColor(int controlType, int windowVariant);
static Color GetClassDefaultAttributesFgColor(int controlType, int windowVariant);
static Font* GetClassDefaultAttributesFont(int controlType, int windowVariant);
static int DrawingFromDip(double value, void* window);
static double DrawingDPIScaleFactor(void* window);
static double DrawingToDip(int value, void* window);
static double DrawingFromDipF(double value, void* window);
void SetCursor(void* handle);
public:
enum class ControlEvent
{
    Idle,
    Paint,
    MouseEnter,
    MouseLeave,
    MouseClick,
    VisibleChanged,
    MouseCaptureLost,
    Destroyed,
    GotFocus,
    LostFocus,
    DragLeave,
    DragDrop,
    DragOver,
    DragEnter,
    VerticalScrollBarValueChanged,
    HorizontalScrollBarValueChanged,
    SizeChanged,
    Activated,
    Deactivated,
};
typedef void* (*ControlEventCallbackType)(Control* obj, ControlEvent event, void* param);
static void SetEventCallback(ControlEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(ControlEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(ControlEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static ControlEventCallbackType eventCallback = nullptr;
protected:
Control();
protected:
virtual ~Control();
private:
BYREF_ONLY(Control);
