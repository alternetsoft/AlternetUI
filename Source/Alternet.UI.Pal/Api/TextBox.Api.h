// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>

#pragma once

#include "TextBox.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API TextBox* TextBox_Create_()
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<TextBox*>([&](){
    #endif
        return new TextBox();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int TextBox_GetTextWrap_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int>([&](){
    #endif
        return obj->GetTextWrap();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetTextWrap_(TextBox* obj, int value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetTextWrap(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int TextBox_GetTextAlign_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int>([&](){
    #endif
        return obj->GetTextAlign();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetTextAlign_(TextBox* obj, int value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetTextAlign(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API char16_t* TextBox_GetText_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<char16_t*>([&](){
    #endif
        return AllocPInvokeReturnString(obj->GetText());
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetText_(TextBox* obj, const char16_t* value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetText(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API char16_t* TextBox_GetReportedUrl_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<char16_t*>([&](){
    #endif
        return AllocPInvokeReturnString(obj->GetReportedUrl());
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetEditControlOnly_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetEditControlOnly();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetEditControlOnly_(TextBox* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetEditControlOnly(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetReadOnly_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetReadOnly();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetReadOnly_(TextBox* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetReadOnly(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void* TextBox_GetValidator_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<void*>([&](){
    #endif
        return obj->GetValidator();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetValidator_(TextBox* obj, void* value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetValidator(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetMultiline_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetMultiline();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetMultiline_(TextBox* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetMultiline(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetIsRichEdit_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetIsRichEdit();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetIsRichEdit_(TextBox* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetIsRichEdit(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetHasSelection_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetHasSelection();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetIsModified_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetIsModified();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetIsModified_(TextBox* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetIsModified(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetCanCopy_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetCanCopy();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetCanCut_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetCanCut();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetCanPaste_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetCanPaste();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetCanRedo_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetCanRedo();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetCanUndo_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetCanUndo();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetIsEmpty_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetIsEmpty();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API char16_t* TextBox_GetEmptyTextHint_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<char16_t*>([&](){
    #endif
        return AllocPInvokeReturnString(obj->GetEmptyTextHint());
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetEmptyTextHint_(TextBox* obj, const char16_t* value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetEmptyTextHint(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetHideSelection_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetHideSelection();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetHideSelection_(TextBox* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetHideSelection(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetProcessTab_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetProcessTab();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetProcessTab_(TextBox* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetProcessTab(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetProcessEnter_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetProcessEnter();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetProcessEnter_(TextBox* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetProcessEnter(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetIsPassword_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetIsPassword();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetIsPassword_(TextBox* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetIsPassword(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetAutoUrl_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetAutoUrl();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetAutoUrl_(TextBox* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetAutoUrl(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_GetHideVertScrollbar_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetHideVertScrollbar();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetHideVertScrollbar_(TextBox* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetHideVertScrollbar(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void* TextBox_CreateTextBox_(void* validator)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<void*>([&](){
    #endif
        return TextBox::CreateTextBox(validator);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int TextBox_GetLineLength_(TextBox* obj, int64_t lineNo)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int>([&](){
    #endif
        return obj->GetLineLength(lineNo);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API char16_t* TextBox_GetLineText_(TextBox* obj, int64_t lineNo)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<char16_t*>([&](){
    #endif
        return AllocPInvokeReturnString(obj->GetLineText(lineNo));
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int TextBox_GetNumberOfLines_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int>([&](){
    #endif
        return obj->GetNumberOfLines();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API PointI_C TextBox_PositionToXY_(TextBox* obj, int64_t pos)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<PointI_C>([&](){
    #endif
        return obj->PositionToXY(pos);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API PointD_C TextBox_PositionToCoords_(TextBox* obj, int64_t pos)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<PointD_C>([&](){
    #endif
        return obj->PositionToCoords(pos);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_ShowPosition_(TextBox* obj, int64_t pos)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->ShowPosition(pos);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int64_t TextBox_XYToPosition_(TextBox* obj, int64_t x, int64_t y)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int64_t>([&](){
    #endif
        return obj->XYToPosition(x, y);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void* TextBox_GetDefaultStyle_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<void*>([&](){
    #endif
        return obj->GetDefaultStyle();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void* TextBox_GetStyle_(TextBox* obj, int64_t position)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<void*>([&](){
    #endif
        return obj->GetStyle(position);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_SetDefaultStyle_(TextBox* obj, void* style)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->SetDefaultStyle(style);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_SetStyle_(TextBox* obj, int64_t start, int64_t end, void* style)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->SetStyle(start, end, style);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_Clear_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->Clear();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_Copy_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->Copy();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_Cut_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->Cut();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_AppendText_(TextBox* obj, const char16_t* text)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->AppendText(text);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int64_t TextBox_GetInsertionPoint_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int64_t>([&](){
    #endif
        return obj->GetInsertionPoint();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_Paste_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->Paste();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_Redo_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->Redo();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_Remove_(TextBox* obj, int64_t from, int64_t to)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->Remove(from, to);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_Replace_(TextBox* obj, int64_t from, int64_t to, const char16_t* value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->Replace(from, to, value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetInsertionPoint_(TextBox* obj, int64_t pos)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetInsertionPoint(pos);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetInsertionPointEnd_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetInsertionPointEnd();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetMaxLength_(TextBox* obj, uint64_t len)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetMaxLength(len);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetSelection_(TextBox* obj, int64_t from, int64_t to)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetSelection(from, to);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SelectAll_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SelectAll();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SelectNone_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SelectNone();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_Undo_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->Undo();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_WriteText_(TextBox* obj, const char16_t* text)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->WriteText(text);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API char16_t* TextBox_GetRange_(TextBox* obj, int64_t from, int64_t to)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<char16_t*>([&](){
    #endif
        return AllocPInvokeReturnString(obj->GetRange(from, to));
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API char16_t* TextBox_GetStringSelection_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<char16_t*>([&](){
    #endif
        return AllocPInvokeReturnString(obj->GetStringSelection());
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_EmptyUndoBuffer_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->EmptyUndoBuffer();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool TextBox_IsValidPosition_(TextBox* obj, int64_t pos)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->IsValidPosition(pos);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int64_t TextBox_GetLastPosition_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int64_t>([&](){
    #endif
        return obj->GetLastPosition();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int64_t TextBox_GetSelectionStart_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int64_t>([&](){
    #endif
        return obj->GetSelectionStart();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int64_t TextBox_GetSelectionEnd_(TextBox* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int64_t>([&](){
    #endif
        return obj->GetSelectionEnd();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void TextBox_SetEventCallback_(TextBox::TextBoxEventCallbackType callback)
{
    TextBox::SetEventCallback(callback);
}

