// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2023 AlterNET Software.</auto-generated>

#pragma once

#include "TextBox.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API TextBox* TextBox_Create_()
{
    return new TextBox();
}

ALTERNET_UI_API int TextBox_GetTextWrap_(TextBox* obj)
{
    return obj->GetTextWrap();
}

ALTERNET_UI_API void TextBox_SetTextWrap_(TextBox* obj, int value)
{
    obj->SetTextWrap(value);
}

ALTERNET_UI_API int TextBox_GetTextAlign_(TextBox* obj)
{
    return obj->GetTextAlign();
}

ALTERNET_UI_API void TextBox_SetTextAlign_(TextBox* obj, int value)
{
    obj->SetTextAlign(value);
}

ALTERNET_UI_API char16_t* TextBox_GetText_(TextBox* obj)
{
    return AllocPInvokeReturnString(obj->GetText());
}

ALTERNET_UI_API void TextBox_SetText_(TextBox* obj, const char16_t* value)
{
    obj->SetText(value);
}

ALTERNET_UI_API char16_t* TextBox_GetReportedUrl_(TextBox* obj)
{
    return AllocPInvokeReturnString(obj->GetReportedUrl());
}

ALTERNET_UI_API c_bool TextBox_GetEditControlOnly_(TextBox* obj)
{
    return obj->GetEditControlOnly();
}

ALTERNET_UI_API void TextBox_SetEditControlOnly_(TextBox* obj, c_bool value)
{
    obj->SetEditControlOnly(value);
}

ALTERNET_UI_API c_bool TextBox_GetReadOnly_(TextBox* obj)
{
    return obj->GetReadOnly();
}

ALTERNET_UI_API void TextBox_SetReadOnly_(TextBox* obj, c_bool value)
{
    obj->SetReadOnly(value);
}

ALTERNET_UI_API c_bool TextBox_GetMultiline_(TextBox* obj)
{
    return obj->GetMultiline();
}

ALTERNET_UI_API void TextBox_SetMultiline_(TextBox* obj, c_bool value)
{
    obj->SetMultiline(value);
}

ALTERNET_UI_API c_bool TextBox_GetIsRichEdit_(TextBox* obj)
{
    return obj->GetIsRichEdit();
}

ALTERNET_UI_API void TextBox_SetIsRichEdit_(TextBox* obj, c_bool value)
{
    obj->SetIsRichEdit(value);
}

ALTERNET_UI_API c_bool TextBox_GetHasSelection_(TextBox* obj)
{
    return obj->GetHasSelection();
}

ALTERNET_UI_API c_bool TextBox_GetIsModified_(TextBox* obj)
{
    return obj->GetIsModified();
}

ALTERNET_UI_API void TextBox_SetIsModified_(TextBox* obj, c_bool value)
{
    obj->SetIsModified(value);
}

ALTERNET_UI_API c_bool TextBox_GetCanCopy_(TextBox* obj)
{
    return obj->GetCanCopy();
}

ALTERNET_UI_API c_bool TextBox_GetCanCut_(TextBox* obj)
{
    return obj->GetCanCut();
}

ALTERNET_UI_API c_bool TextBox_GetCanPaste_(TextBox* obj)
{
    return obj->GetCanPaste();
}

ALTERNET_UI_API c_bool TextBox_GetCanRedo_(TextBox* obj)
{
    return obj->GetCanRedo();
}

ALTERNET_UI_API c_bool TextBox_GetCanUndo_(TextBox* obj)
{
    return obj->GetCanUndo();
}

ALTERNET_UI_API c_bool TextBox_GetIsEmpty_(TextBox* obj)
{
    return obj->GetIsEmpty();
}

ALTERNET_UI_API char16_t* TextBox_GetEmptyTextHint_(TextBox* obj)
{
    return AllocPInvokeReturnString(obj->GetEmptyTextHint());
}

ALTERNET_UI_API void TextBox_SetEmptyTextHint_(TextBox* obj, const char16_t* value)
{
    obj->SetEmptyTextHint(value);
}

ALTERNET_UI_API c_bool TextBox_GetHideSelection_(TextBox* obj)
{
    return obj->GetHideSelection();
}

ALTERNET_UI_API void TextBox_SetHideSelection_(TextBox* obj, c_bool value)
{
    obj->SetHideSelection(value);
}

ALTERNET_UI_API c_bool TextBox_GetProcessTab_(TextBox* obj)
{
    return obj->GetProcessTab();
}

ALTERNET_UI_API void TextBox_SetProcessTab_(TextBox* obj, c_bool value)
{
    obj->SetProcessTab(value);
}

ALTERNET_UI_API c_bool TextBox_GetProcessEnter_(TextBox* obj)
{
    return obj->GetProcessEnter();
}

ALTERNET_UI_API void TextBox_SetProcessEnter_(TextBox* obj, c_bool value)
{
    obj->SetProcessEnter(value);
}

ALTERNET_UI_API c_bool TextBox_GetIsPassword_(TextBox* obj)
{
    return obj->GetIsPassword();
}

ALTERNET_UI_API void TextBox_SetIsPassword_(TextBox* obj, c_bool value)
{
    obj->SetIsPassword(value);
}

ALTERNET_UI_API c_bool TextBox_GetAutoUrl_(TextBox* obj)
{
    return obj->GetAutoUrl();
}

ALTERNET_UI_API void TextBox_SetAutoUrl_(TextBox* obj, c_bool value)
{
    obj->SetAutoUrl(value);
}

ALTERNET_UI_API c_bool TextBox_GetHideVertScrollbar_(TextBox* obj)
{
    return obj->GetHideVertScrollbar();
}

ALTERNET_UI_API void TextBox_SetHideVertScrollbar_(TextBox* obj, c_bool value)
{
    obj->SetHideVertScrollbar(value);
}

ALTERNET_UI_API void* TextBox_CreateTextBox_(void* validator)
{
    return TextBox::CreateTextBox(validator);
}

ALTERNET_UI_API int TextBox_GetLineLength_(TextBox* obj, int64_t lineNo)
{
    return obj->GetLineLength(lineNo);
}

ALTERNET_UI_API char16_t* TextBox_GetLineText_(TextBox* obj, int64_t lineNo)
{
    return AllocPInvokeReturnString(obj->GetLineText(lineNo));
}

ALTERNET_UI_API int TextBox_GetNumberOfLines_(TextBox* obj)
{
    return obj->GetNumberOfLines();
}

ALTERNET_UI_API Point_C TextBox_PositionToXY_(TextBox* obj, int64_t pos)
{
    return obj->PositionToXY(pos);
}

ALTERNET_UI_API Point_C TextBox_PositionToCoords_(TextBox* obj, int64_t pos)
{
    return obj->PositionToCoords(pos);
}

ALTERNET_UI_API void TextBox_ShowPosition_(TextBox* obj, int64_t pos)
{
    obj->ShowPosition(pos);
}

ALTERNET_UI_API int64_t TextBox_XYToPosition_(TextBox* obj, int64_t x, int64_t y)
{
    return obj->XYToPosition(x, y);
}

ALTERNET_UI_API void* TextBox_GetDefaultStyle_(TextBox* obj)
{
    return obj->GetDefaultStyle();
}

ALTERNET_UI_API void* TextBox_GetStyle_(TextBox* obj, int64_t position)
{
    return obj->GetStyle(position);
}

ALTERNET_UI_API c_bool TextBox_SetDefaultStyle_(TextBox* obj, void* style)
{
    return obj->SetDefaultStyle(style);
}

ALTERNET_UI_API c_bool TextBox_SetStyle_(TextBox* obj, int64_t start, int64_t end, void* style)
{
    return obj->SetStyle(start, end, style);
}

ALTERNET_UI_API void TextBox_Clear_(TextBox* obj)
{
    obj->Clear();
}

ALTERNET_UI_API void TextBox_Copy_(TextBox* obj)
{
    obj->Copy();
}

ALTERNET_UI_API void TextBox_Cut_(TextBox* obj)
{
    obj->Cut();
}

ALTERNET_UI_API void TextBox_AppendText_(TextBox* obj, const char16_t* text)
{
    obj->AppendText(text);
}

ALTERNET_UI_API int64_t TextBox_GetInsertionPoint_(TextBox* obj)
{
    return obj->GetInsertionPoint();
}

ALTERNET_UI_API void TextBox_Paste_(TextBox* obj)
{
    obj->Paste();
}

ALTERNET_UI_API void TextBox_Redo_(TextBox* obj)
{
    obj->Redo();
}

ALTERNET_UI_API void TextBox_Remove_(TextBox* obj, int64_t from, int64_t to)
{
    obj->Remove(from, to);
}

ALTERNET_UI_API void TextBox_Replace_(TextBox* obj, int64_t from, int64_t to, const char16_t* value)
{
    obj->Replace(from, to, value);
}

ALTERNET_UI_API void TextBox_SetInsertionPoint_(TextBox* obj, int64_t pos)
{
    obj->SetInsertionPoint(pos);
}

ALTERNET_UI_API void TextBox_SetInsertionPointEnd_(TextBox* obj)
{
    obj->SetInsertionPointEnd();
}

ALTERNET_UI_API void TextBox_SetMaxLength_(TextBox* obj, uint64_t len)
{
    obj->SetMaxLength(len);
}

ALTERNET_UI_API void TextBox_SetSelection_(TextBox* obj, int64_t from, int64_t to)
{
    obj->SetSelection(from, to);
}

ALTERNET_UI_API void TextBox_SelectAll_(TextBox* obj)
{
    obj->SelectAll();
}

ALTERNET_UI_API void TextBox_SelectNone_(TextBox* obj)
{
    obj->SelectNone();
}

ALTERNET_UI_API void TextBox_Undo_(TextBox* obj)
{
    obj->Undo();
}

ALTERNET_UI_API void TextBox_WriteText_(TextBox* obj, const char16_t* text)
{
    obj->WriteText(text);
}

ALTERNET_UI_API char16_t* TextBox_GetRange_(TextBox* obj, int64_t from, int64_t to)
{
    return AllocPInvokeReturnString(obj->GetRange(from, to));
}

ALTERNET_UI_API char16_t* TextBox_GetStringSelection_(TextBox* obj)
{
    return AllocPInvokeReturnString(obj->GetStringSelection());
}

ALTERNET_UI_API void TextBox_EmptyUndoBuffer_(TextBox* obj)
{
    obj->EmptyUndoBuffer();
}

ALTERNET_UI_API c_bool TextBox_IsValidPosition_(TextBox* obj, int64_t pos)
{
    return obj->IsValidPosition(pos);
}

ALTERNET_UI_API int64_t TextBox_GetLastPosition_(TextBox* obj)
{
    return obj->GetLastPosition();
}

ALTERNET_UI_API int64_t TextBox_GetSelectionStart_(TextBox* obj)
{
    return obj->GetSelectionStart();
}

ALTERNET_UI_API int64_t TextBox_GetSelectionEnd_(TextBox* obj)
{
    return obj->GetSelectionEnd();
}

ALTERNET_UI_API void TextBox_SetEventCallback_(TextBox::TextBoxEventCallbackType callback)
{
    TextBox::SetEventCallback(callback);
}

