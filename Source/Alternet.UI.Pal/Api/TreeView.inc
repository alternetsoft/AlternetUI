// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
int64_t GetCreateStyle();
void SetCreateStyle(int64_t value);

bool GetHideRoot();
void SetHideRoot(bool value);

bool GetVariableRowHeight();
void SetVariableRowHeight(bool value);

bool GetTwistButtons();
void SetTwistButtons(bool value);

uint32_t GetStateImageSpacing();
void SetStateImageSpacing(uint32_t value);

uint32_t GetIndentation();
void SetIndentation(uint32_t value);

bool GetRowLines();
void SetRowLines(bool value);

bool GetHasBorder();
void SetHasBorder(bool value);

ImageList* GetImageList();
void SetImageList(ImageList* value);

void* GetRootItem();

TreeViewSelectionMode GetSelectionMode();
void SetSelectionMode(TreeViewSelectionMode value);

bool GetShowLines();
void SetShowLines(bool value);

bool GetShowRootLines();
void SetShowRootLines(bool value);

bool GetShowExpandButtons();
void SetShowExpandButtons(bool value);

void* GetTopItem();

bool GetFullRowSelect();
void SetFullRowSelect(bool value);

bool GetAllowLabelEdit();
void SetAllowLabelEdit(bool value);

void* OpenSelectedItemsArray();
int GetSelectedItemsItemCount(void* array);
void* GetSelectedItemsItemAt(void* array, int index);
void CloseSelectedItemsArray(void* array);
void SetNodeUniqueId(void* node, int64_t uniqueId);
int64_t GetNodeUniqueId(void* node);
void MakeAsListBox();
int GetItemCount(void* parentItem);
void* InsertItem(void* parentItem, void* insertAfter, const string& text, int imageIndex, bool parentIsExpanded);
void RemoveItem(void* item);
void ClearItems(void* parentItem);
void ClearSelected();
void SetSelected(void* item, bool value);
void ExpandAll();
void CollapseAll();
void* ItemHitTest(const PointD& point);
TreeViewHitTestLocations GetHitTestResultLocations(void* hitTestResult);
void* GetHitTestResultItem(void* hitTestResult);
void FreeHitTestResult(void* hitTestResult);
bool IsItemSelected(void* item);
void SetFocused(void* item, bool value);
bool IsItemFocused(void* item);
void SetItemText(void* item, const string& text);
string GetItemText(void* item);
void SetItemImageIndex(void* item, int imageIndex);
int GetItemImageIndex(void* item);
void BeginLabelEdit(void* item);
void EndLabelEdit(void* item, bool cancel);
void ExpandAllChildren(void* item);
void CollapseAllChildren(void* item);
void EnsureVisible(void* item);
void ScrollIntoView(void* item);

public:

enum class TreeViewEvent
{
    SelectionChanged,
    ControlRecreated,
    ItemExpanded,
    ItemCollapsed,
    ItemExpanding,
    ItemCollapsing,
    BeforeItemLabelEdit,
    AfterItemLabelEdit,
};

typedef void* (*TreeViewEventCallbackType)(TreeView* obj, TreeViewEvent event, void* param);

static void SetEventCallback(TreeViewEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(TreeViewEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(TreeViewEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(TreeViewEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static TreeViewEventCallbackType eventCallback = nullptr;

public:
TreeView();

protected:
virtual ~TreeView();

private:
BYREF_ONLY(TreeView);
