// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

#pragma once

#include "GLControl.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API GLControl* GLControl_Create_()
{
    return MarshalExceptions<GLControl*>([&](){
        return new GLControl();
    });
}

ALTERNET_UI_API SizeI_C GLControl_GetViewportSize_(GLControl* obj)
{
    return MarshalExceptions<SizeI_C>([&](){
        return obj->GetViewportSize();
    });
}

ALTERNET_UI_API c_bool GLControl_GetDefaultPaintUsed_(GLControl* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetDefaultPaintUsed();
    });
}

ALTERNET_UI_API void GLControl_SetDefaultPaintUsed_(GLControl* obj, c_bool value)
{
    MarshalExceptions<void>([&](){
        obj->SetDefaultPaintUsed(value);
    });
}

ALTERNET_UI_API c_bool GLControl_IsOpenGLAvailable_()
{
    return MarshalExceptions<c_bool>([&](){
        return GLControl::IsOpenGLAvailable();
    });
}

ALTERNET_UI_API void GLControl_CreateDummyOpenGlCanvas_()
{
    MarshalExceptions<void>([&](){
        GLControl::CreateDummyOpenGlCanvas();
    });
}

ALTERNET_UI_API void* GLControl_GetGLContext_(GLControl* obj)
{
    return MarshalExceptions<void*>([&](){
        return obj->GetGLContext();
    });
}

