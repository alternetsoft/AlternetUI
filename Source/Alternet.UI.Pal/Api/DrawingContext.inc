// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2023 AlterNET Software.</auto-generated>
public:

TransformMatrix* GetTransform();
void SetTransform(TransformMatrix* value);


Region* GetClip();
void SetClip(Region* value);


InterpolationMode GetInterpolationMode();
void SetInterpolationMode(InterpolationMode value);

void GetPartialTextExtents(const string& text, double* widths, int widthsCount, Font* font, void* control);
Rect GetTextExtent(const string& text, Font* font, void* control);
Size MeasureText(const string& text, Font* font, double maximumWidth, TextWrapping textWrapping);
static DrawingContext* FromImage(Image* image);
void RoundedRectangle(Pen* pen, Brush* brush, const Rect& rectangle, double cornerRadius);
void Rectangle(Pen* pen, Brush* brush, const Rect& rectangle);
void Ellipse(Pen* pen, Brush* brush, const Rect& rectangle);
void Path(Pen* pen, Brush* brush, GraphicsPath* path);
void Pie(Pen* pen, Brush* brush, const Point& center, double radius, double startAngle, double sweepAngle);
void Circle(Pen* pen, Brush* brush, const Point& center, double radius);
void Polygon(Pen* pen, Brush* brush, Point* points, int pointsCount, FillMode fillMode);
void FillRectangle(Brush* brush, const Rect& rectangle);
void DrawRectangle(Pen* pen, const Rect& rectangle);
void FillEllipse(Brush* brush, const Rect& bounds);
void DrawEllipse(Pen* pen, const Rect& bounds);
void FloodFill(Brush* brush, const Point& point);
void DrawPath(Pen* pen, GraphicsPath* path);
void FillPath(Brush* brush, GraphicsPath* path);
void DrawTextAtPoint(const string& text, const Point& origin, Font* font, Brush* brush);
void DrawTextAtRect(const string& text, const Rect& bounds, Font* font, Brush* brush, TextHorizontalAlignment horizontalAlignment, TextVerticalAlignment verticalAlignment, TextTrimming trimming, TextWrapping wrapping);
void DrawImageAtPoint(Image* image, const Point& origin);
void DrawImageAtRect(Image* image, const Rect& destinationRect);
void DrawImagePortionAtRect(Image* image, const Rect& destinationRect, const Rect& sourceRect);
void Push();
void Pop();
void DrawLine(Pen* pen, const Point& a, const Point& b);
void DrawLines(Pen* pen, Point* points, int pointsCount);
void DrawArc(Pen* pen, const Point& center, double radius, double startAngle, double sweepAngle);
void FillPie(Brush* brush, const Point& center, double radius, double startAngle, double sweepAngle);
void DrawPie(Pen* pen, const Point& center, double radius, double startAngle, double sweepAngle);
void DrawBezier(Pen* pen, const Point& startPoint, const Point& controlPoint1, const Point& controlPoint2, const Point& endPoint);
void DrawBeziers(Pen* pen, Point* points, int pointsCount);
void DrawPoint(Pen* pen, double x, double y);
void DrawCircle(Pen* pen, const Point& center, double radius);
void FillCircle(Brush* brush, const Point& center, double radius);
void DrawRoundedRectangle(Pen* pen, const Rect& rect, double cornerRadius);
void FillRoundedRectangle(Brush* brush, const Rect& rect, double cornerRadius);
void DrawPolygon(Pen* pen, Point* points, int pointsCount);
void FillPolygon(Brush* brush, Point* points, int pointsCount, FillMode fillMode);
void DrawRectangles(Pen* pen, Rect* rects, int rectsCount);
void FillRectangles(Brush* brush, Rect* rects, int rectsCount);
private:
DrawingContext() {}
protected:
virtual ~DrawingContext();
private:
BYREF_ONLY(DrawingContext);
