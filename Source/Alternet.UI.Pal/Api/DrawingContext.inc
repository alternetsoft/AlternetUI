// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
public:

TransformMatrix* GetTransform();
void SetTransform(TransformMatrix* value);


Region* GetClip();
void SetClip(Region* value);


InterpolationMode GetInterpolationMode();
void SetInterpolationMode(InterpolationMode value);

RectD DrawLabel(const string& text, Font* font, const Color& foreColor, const Color& backColor, Image* image, const RectD& rect, int alignment, int indexAccel);
void DestroyClippingRegion();
void SetClippingRegion(const RectD& rect);
RectD GetClippingBox();
void DrawText(const string& text, const PointD& location, Font* font, const Color& foreColor, const Color& backColor);
SizeD GetDpi();
static void ImageFromDrawingContext(Image* image, int width, int height, DrawingContext* dc);
static void ImageFromGenericImageDC(Image* image, void* source, DrawingContext* dc);
void GetPartialTextExtents(const string& text, double* widths, int widthsCount, Font* font, void* control);
RectD GetTextExtent(const string& text, Font* font, void* control);
SizeD GetTextExtentSimple(const string& text, Font* font, void* control);
SizeD MeasureText(const string& text, Font* font, double maximumWidth, TextWrapping textWrapping);
static DrawingContext* FromImage(Image* image);
void RoundedRectangle(Pen* pen, Brush* brush, const RectD& rectangle, double cornerRadius);
void Rectangle(Pen* pen, Brush* brush, const RectD& rectangle);
void Ellipse(Pen* pen, Brush* brush, const RectD& rectangle);
void Path(Pen* pen, Brush* brush, GraphicsPath* path);
void Pie(Pen* pen, Brush* brush, const PointD& center, double radius, double startAngle, double sweepAngle);
void Circle(Pen* pen, Brush* brush, const PointD& center, double radius);
void Polygon(Pen* pen, Brush* brush, PointD* points, int pointsCount, FillMode fillMode);
void FillRectangle(Brush* brush, const RectD& rectangle);
void DrawRectangle(Pen* pen, const RectD& rectangle);
void FillEllipse(Brush* brush, const RectD& bounds);
void DrawEllipse(Pen* pen, const RectD& bounds);
void FloodFill(Brush* brush, const PointD& point);
void DrawPath(Pen* pen, GraphicsPath* path);
void FillPath(Brush* brush, GraphicsPath* path);
void DrawTextAtPoint(const string& text, const PointD& origin, Font* font, Brush* brush);
void DrawTextAtRect(const string& text, const RectD& bounds, Font* font, Brush* brush, TextHorizontalAlignment horizontalAlignment, TextVerticalAlignment verticalAlignment, TextTrimming trimming, TextWrapping wrapping);
void DrawImageAtPoint(Image* image, const PointD& origin);
void DrawImageAtRect(Image* image, const RectD& destinationRect);
void DrawImagePortionAtRect(Image* image, const RectD& destinationRect, const RectD& sourceRect);
void Push();
void Pop();
void DrawLine(Pen* pen, const PointD& a, const PointD& b);
void DrawLines(Pen* pen, PointD* points, int pointsCount);
void DrawArc(Pen* pen, const PointD& center, double radius, double startAngle, double sweepAngle);
void FillPie(Brush* brush, const PointD& center, double radius, double startAngle, double sweepAngle);
void DrawPie(Pen* pen, const PointD& center, double radius, double startAngle, double sweepAngle);
void DrawBezier(Pen* pen, const PointD& startPoint, const PointD& controlPoint1, const PointD& controlPoint2, const PointD& endPoint);
void DrawBeziers(Pen* pen, PointD* points, int pointsCount);
void DrawPoint(Pen* pen, double x, double y);
void DrawCircle(Pen* pen, const PointD& center, double radius);
void FillCircle(Brush* brush, const PointD& center, double radius);
void DrawRoundedRectangle(Pen* pen, const RectD& rect, double cornerRadius);
void FillRoundedRectangle(Brush* brush, const RectD& rect, double cornerRadius);
void DrawPolygon(Pen* pen, PointD* points, int pointsCount);
void FillPolygon(Brush* brush, PointD* points, int pointsCount, FillMode fillMode);
void DrawRectangles(Pen* pen, RectD* rects, int rectsCount);
void FillRectangles(Brush* brush, RectD* rects, int rectsCount);
Color GetPixel(const PointD& p);
void SetPixel(const PointD& p, Pen* pen);
private:
DrawingContext() {}
protected:
virtual ~DrawingContext();
private:
BYREF_ONLY(DrawingContext);
