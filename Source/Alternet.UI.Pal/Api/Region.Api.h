// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>

#pragma once

#include "Region.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API Region* Region_Create_()
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<Region*>([&](){
    #endif
        return new Region();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_Clear_(Region* obj)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->Clear();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int Region_ContainsPoint_(Region* obj, PointD pt)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int>([&](){
    #endif
        return obj->ContainsPoint(pt);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int Region_ContainsRect_(Region* obj, RectD rect)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int>([&](){
    #endif
        return obj->ContainsRect(rect);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool Region_IsEmpty_(Region* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->IsEmpty();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool Region_IsOk_(Region* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->IsOk();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_InitializeWithRegion_(Region* obj, Region* region)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->InitializeWithRegion(region);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_InitializeWithRect_(Region* obj, RectD rect)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->InitializeWithRect(rect);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_InitializeWithPolygon_(Region* obj, PointD* points, int pointsCount, FillMode fillMode)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->InitializeWithPolygon(points, pointsCount, fillMode);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_IntersectWithRect_(Region* obj, RectD rect)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->IntersectWithRect(rect);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_IntersectWithRegion_(Region* obj, Region* region)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->IntersectWithRegion(region);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_UnionWithRect_(Region* obj, RectD rect)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->UnionWithRect(rect);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_UnionWithRegion_(Region* obj, Region* region)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->UnionWithRegion(region);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_XorWithRect_(Region* obj, RectD rect)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->XorWithRect(rect);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_XorWithRegion_(Region* obj, Region* region)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->XorWithRegion(region);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_SubtractRect_(Region* obj, RectD rect)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SubtractRect(rect);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_SubtractRegion_(Region* obj, Region* region)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SubtractRegion(region);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void Region_Translate_(Region* obj, double dx, double dy)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->Translate(dx, dy);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API RectD_C Region_GetBounds_(Region* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<RectD_C>([&](){
    #endif
        return obj->GetBounds();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool Region_IsEqualTo_(Region* obj, Region* other)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->IsEqualTo(other);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int Region_GetHashCode__(Region* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int>([&](){
    #endif
        return obj->GetHashCode_();
    #if !defined(__WXMSW__)
    });
    #endif
}

