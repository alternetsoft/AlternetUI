// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2023 AlterNET Software.</auto-generated>

#pragma once

#include "Region.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API Region* Region_Create_()
{
    return new Region();
}

ALTERNET_UI_API void Region_InitializeWithRect_(Region* obj, Rect rect)
{
    obj->InitializeWithRect(rect);
}

ALTERNET_UI_API void Region_InitializeWithPolygon_(Region* obj, Point* points, int pointsCount, FillMode fillMode)
{
    obj->InitializeWithPolygon(points, pointsCount, fillMode);
}

ALTERNET_UI_API void Region_IntersectWithRect_(Region* obj, Rect rect)
{
    obj->IntersectWithRect(rect);
}

ALTERNET_UI_API void Region_IntersectWithRegion_(Region* obj, Region* region)
{
    obj->IntersectWithRegion(region);
}

ALTERNET_UI_API void Region_UnionWithRect_(Region* obj, Rect rect)
{
    obj->UnionWithRect(rect);
}

ALTERNET_UI_API void Region_UnionWithRegion_(Region* obj, Region* region)
{
    obj->UnionWithRegion(region);
}

ALTERNET_UI_API void Region_XorWithRect_(Region* obj, Rect rect)
{
    obj->XorWithRect(rect);
}

ALTERNET_UI_API void Region_XorWithRegion_(Region* obj, Region* region)
{
    obj->XorWithRegion(region);
}

ALTERNET_UI_API void Region_SubtractRect_(Region* obj, Rect rect)
{
    obj->SubtractRect(rect);
}

ALTERNET_UI_API void Region_SubtractRegion_(Region* obj, Region* region)
{
    obj->SubtractRegion(region);
}

ALTERNET_UI_API void Region_Translate_(Region* obj, double dx, double dy)
{
    obj->Translate(dx, dy);
}

ALTERNET_UI_API Rect_C Region_GetBounds_(Region* obj)
{
    return obj->GetBounds();
}

ALTERNET_UI_API c_bool Region_IsEqualTo_(Region* obj, Region* other)
{
    return obj->IsEqualTo(other);
}

ALTERNET_UI_API int Region_GetHashCode__(Region* obj)
{
    return obj->GetHashCode_();
}

