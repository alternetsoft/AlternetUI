// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>

#pragma once

#include "FileDialog.h"
#include "Window.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API FileDialog* FileDialog_Create_()
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<FileDialog*>([&](){
    #endif
        return new FileDialog();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool FileDialog_GetOverwritePrompt_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetOverwritePrompt();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetOverwritePrompt_(FileDialog* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetOverwritePrompt(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool FileDialog_GetNoShortcutFollow_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetNoShortcutFollow();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetNoShortcutFollow_(FileDialog* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetNoShortcutFollow(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool FileDialog_GetFileMustExist_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetFileMustExist();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetFileMustExist_(FileDialog* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetFileMustExist(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool FileDialog_GetChangeDir_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetChangeDir();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetChangeDir_(FileDialog* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetChangeDir(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool FileDialog_GetPreviewFiles_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetPreviewFiles();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetPreviewFiles_(FileDialog* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetPreviewFiles(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool FileDialog_GetShowHiddenFiles_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetShowHiddenFiles();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetShowHiddenFiles_(FileDialog* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetShowHiddenFiles(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API FileDialogMode FileDialog_GetMode_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<FileDialogMode>([&](){
    #endif
        return obj->GetMode();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetMode_(FileDialog* obj, FileDialogMode value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetMode(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API char16_t* FileDialog_GetInitialDirectory_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<char16_t*>([&](){
    #endif
        return AllocPInvokeReturnString(obj->GetInitialDirectory());
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetInitialDirectory_(FileDialog* obj, const char16_t* value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetInitialDirectory(ToOptional(value));
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API char16_t* FileDialog_GetTitle_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<char16_t*>([&](){
    #endif
        return AllocPInvokeReturnString(obj->GetTitle());
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetTitle_(FileDialog* obj, const char16_t* value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetTitle(ToOptional(value));
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API char16_t* FileDialog_GetFilter_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<char16_t*>([&](){
    #endif
        return AllocPInvokeReturnString(obj->GetFilter());
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetFilter_(FileDialog* obj, const char16_t* value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetFilter(ToOptional(value));
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int FileDialog_GetSelectedFilterIndex_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int>([&](){
    #endif
        return obj->GetSelectedFilterIndex();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetSelectedFilterIndex_(FileDialog* obj, int value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetSelectedFilterIndex(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API char16_t* FileDialog_GetFileName_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<char16_t*>([&](){
    #endif
        return AllocPInvokeReturnString(obj->GetFileName());
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetFileName_(FileDialog* obj, const char16_t* value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetFileName(ToOptional(value));
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API c_bool FileDialog_GetAllowMultipleSelection_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<c_bool>([&](){
    #endif
        return obj->GetAllowMultipleSelection();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_SetAllowMultipleSelection_(FileDialog* obj, c_bool value)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->SetAllowMultipleSelection(value);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void* FileDialog_OpenFileNamesArray_(FileDialog* obj)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<void*>([&](){
    #endif
        return obj->OpenFileNamesArray();
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API int FileDialog_GetFileNamesItemCount_(FileDialog* obj, void* array)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<int>([&](){
    #endif
        return obj->GetFileNamesItemCount(array);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API char16_t* FileDialog_GetFileNamesItemAt_(FileDialog* obj, void* array, int index)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<char16_t*>([&](){
    #endif
        return AllocPInvokeReturnString(obj->GetFileNamesItemAt(array, index));
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API void FileDialog_CloseFileNamesArray_(FileDialog* obj, void* array)
{
    #if !defined(__WXMSW__)
    MarshalExceptions<void>([&](){
    #endif
        obj->CloseFileNamesArray(array);
    #if !defined(__WXMSW__)
    });
    #endif
}

ALTERNET_UI_API ModalResult FileDialog_ShowModal_(FileDialog* obj, Window* owner)
{
    #if !defined(__WXMSW__)
    return MarshalExceptions<ModalResult>([&](){
    #endif
        return obj->ShowModal(owner);
    #if !defined(__WXMSW__)
    });
    #endif
}

