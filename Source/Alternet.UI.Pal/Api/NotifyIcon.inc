// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
optional<string> GetText();
void SetText(optional<string> value);

Image* GetIcon();
void SetIcon(Image* value);

Menu* GetMenu();
void SetMenu(Menu* value);

bool GetVisible();
void SetVisible(bool value);

static bool GetIsAvailable();

bool GetIsIconInstalled();

bool GetIsOk();


public:

enum class NotifyIconEvent
{
    Click,
    DoubleClick,
};

typedef void* (*NotifyIconEventCallbackType)(NotifyIcon* obj, NotifyIconEvent event, void* param);

static void SetEventCallback(NotifyIconEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(NotifyIconEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(NotifyIconEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(NotifyIconEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static NotifyIconEventCallbackType eventCallback = nullptr;

public:
NotifyIcon();

protected:
virtual ~NotifyIcon();

private:
BYREF_ONLY(NotifyIcon);
