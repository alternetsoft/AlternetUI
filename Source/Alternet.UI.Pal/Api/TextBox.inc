// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
public:

int GetTextWrap();
void SetTextWrap(int value);


int GetTextAlign();
void SetTextAlign(int value);


string GetReportedUrl();


bool GetEditControlOnly();
void SetEditControlOnly(bool value);


bool GetReadOnly();
void SetReadOnly(bool value);


void* GetValidator();
void SetValidator(void* value);


bool GetMultiline();
void SetMultiline(bool value);


bool GetIsRichEdit();
void SetIsRichEdit(bool value);


bool GetHasSelection();


bool GetIsModified();
void SetIsModified(bool value);


bool GetCanCopy();


bool GetCanCut();


bool GetCanPaste();


bool GetCanRedo();


bool GetCanUndo();


bool GetIsEmpty();


string GetEmptyTextHint();
void SetEmptyTextHint(const string& value);


bool GetHideSelection();
void SetHideSelection(bool value);


bool GetProcessTab();
void SetProcessTab(bool value);


bool GetProcessEnter();
void SetProcessEnter(bool value);


bool GetIsPassword();
void SetIsPassword(bool value);


bool GetAutoUrl();
void SetAutoUrl(bool value);


bool GetHideVertScrollbar();
void SetHideVertScrollbar(bool value);

static void* CreateTextBox(void* validator);
int GetLineLength(int64_t lineNo);
string GetLineText(int64_t lineNo);
int GetNumberOfLines();
PointI PositionToXY(int64_t pos);
PointD PositionToCoords(int64_t pos);
void ShowPosition(int64_t pos);
int64_t XYToPosition(int64_t x, int64_t y);
void* GetDefaultStyle();
void* GetStyle(int64_t position);
bool SetDefaultStyle(void* style);
bool SetStyle(int64_t start, int64_t end, void* style);
void Clear();
void Copy();
void Cut();
void AppendText(const string& text);
int64_t GetInsertionPoint();
void Paste();
void Redo();
void Remove(int64_t from, int64_t to);
void Replace(int64_t from, int64_t to, const string& value);
void SetInsertionPoint(int64_t pos);
void SetInsertionPointEnd();
void SetMaxLength(uint64_t len);
void SetSelection(int64_t from, int64_t to);
void SelectAll();
void SelectNone();
void Undo();
void WriteText(const string& text);
string GetRange(int64_t from, int64_t to);
string GetStringSelection();
void EmptyUndoBuffer();
bool IsValidPosition(int64_t pos);
int64_t GetLastPosition();
int64_t GetSelectionStart();
int64_t GetSelectionEnd();
public:
enum class TextBoxEvent
{
    TextEnter,
    TextUrl,
    TextMaxLength,
};
typedef void* (*TextBoxEventCallbackType)(TextBox* obj, TextBoxEvent event, void* param);
static void SetEventCallback(TextBoxEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(TextBoxEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(TextBoxEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static TextBoxEventCallbackType eventCallback = nullptr;
public:
TextBox();
protected:
virtual ~TextBox();
private:
BYREF_ONLY(TextBox);
