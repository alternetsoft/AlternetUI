// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2022.</auto-generated>
public:

int GetItemsCount();


ImageList* GetSmallImageList();
void SetSmallImageList(ImageList* value);


ImageList* GetLargeImageList();
void SetLargeImageList(ImageList* value);


ListViewView GetCurrentView();
void SetCurrentView(ListViewView value);


ListViewSelectionMode GetSelectionMode();
void SetSelectionMode(ListViewSelectionMode value);

void* OpenSelectedIndicesArray();
int GetSelectedIndicesItemCount(void* array);
int GetSelectedIndicesItemAt(void* array, int index);
void CloseSelectedIndicesArray(void* array);
void InsertItemAt(int index, const string& text, int columnIndex, int imageIndex);
void RemoveItemAt(int index);
void ClearItems();
void InsertColumnAt(int index, const string& header);
void RemoveColumnAt(int index);
void ClearSelected();
void SetSelected(int index, bool value);
public:
enum class ListViewEvent
{
    SelectionChanged,
};
typedef void* (*ListViewEventCallbackType)(ListView* obj, ListViewEvent event, void* param);
static void SetEventCallback(ListViewEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(ListViewEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(ListViewEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static ListViewEventCallbackType eventCallback = nullptr;
public:
ListView();
protected:
virtual ~ListView();
private:
BYREF_ONLY(ListView);
