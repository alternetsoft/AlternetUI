// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
bool GetHasBorder();
void SetHasBorder(bool value);

int64_t GetItemsCount();

ImageList* GetSmallImageList();
void SetSmallImageList(ImageList* value);

ImageList* GetLargeImageList();
void SetLargeImageList(ImageList* value);

ListViewView GetCurrentView();
void SetCurrentView(ListViewView value);

ListViewSelectionMode GetSelectionMode();
void SetSelectionMode(ListViewSelectionMode value);

bool GetAllowLabelEdit();
void SetAllowLabelEdit(bool value);

int64_t GetTopItemIndex();

ListViewGridLinesDisplayMode GetGridLinesDisplayMode();
void SetGridLinesDisplayMode(ListViewGridLinesDisplayMode value);

ListViewSortMode GetSortMode();
void SetSortMode(ListViewSortMode value);

bool GetColumnHeaderVisible();
void SetColumnHeaderVisible(bool value);

int64_t GetFocusedItemIndex();
void SetFocusedItemIndex(int64_t value);

void* OpenSelectedIndicesArray();
int GetSelectedIndicesItemCount(void* array);
int64_t GetSelectedIndicesItemAt(void* array, int index);
void CloseSelectedIndicesArray(void* array);
void InsertItemAt(int64_t index, const string& text, int64_t columnIndex, int imageIndex);
void RemoveItemAt(int64_t index);
void ClearItems();
void InsertColumnAt(int64_t index, const string& header, double width, ListViewColumnWidthMode widthMode);
void RemoveColumnAt(int64_t index);
void ClearSelected();
void SetSelected(int64_t index, bool value);
void* ItemHitTest(const PointD& point);
ListViewHitTestLocations GetHitTestResultLocations(void* hitTestResult);
int64_t GetHitTestResultItemIndex(void* hitTestResult);
int64_t GetHitTestResultColumnIndex(void* hitTestResult);
void FreeHitTestResult(void* hitTestResult);
void BeginLabelEdit(int64_t itemIndex);
RectD GetItemBounds(int64_t itemIndex, ListViewItemBoundsPortion portion);
void Clear();
void EnsureItemVisible(int64_t itemIndex);
void SetItemText(int64_t itemIndex, int64_t columnIndex, const string& text);
void SetItemImageIndex(int64_t itemIndex, int64_t columnIndex, int imageIndex);
void SetColumnWidth(int64_t columnIndex, double fixedWidth, ListViewColumnWidthMode widthMode);
void SetColumnTitle(int64_t columnIndex, const string& text);

public:

enum class ListViewEvent
{
    ControlRecreated,
    SelectionChanged,
    CompareItemsForCustomSort,
    ColumnClick,
    BeforeItemLabelEdit,
    AfterItemLabelEdit,
};

typedef void* (*ListViewEventCallbackType)(ListView* obj, ListViewEvent event, void* param);

static void SetEventCallback(ListViewEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(ListViewEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(ListViewEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(ListViewEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static ListViewEventCallbackType eventCallback = nullptr;

public:
ListView();

protected:
virtual ~ListView();

private:
BYREF_ONLY(ListView);
