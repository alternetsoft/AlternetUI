// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

#pragma once

#include "Window.h"
#include "IconSet.h"
#include "Font.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API Window* Window_Create_()
{
    return MarshalExceptions<Window*>([&](){
        return new Window();
    });
}

ALTERNET_UI_API char16_t* Window_GetTitle_(Window* obj)
{
    return MarshalExceptions<char16_t*>([&](){
        return AllocPInvokeReturnString(obj->GetTitle());
    });
}

ALTERNET_UI_API void Window_SetTitle_(Window* obj, const char16_t* value)
{
    MarshalExceptions<void>([&](){
        obj->SetTitle(value);
    });
}

ALTERNET_UI_API c_bool Window_GetShowInTaskbar_(Window* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetShowInTaskbar();
    });
}

ALTERNET_UI_API void Window_SetShowInTaskbar_(Window* obj, c_bool value)
{
    MarshalExceptions<void>([&](){
        obj->SetShowInTaskbar(value);
    });
}

ALTERNET_UI_API c_bool Window_GetMinimizeEnabled_(Window* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetMinimizeEnabled();
    });
}

ALTERNET_UI_API void Window_SetMinimizeEnabled_(Window* obj, c_bool value)
{
    MarshalExceptions<void>([&](){
        obj->SetMinimizeEnabled(value);
    });
}

ALTERNET_UI_API c_bool Window_GetMaximizeEnabled_(Window* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetMaximizeEnabled();
    });
}

ALTERNET_UI_API void Window_SetMaximizeEnabled_(Window* obj, c_bool value)
{
    MarshalExceptions<void>([&](){
        obj->SetMaximizeEnabled(value);
    });
}

ALTERNET_UI_API c_bool Window_GetCloseEnabled_(Window* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetCloseEnabled();
    });
}

ALTERNET_UI_API void Window_SetCloseEnabled_(Window* obj, c_bool value)
{
    MarshalExceptions<void>([&](){
        obj->SetCloseEnabled(value);
    });
}

ALTERNET_UI_API c_bool Window_GetAlwaysOnTop_(Window* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetAlwaysOnTop();
    });
}

ALTERNET_UI_API void Window_SetAlwaysOnTop_(Window* obj, c_bool value)
{
    MarshalExceptions<void>([&](){
        obj->SetAlwaysOnTop(value);
    });
}

ALTERNET_UI_API c_bool Window_GetIsToolWindow_(Window* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetIsToolWindow();
    });
}

ALTERNET_UI_API void Window_SetIsToolWindow_(Window* obj, c_bool value)
{
    MarshalExceptions<void>([&](){
        obj->SetIsToolWindow(value);
    });
}

ALTERNET_UI_API c_bool Window_GetResizable_(Window* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetResizable();
    });
}

ALTERNET_UI_API void Window_SetResizable_(Window* obj, c_bool value)
{
    MarshalExceptions<void>([&](){
        obj->SetResizable(value);
    });
}

ALTERNET_UI_API c_bool Window_GetHasBorder_(Window* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetHasBorder();
    });
}

ALTERNET_UI_API void Window_SetHasBorder_(Window* obj, c_bool value)
{
    MarshalExceptions<void>([&](){
        obj->SetHasBorder(value);
    });
}

ALTERNET_UI_API c_bool Window_GetHasTitleBar_(Window* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetHasTitleBar();
    });
}

ALTERNET_UI_API void Window_SetHasTitleBar_(Window* obj, c_bool value)
{
    MarshalExceptions<void>([&](){
        obj->SetHasTitleBar(value);
    });
}

ALTERNET_UI_API c_bool Window_GetHasSystemMenu_(Window* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetHasSystemMenu();
    });
}

ALTERNET_UI_API void Window_SetHasSystemMenu_(Window* obj, c_bool value)
{
    MarshalExceptions<void>([&](){
        obj->SetHasSystemMenu(value);
    });
}

ALTERNET_UI_API c_bool Window_GetIsPopupWindow_(Window* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetIsPopupWindow();
    });
}

ALTERNET_UI_API void Window_SetIsPopupWindow_(Window* obj, c_bool value)
{
    MarshalExceptions<void>([&](){
        obj->SetIsPopupWindow(value);
    });
}

ALTERNET_UI_API Window* Window_GetActiveWindow_()
{
    return MarshalExceptions<Window*>([&](){
        return Window::GetActiveWindow();
    });
}

ALTERNET_UI_API WindowState Window_GetState_(Window* obj)
{
    return MarshalExceptions<WindowState>([&](){
        return obj->GetState();
    });
}

ALTERNET_UI_API void Window_SetState_(Window* obj, WindowState value)
{
    MarshalExceptions<void>([&](){
        obj->SetState(value);
    });
}

ALTERNET_UI_API IconSet* Window_GetIcon_(Window* obj)
{
    return MarshalExceptions<IconSet*>([&](){
        return obj->GetIcon();
    });
}

ALTERNET_UI_API void Window_SetIcon_(Window* obj, IconSet* value)
{
    MarshalExceptions<void>([&](){
        obj->SetIcon(value);
    });
}

ALTERNET_UI_API void* Window_GetWxStatusBar_(Window* obj)
{
    return MarshalExceptions<void*>([&](){
        return obj->GetWxStatusBar();
    });
}

ALTERNET_UI_API void Window_SetWxStatusBar_(Window* obj, void* value)
{
    MarshalExceptions<void>([&](){
        obj->SetWxStatusBar(value);
    });
}

ALTERNET_UI_API void* Window_CreateEx_(int kind)
{
    return MarshalExceptions<void*>([&](){
        return Window::CreateEx(kind);
    });
}

ALTERNET_UI_API void Window_SetDefaultBounds_(RectD bounds)
{
    MarshalExceptions<void>([&](){
        Window::SetDefaultBounds(bounds);
    });
}

ALTERNET_UI_API void Window_SetParkingWindowFont_(Font* font)
{
    MarshalExceptions<void>([&](){
        Window::SetParkingWindowFont(font);
    });
}

ALTERNET_UI_API void Window_SetMinSize_(Window* obj, SizeD size)
{
    MarshalExceptions<void>([&](){
        obj->SetMinSize(size);
    });
}

ALTERNET_UI_API void Window_SetMaxSize_(Window* obj, SizeD size)
{
    MarshalExceptions<void>([&](){
        obj->SetMaxSize(size);
    });
}

ALTERNET_UI_API void Window_Close_(Window* obj)
{
    MarshalExceptions<void>([&](){
        obj->Close();
    });
}

ALTERNET_UI_API void Window_Activate_(Window* obj)
{
    MarshalExceptions<void>([&](){
        obj->Activate();
    });
}

ALTERNET_UI_API void Window_SetEventCallback_(Window::WindowEventCallbackType callback)
{
    Window::SetEventCallback(callback);
}

