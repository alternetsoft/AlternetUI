// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2022.</auto-generated>

#pragma once

#include "Window.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API Window* Window_Create_()
{
    return MarshalExceptions<Window*>([&](){
            return new Window();
        });
}

ALTERNET_UI_API char16_t* Window_GetTitle_(Window* obj)
{
    return MarshalExceptions<char16_t*>([&](){
            return AllocPInvokeReturnString(obj->GetTitle());
        });
}

ALTERNET_UI_API void Window_SetTitle_(Window* obj, const char16_t* value)
{
    MarshalExceptions<void>([&](){
            obj->SetTitle(value);
        });
}

ALTERNET_UI_API WindowStartPosition Window_GetWindowStartPosition_(Window* obj)
{
    return MarshalExceptions<WindowStartPosition>([&](){
            return obj->GetWindowStartPosition();
        });
}

ALTERNET_UI_API void Window_SetWindowStartPosition_(Window* obj, WindowStartPosition value)
{
    MarshalExceptions<void>([&](){
            obj->SetWindowStartPosition(value);
        });
}

ALTERNET_UI_API void Window_SetEventCallback_(Window::WindowEventCallbackType callback)
{
    Window::SetEventCallback(callback);
}

