// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

#pragma once

#include "Menu.h"
#include "Window.h"
#include "ImageSet.h"
#include "Control.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API Menu* Menu_Create_()
{
    return MarshalExceptions<Menu*>([&](){
        return new Menu();
    });
}

ALTERNET_UI_API char16_t* Menu_GetMacHelpMenuTitleName_(Menu* obj)
{
    return MarshalExceptions<char16_t*>([&](){
        return AllocPInvokeReturnString(obj->GetMacHelpMenuTitleName());
    });
}

ALTERNET_UI_API char16_t* Menu_GetMacWindowMenuTitleName_(Menu* obj)
{
    return MarshalExceptions<char16_t*>([&](){
        return AllocPInvokeReturnString(obj->GetMacWindowMenuTitleName());
    });
}

ALTERNET_UI_API char16_t* Menu_GetEventMenuItemId_()
{
    return MarshalExceptions<char16_t*>([&](){
        return AllocPInvokeReturnString(Menu::GetEventMenuItemId());
    });
}

ALTERNET_UI_API c_bool Menu_GetEventMenuItemChecked_()
{
    return MarshalExceptions<c_bool>([&](){
        return Menu::GetEventMenuItemChecked();
    });
}

ALTERNET_UI_API void Menu_MacSetCommonMenuBar_(Menu* obj, void* menuBar)
{
    MarshalExceptions<void>([&](){
        obj->MacSetCommonMenuBar(menuBar);
    });
}

ALTERNET_UI_API void* Menu_GetMainMenu_(Window* window)
{
    return MarshalExceptions<void*>([&](){
        return Menu::GetMainMenu(window);
    });
}

ALTERNET_UI_API void* Menu_FindMenuItem_(Window* window, const char16_t* id)
{
    return MarshalExceptions<void*>([&](){
        return Menu::FindMenuItem(window, id);
    });
}

ALTERNET_UI_API void Menu_SetMainMenu_(Window* window, void* menu)
{
    MarshalExceptions<void>([&](){
        Menu::SetMainMenu(window, menu);
    });
}

ALTERNET_UI_API c_bool Menu_MainMenuAppend_(void* menuHandle, void* menu, const char16_t* text)
{
    return MarshalExceptions<c_bool>([&](){
        return Menu::MainMenuAppend(menuHandle, menu, text);
    });
}

ALTERNET_UI_API void Menu_MainMenuSetEnabled_(void* menuHandle, const char16_t* childId, c_bool enable)
{
    MarshalExceptions<void>([&](){
        Menu::MainMenuSetEnabled(menuHandle, childId, enable);
    });
}

ALTERNET_UI_API void* Menu_MainMenuGetSubMenu_(void* menuHandle, const char16_t* childId)
{
    return MarshalExceptions<void*>([&](){
        return Menu::MainMenuGetSubMenu(menuHandle, childId);
    });
}

ALTERNET_UI_API void* Menu_MainMenuRemove_(void* menuHandle, const char16_t* childId)
{
    return MarshalExceptions<void*>([&](){
        return Menu::MainMenuRemove(menuHandle, childId);
    });
}

ALTERNET_UI_API c_bool Menu_MainMenuInsert_(void* menuHandle, const char16_t* childId, void* menu, const char16_t* title)
{
    return MarshalExceptions<c_bool>([&](){
        return Menu::MainMenuInsert(menuHandle, childId, menu, title);
    });
}

ALTERNET_UI_API void* Menu_MainMenuReplace_(void* menuHandle, const char16_t* childId, void* menu, const char16_t* title)
{
    return MarshalExceptions<void*>([&](){
        return Menu::MainMenuReplace(menuHandle, childId, menu, title);
    });
}

ALTERNET_UI_API void Menu_MainMenuSetText_(void* menuHandle, const char16_t* childId, const char16_t* label)
{
    MarshalExceptions<void>([&](){
        Menu::MainMenuSetText(menuHandle, childId, label);
    });
}

ALTERNET_UI_API void* Menu_CreateMainMenu_(const char16_t* id)
{
    return MarshalExceptions<void*>([&](){
        return Menu::CreateMainMenu(id);
    });
}

ALTERNET_UI_API void* Menu_CreateContextMenu_(const char16_t* id)
{
    return MarshalExceptions<void*>([&](){
        return Menu::CreateContextMenu(id);
    });
}

ALTERNET_UI_API void* Menu_CreateMenuItem_(MenuItemType itemType, const char16_t* id, const char16_t* title, const char16_t* help, void* menuHandle)
{
    return MarshalExceptions<void*>([&](){
        return Menu::CreateMenuItem(itemType, id, title, help, menuHandle);
    });
}

ALTERNET_UI_API void Menu_DestroyMainMenu_(void* menuHandle)
{
    MarshalExceptions<void>([&](){
        Menu::DestroyMainMenu(menuHandle);
    });
}

ALTERNET_UI_API void Menu_DestroyMenuItem_(void* menuHandle)
{
    MarshalExceptions<void>([&](){
        Menu::DestroyMenuItem(menuHandle);
    });
}

ALTERNET_UI_API void Menu_DestroyContextMenu_(void* menuHandle)
{
    MarshalExceptions<void>([&](){
        Menu::DestroyContextMenu(menuHandle);
    });
}

ALTERNET_UI_API char16_t* Menu_GetMenuId_(void* handle)
{
    return MarshalExceptions<char16_t*>([&](){
        return AllocPInvokeReturnString(Menu::GetMenuId(handle));
    });
}

ALTERNET_UI_API MenuItemType Menu_GetMenuItemType_(void* handle)
{
    return MarshalExceptions<MenuItemType>([&](){
        return Menu::GetMenuItemType(handle);
    });
}

ALTERNET_UI_API void Menu_SetMenuItemBitmap_(void* handle, ImageSet* value)
{
    MarshalExceptions<void>([&](){
        Menu::SetMenuItemBitmap(handle, value);
    });
}

ALTERNET_UI_API void Menu_SetMenuItemEnabled_(void* handle, c_bool value)
{
    MarshalExceptions<void>([&](){
        Menu::SetMenuItemEnabled(handle, value);
    });
}

ALTERNET_UI_API void Menu_SetMenuItemRole_(void* handle, const char16_t* role)
{
    MarshalExceptions<void>([&](){
        Menu::SetMenuItemRole(handle, role);
    });
}

ALTERNET_UI_API void Menu_SetMenuItemText_(void* handle, const char16_t* value, const char16_t* rightValue)
{
    MarshalExceptions<void>([&](){
        Menu::SetMenuItemText(handle, value, rightValue);
    });
}

ALTERNET_UI_API void Menu_SetMenuItemChecked_(void* handle, c_bool value)
{
    MarshalExceptions<void>([&](){
        Menu::SetMenuItemChecked(handle, value);
    });
}

ALTERNET_UI_API void Menu_SetMenuItemSubMenu_(void* handle, void* subMenuHandle)
{
    MarshalExceptions<void>([&](){
        Menu::SetMenuItemSubMenu(handle, subMenuHandle);
    });
}

ALTERNET_UI_API void Menu_SetMenuItemShortcut_(void* handle, Key key, ModifierKeys modifierKeys)
{
    MarshalExceptions<void>([&](){
        Menu::SetMenuItemShortcut(handle, key, modifierKeys);
    });
}

ALTERNET_UI_API void Menu_MenuAddItem_(void* handle, void* itemHandle)
{
    MarshalExceptions<void>([&](){
        Menu::MenuAddItem(handle, itemHandle);
    });
}

ALTERNET_UI_API void Menu_MenuRemoveItem_(void* handle, const char16_t* childId)
{
    MarshalExceptions<void>([&](){
        Menu::MenuRemoveItem(handle, childId);
    });
}

ALTERNET_UI_API c_bool Menu_MenuInsertItem_(void* handle, const char16_t* childId, void* itemHandle)
{
    return MarshalExceptions<c_bool>([&](){
        return Menu::MenuInsertItem(handle, childId, itemHandle);
    });
}

ALTERNET_UI_API void Menu_Show_(void* menuHandle, Control* control, PointD position)
{
    MarshalExceptions<void>([&](){
        Menu::Show(menuHandle, control, position);
    });
}

ALTERNET_UI_API void Menu_SetEventCallback_(Menu::MenuEventCallbackType callback)
{
    Menu::SetEventCallback(callback);
}

