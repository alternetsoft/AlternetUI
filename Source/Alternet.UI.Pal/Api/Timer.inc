// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2023.</auto-generated>
public:

bool GetEnabled();
void SetEnabled(bool value);


int GetInterval();
void SetInterval(int value);

public:
enum class TimerEvent
{
    Tick,
};
typedef void* (*TimerEventCallbackType)(Timer* obj, TimerEvent event, void* param);
static void SetEventCallback(TimerEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(TimerEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(TimerEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static TimerEventCallbackType eventCallback = nullptr;
public:
Timer();
protected:
virtual ~Timer();
private:
BYREF_ONLY(Timer);
