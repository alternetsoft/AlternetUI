// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2023 AlterNET Software.</auto-generated>
public:

static bool GetRichToolTipUseGeneric();
static void SetRichToolTipUseGeneric(bool value);

static void* CreateRichToolTip(const string& title, const string& message);
static void DeleteRichToolTip(void* handle);
static void RichToolTipSetBkColor(void* handle, const Color& color, const Color& endColor);
static void RichToolTipSetFgColor(void* handle, const Color& color);
static void RichToolTipSetTitleFgColor(void* handle, const Color& color);
static void RichToolTipSetIcon(void* handle, ImageSet* bitmapBundle);
static void RichToolTipSetIcon2(void* handle, int icon);
static void RichToolTipSetTimeout(void* handle, uint32_t milliseconds, uint32_t millisecondsShowdelay);
static void RichToolTipSetTipKind(void* handle, int tipKind);
static void RichToolTipSetTitleFont(void* handle, Font* font);
static void RichToolTipShowFor(void* handle, void* window, const Int32Rect& rect);
static void* CreateToolTip(const string& tip);
static void DeleteToolTip(void* handle);
static string ToolTipGetTip(void* handle);
static void* ToolTipGetWindow(void* handle);
static void ToolTipSetTip(void* handle, const string& tip);
static void ToolTipEnable(bool flag);
static void ToolTipSetAutoPop(int64_t msecs);
static void ToolTipSetDelay(int64_t msecs);
static void ToolTipSetMaxWidth(int width);
static void ToolTipSetReshow(int64_t msecs);
static void* CreateCursor();
static void* CreateCursor2(int cursorId);
static void* CreateCursor3(const string& cursorName, int type, int hotSpotX, int hotSpotY);
static void* CreateCursor4(Image* image);
static void DeleteCursor(void* handle);
static bool CursorIsOk(void* handle);
static Int32Point CursorGetHotSpot(void* handle);
static int CaretGetBlinkTime();
static void CaretSetBlinkTime(int milliseconds);
static void DeleteCaret(void* handle);
static Int32Point CaretGetPosition(void* handle);
static Int32Size CaretGetSize(void* handle);
static void CaretMove(void* handle, int x, int y);
static void CaretSetSize(void* handle, int width, int height);
static void* CreateCaret();
static void* CreateCaret2(void* window, int width, int height);
static void* CaretGetWindow(void* handle);
static void CaretHide(void* handle);
static bool CaretIsOk(void* handle);
static bool CaretIsVisible(void* handle);
static void CaretShow(void* handle, bool show);
static void* CreateDisplay();
static void* CreateDisplay2(uint32_t index);
static void* CreateDisplay3(void* window);
static void DeleteDisplay(void* handle);
static uint32_t DisplayGetCount();
static int DisplayGetFromPoint(const Int32Point& pt);
static int DisplayGetFromWindow(void* win);
static int DisplayGetStdPPIValue();
static Int32Size DisplayGetStdPPI();
static string DisplayGetName(void* handle);
static Int32Size DisplayGetPPI(void* handle);
static double DisplayGetScaleFactor(void* handle);
static bool DisplayIsPrimary(void* handle);
static Int32Rect DisplayGetClientArea(void* handle);
static Int32Rect DisplayGetGeometry(void* handle);
static bool SystemSettingsHasFeature(int index);
static Font* SystemSettingsGetFont(int index);
static Color SystemSettingsGetColor(int index);
static int SystemSettingsGetMetric(int index, void* win);
static string SystemAppearanceGetName();
static bool SystemAppearanceIsDark();
static bool SystemAppearanceIsUsingDarkBackground();
static bool IsBusyCursor();
static void BeginBusyCursor();
static void EndBusyCursor();
static void Bell();
static string GetTextFromUser(const string& message, const string& caption, const string& defaultValue, void* parent, int x, int y, bool centre);
static int64_t GetNumberFromUser(const string& message, const string& prompt, const string& caption, int64_t value, int64_t min, int64_t max, void* parent, const Int32Point& pos);
public:
WxOtherFactory();
protected:
virtual ~WxOtherFactory();
private:
BYREF_ONLY(WxOtherFactory);
