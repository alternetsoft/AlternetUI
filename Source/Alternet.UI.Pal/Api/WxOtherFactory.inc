// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
public:

static bool GetRichToolTipUseGeneric();
static void SetRichToolTipUseGeneric(bool value);

static void RendererDrawCheckBox(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static void RendererDrawCheckMark(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static SizeI RendererGetCheckBoxSize(void* renderer, void* win, int flags);
static SizeI RendererGetCheckMarkSize(void* renderer, void* win);
static SizeI RendererGetExpanderSize(void* renderer, void* win);
static void RendererDrawPushButton(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static void RendererDrawCollapseButton(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static SizeI RendererGetCollapseButtonSize(void* renderer, void* win, DrawingContext* dc);
static void RendererDrawItemSelectionRect(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static void RendererDrawFocusRect(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static void RendererDrawChoice(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static void RendererDrawComboBox(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static void RendererDrawTextCtrl(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static void RendererDrawRadioBitmap(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static void RendererDrawGauge(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int value, int max, int flags);
static void RendererDrawItemText(void* renderer, void* win, DrawingContext* dc, const string& text, const RectI& rect, int align, int flags, int ellipsizeMode);
static string RendererGetVersion(void* renderer);
static void* MemoryAlloc(uint64_t size);
static void* MemoryRealloc(void* memory, uint64_t newSize);
static void MemoryFree(void* memory);
static void* MemoryCopy(void* dest, void* src, uint64_t count);
static void* MemoryMove(void* dest, void* src, uint64_t count);
static void* MemorySet(void* dest, int fillByte, uint64_t count);
static void* FsWatcherCreate();
static void FsWatcherDelete(void* handle);
static bool FsWatcherAdd(void* handle, const string& path, int events);
static bool FsWatcherAddTree(void* handle, const string& path, int events, const string& filter);
static int FsWatcherGetWatchedPathsCount(void* handle);
static bool FsWatcherRemove(void* handle, const string& path);
static bool FsWatcherRemoveAll(void* handle);
static bool FsWatcherRemoveTree(void* handle, const string& path);
static void FsWatcherSetOwner(void* handle, void* handler);
static void* SoundCreate();
static void* SoundCreate2(const string& fileName, bool isResource);
static void* SoundCreate4(uint64_t size, void* data);
static void SoundDelete(void* handle);
static bool SoundPlay2(const string& filename, uint32_t flags);
static bool SoundPlay(void* handle, uint32_t flags);
static void SoundStop();
static bool SoundIsOk(void* handle);
static void UIActionSimulatorDelete(void* handle);
static void* UIActionSimulatorCreate();
static bool UIActionSimulatorChar(void* handle, int keycode, int modifiers);
static bool UIActionSimulatorKeyDown(void* handle, int keycode, int modifiers);
static bool UIActionSimulatorKeyUp(void* handle, int keycode, int modifiers);
static bool UIActionSimulatorMouseClick(void* handle, int button);
static bool UIActionSimulatorMouseDblClick(void* handle, int button);
static bool UIActionSimulatorMouseDown(void* handle, int button);
static bool UIActionSimulatorMouseDragDrop(void* handle, int64_t x1, int64_t y1, int64_t x2, int64_t y2, int button);
static bool UIActionSimulatorMouseMove(void* handle, const PointI& point);
static bool UIActionSimulatorMouseUp(void* handle, int button);
static bool UIActionSimulatorSelect(void* handle, const string& text);
static bool UIActionSimulatorText(void* handle, const string& text);
static void UIActionSimulatorYield();
static void TestPopupWindow(void* parent, const PointI& pos, const SizeI& sz);
static void* CreateRichToolTip(const string& title, const string& message);
static void DeleteRichToolTip(void* handle);
static void RichToolTipSetBkColor(void* handle, const Color& color, const Color& endColor);
static void RichToolTipSetFgColor(void* handle, const Color& color);
static void RichToolTipSetTitleFgColor(void* handle, const Color& color);
static void RichToolTipSetIcon(void* handle, ImageSet* bitmapBundle);
static void RichToolTipSetIcon2(void* handle, int icon);
static void RichToolTipSetTimeout(void* handle, uint32_t milliseconds, uint32_t millisecondsShowdelay);
static void RichToolTipSetTipKind(void* handle, int tipKind);
static void RichToolTipSetTitleFont(void* handle, Font* font);
static void RichToolTipShowFor(void* handle, void* window, const RectI& rect);
static void* CreateToolTip(const string& tip);
static void DeleteToolTip(void* handle);
static string ToolTipGetTip(void* handle);
static void* ToolTipGetWindow(void* handle);
static void ToolTipSetTip(void* handle, const string& tip);
static void ToolTipEnable(bool flag);
static void ToolTipSetAutoPop(int64_t msecs);
static void ToolTipSetDelay(int64_t msecs);
static void ToolTipSetMaxWidth(int width);
static void ToolTipSetReshow(int64_t msecs);
static void* CreateCursor();
static void* CreateCursor2(int cursorId);
static void* CreateCursor3(const string& cursorName, int type, int hotSpotX, int hotSpotY);
static void* CreateCursor4(Image* image, int hotSpotX, int hotSpotY);
static void* CreateCursor5(void* image, int hotSpotX, int hotSpotY);
static void DeleteCursor(void* handle);
static bool CursorIsOk(void* handle);
static PointI CursorGetHotSpot(void* handle);
static void SetCursor(void* handle);
static int CaretGetBlinkTime();
static void CaretSetBlinkTime(int milliseconds);
static void DeleteCaret(void* handle);
static PointI CaretGetPosition(void* handle);
static SizeI CaretGetSize(void* handle);
static void CaretMove(void* handle, int x, int y);
static void CaretSetSize(void* handle, int width, int height);
static void* CreateCaret();
static void* CreateCaret2(void* window, int width, int height);
static void* CaretGetWindow(void* handle);
static void CaretHide(void* handle);
static bool CaretIsOk(void* handle);
static bool CaretIsVisible(void* handle);
static void CaretShow(void* handle, bool show);
static void* CreateDisplay();
static void* CreateDisplay2(uint32_t index);
static void* CreateDisplay3(void* window);
static void DeleteDisplay(void* handle);
static uint32_t DisplayGetCount();
static bool DisplayIsOk(void* handle);
static int DisplayGetFromPoint(const PointI& pt);
static int DisplayGetFromWindow(void* win);
static int DisplayGetStdPPIValue();
static SizeI DisplayGetStdPPI();
static string DisplayGetName(void* handle);
static SizeI DisplayGetPPI(void* handle);
static double DisplayGetScaleFactor(void* handle);
static bool DisplayIsPrimary(void* handle);
static RectI DisplayGetClientArea(void* handle);
static RectI DisplayGetGeometry(void* handle);
static bool SystemSettingsHasFeature(int index);
static Font* SystemSettingsGetFont(int index);
static Color SystemSettingsGetColor(int index);
static int SystemSettingsGetMetric(int index, void* win);
static string SystemAppearanceGetName();
static bool SystemAppearanceIsDark();
static bool SystemAppearanceIsUsingDarkBackground();
static bool IsBusyCursor();
static void BeginBusyCursor();
static void EndBusyCursor();
static void Bell();
static string GetTextFromUser(const string& message, const string& caption, const string& defaultValue, void* parent, int x, int y, bool centre);
static int64_t GetNumberFromUser(const string& message, const string& prompt, const string& caption, int64_t value, int64_t min, int64_t max, void* parent, const PointI& pos);
static int RendererDrawHeaderButton(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags, int sortArrow, void* headerButtonParams);
static int RendererDrawHeaderButtonContents(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags, int sortArrow, void* headerButtonParams);
static int RendererGetHeaderButtonHeight(void* renderer, void* win);
static int RendererGetHeaderButtonMargin(void* renderer, void* win);
static void RendererDrawTreeItemButton(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static void RendererDrawSplitterBorder(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static void RendererDrawSplitterSash(void* renderer, void* win, DrawingContext* dcReal, const SizeI& sizeReal, int position, int orientation, int flags);
static void RendererDrawComboBoxDropButton(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
static void RendererDrawDropArrow(void* renderer, void* win, DrawingContext* dc, const RectI& rect, int flags);
public:
WxOtherFactory();
protected:
virtual ~WxOtherFactory();
private:
BYREF_ONLY(WxOtherFactory);
