// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2023 AlterNET Software.</auto-generated>

#pragma once

#include "WxOtherFactory.h"
#include "ImageSet.h"
#include "Font.h"
#include "Image.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API WxOtherFactory* WxOtherFactory_Create_()
{
    return new WxOtherFactory();
}

ALTERNET_UI_API c_bool WxOtherFactory_GetRichToolTipUseGeneric_()
{
    return WxOtherFactory::GetRichToolTipUseGeneric();
}

ALTERNET_UI_API void WxOtherFactory_SetRichToolTipUseGeneric_(c_bool value)
{
    WxOtherFactory::SetRichToolTipUseGeneric(value);
}

ALTERNET_UI_API void* WxOtherFactory_CreateRichToolTip_(const char16_t* title, const char16_t* message)
{
    return WxOtherFactory::CreateRichToolTip(title, message);
}

ALTERNET_UI_API void WxOtherFactory_DeleteRichToolTip_(void* handle)
{
    WxOtherFactory::DeleteRichToolTip(handle);
}

ALTERNET_UI_API void WxOtherFactory_RichToolTipSetBkColor_(void* handle, Color color, Color endColor)
{
    WxOtherFactory::RichToolTipSetBkColor(handle, color, endColor);
}

ALTERNET_UI_API void WxOtherFactory_RichToolTipSetFgColor_(void* handle, Color color)
{
    WxOtherFactory::RichToolTipSetFgColor(handle, color);
}

ALTERNET_UI_API void WxOtherFactory_RichToolTipSetTitleFgColor_(void* handle, Color color)
{
    WxOtherFactory::RichToolTipSetTitleFgColor(handle, color);
}

ALTERNET_UI_API void WxOtherFactory_RichToolTipSetIcon_(void* handle, ImageSet* bitmapBundle)
{
    WxOtherFactory::RichToolTipSetIcon(handle, bitmapBundle);
}

ALTERNET_UI_API void WxOtherFactory_RichToolTipSetIcon2_(void* handle, int icon)
{
    WxOtherFactory::RichToolTipSetIcon2(handle, icon);
}

ALTERNET_UI_API void WxOtherFactory_RichToolTipSetTimeout_(void* handle, uint32_t milliseconds, uint32_t millisecondsShowdelay)
{
    WxOtherFactory::RichToolTipSetTimeout(handle, milliseconds, millisecondsShowdelay);
}

ALTERNET_UI_API void WxOtherFactory_RichToolTipSetTipKind_(void* handle, int tipKind)
{
    WxOtherFactory::RichToolTipSetTipKind(handle, tipKind);
}

ALTERNET_UI_API void WxOtherFactory_RichToolTipSetTitleFont_(void* handle, Font* font)
{
    WxOtherFactory::RichToolTipSetTitleFont(handle, font);
}

ALTERNET_UI_API void WxOtherFactory_RichToolTipShowFor_(void* handle, void* window, Int32Rect rect)
{
    WxOtherFactory::RichToolTipShowFor(handle, window, rect);
}

ALTERNET_UI_API void* WxOtherFactory_CreateToolTip_(const char16_t* tip)
{
    return WxOtherFactory::CreateToolTip(tip);
}

ALTERNET_UI_API void WxOtherFactory_DeleteToolTip_(void* handle)
{
    WxOtherFactory::DeleteToolTip(handle);
}

ALTERNET_UI_API char16_t* WxOtherFactory_ToolTipGetTip_(void* handle)
{
    return AllocPInvokeReturnString(WxOtherFactory::ToolTipGetTip(handle));
}

ALTERNET_UI_API void* WxOtherFactory_ToolTipGetWindow_(void* handle)
{
    return WxOtherFactory::ToolTipGetWindow(handle);
}

ALTERNET_UI_API void WxOtherFactory_ToolTipSetTip_(void* handle, const char16_t* tip)
{
    WxOtherFactory::ToolTipSetTip(handle, tip);
}

ALTERNET_UI_API void WxOtherFactory_ToolTipEnable_(c_bool flag)
{
    WxOtherFactory::ToolTipEnable(flag);
}

ALTERNET_UI_API void WxOtherFactory_ToolTipSetAutoPop_(int64_t msecs)
{
    WxOtherFactory::ToolTipSetAutoPop(msecs);
}

ALTERNET_UI_API void WxOtherFactory_ToolTipSetDelay_(int64_t msecs)
{
    WxOtherFactory::ToolTipSetDelay(msecs);
}

ALTERNET_UI_API void WxOtherFactory_ToolTipSetMaxWidth_(int width)
{
    WxOtherFactory::ToolTipSetMaxWidth(width);
}

ALTERNET_UI_API void WxOtherFactory_ToolTipSetReshow_(int64_t msecs)
{
    WxOtherFactory::ToolTipSetReshow(msecs);
}

ALTERNET_UI_API void* WxOtherFactory_CreateCursor_()
{
    return WxOtherFactory::CreateCursor();
}

ALTERNET_UI_API void* WxOtherFactory_CreateCursor2_(int cursorId)
{
    return WxOtherFactory::CreateCursor2(cursorId);
}

ALTERNET_UI_API void* WxOtherFactory_CreateCursor3_(const char16_t* cursorName, int type, int hotSpotX, int hotSpotY)
{
    return WxOtherFactory::CreateCursor3(cursorName, type, hotSpotX, hotSpotY);
}

ALTERNET_UI_API void* WxOtherFactory_CreateCursor4_(Image* image)
{
    return WxOtherFactory::CreateCursor4(image);
}

ALTERNET_UI_API void WxOtherFactory_DeleteCursor_(void* handle)
{
    WxOtherFactory::DeleteCursor(handle);
}

ALTERNET_UI_API c_bool WxOtherFactory_CursorIsOk_(void* handle)
{
    return WxOtherFactory::CursorIsOk(handle);
}

ALTERNET_UI_API Int32Point_C WxOtherFactory_CursorGetHotSpot_(void* handle)
{
    return WxOtherFactory::CursorGetHotSpot(handle);
}

ALTERNET_UI_API int WxOtherFactory_CaretGetBlinkTime_()
{
    return WxOtherFactory::CaretGetBlinkTime();
}

ALTERNET_UI_API void WxOtherFactory_CaretSetBlinkTime_(int milliseconds)
{
    WxOtherFactory::CaretSetBlinkTime(milliseconds);
}

ALTERNET_UI_API void WxOtherFactory_DeleteCaret_(void* handle)
{
    WxOtherFactory::DeleteCaret(handle);
}

ALTERNET_UI_API Int32Point_C WxOtherFactory_CaretGetPosition_(void* handle)
{
    return WxOtherFactory::CaretGetPosition(handle);
}

ALTERNET_UI_API Int32Size_C WxOtherFactory_CaretGetSize_(void* handle)
{
    return WxOtherFactory::CaretGetSize(handle);
}

ALTERNET_UI_API void WxOtherFactory_CaretMove_(void* handle, int x, int y)
{
    WxOtherFactory::CaretMove(handle, x, y);
}

ALTERNET_UI_API void WxOtherFactory_CaretSetSize_(void* handle, int width, int height)
{
    WxOtherFactory::CaretSetSize(handle, width, height);
}

ALTERNET_UI_API void* WxOtherFactory_CreateCaret_()
{
    return WxOtherFactory::CreateCaret();
}

ALTERNET_UI_API void* WxOtherFactory_CreateCaret2_(void* window, int width, int height)
{
    return WxOtherFactory::CreateCaret2(window, width, height);
}

ALTERNET_UI_API void* WxOtherFactory_CaretGetWindow_(void* handle)
{
    return WxOtherFactory::CaretGetWindow(handle);
}

ALTERNET_UI_API void WxOtherFactory_CaretHide_(void* handle)
{
    WxOtherFactory::CaretHide(handle);
}

ALTERNET_UI_API c_bool WxOtherFactory_CaretIsOk_(void* handle)
{
    return WxOtherFactory::CaretIsOk(handle);
}

ALTERNET_UI_API c_bool WxOtherFactory_CaretIsVisible_(void* handle)
{
    return WxOtherFactory::CaretIsVisible(handle);
}

ALTERNET_UI_API void WxOtherFactory_CaretShow_(void* handle, c_bool show)
{
    WxOtherFactory::CaretShow(handle, show);
}

ALTERNET_UI_API void* WxOtherFactory_CreateDisplay_()
{
    return WxOtherFactory::CreateDisplay();
}

ALTERNET_UI_API void* WxOtherFactory_CreateDisplay2_(uint32_t index)
{
    return WxOtherFactory::CreateDisplay2(index);
}

ALTERNET_UI_API void* WxOtherFactory_CreateDisplay3_(void* window)
{
    return WxOtherFactory::CreateDisplay3(window);
}

ALTERNET_UI_API void WxOtherFactory_DeleteDisplay_(void* handle)
{
    WxOtherFactory::DeleteDisplay(handle);
}

ALTERNET_UI_API uint32_t WxOtherFactory_DisplayGetCount_()
{
    return WxOtherFactory::DisplayGetCount();
}

ALTERNET_UI_API int WxOtherFactory_DisplayGetFromPoint_(Int32Point pt)
{
    return WxOtherFactory::DisplayGetFromPoint(pt);
}

ALTERNET_UI_API int WxOtherFactory_DisplayGetFromWindow_(void* win)
{
    return WxOtherFactory::DisplayGetFromWindow(win);
}

ALTERNET_UI_API int WxOtherFactory_DisplayGetStdPPIValue_()
{
    return WxOtherFactory::DisplayGetStdPPIValue();
}

ALTERNET_UI_API Int32Size_C WxOtherFactory_DisplayGetStdPPI_()
{
    return WxOtherFactory::DisplayGetStdPPI();
}

ALTERNET_UI_API char16_t* WxOtherFactory_DisplayGetName_(void* handle)
{
    return AllocPInvokeReturnString(WxOtherFactory::DisplayGetName(handle));
}

ALTERNET_UI_API Int32Size_C WxOtherFactory_DisplayGetPPI_(void* handle)
{
    return WxOtherFactory::DisplayGetPPI(handle);
}

ALTERNET_UI_API double WxOtherFactory_DisplayGetScaleFactor_(void* handle)
{
    return WxOtherFactory::DisplayGetScaleFactor(handle);
}

ALTERNET_UI_API c_bool WxOtherFactory_DisplayIsPrimary_(void* handle)
{
    return WxOtherFactory::DisplayIsPrimary(handle);
}

ALTERNET_UI_API Int32Rect_C WxOtherFactory_DisplayGetClientArea_(void* handle)
{
    return WxOtherFactory::DisplayGetClientArea(handle);
}

ALTERNET_UI_API Int32Rect_C WxOtherFactory_DisplayGetGeometry_(void* handle)
{
    return WxOtherFactory::DisplayGetGeometry(handle);
}

ALTERNET_UI_API c_bool WxOtherFactory_SystemSettingsHasFeature_(int index)
{
    return WxOtherFactory::SystemSettingsHasFeature(index);
}

ALTERNET_UI_API Font* WxOtherFactory_SystemSettingsGetFont_(int index)
{
    return WxOtherFactory::SystemSettingsGetFont(index);
}

ALTERNET_UI_API Color_C WxOtherFactory_SystemSettingsGetColor_(int index)
{
    return WxOtherFactory::SystemSettingsGetColor(index);
}

ALTERNET_UI_API int WxOtherFactory_SystemSettingsGetMetric_(int index, void* win)
{
    return WxOtherFactory::SystemSettingsGetMetric(index, win);
}

ALTERNET_UI_API char16_t* WxOtherFactory_SystemAppearanceGetName_()
{
    return AllocPInvokeReturnString(WxOtherFactory::SystemAppearanceGetName());
}

ALTERNET_UI_API c_bool WxOtherFactory_SystemAppearanceIsDark_()
{
    return WxOtherFactory::SystemAppearanceIsDark();
}

ALTERNET_UI_API c_bool WxOtherFactory_SystemAppearanceIsUsingDarkBackground_()
{
    return WxOtherFactory::SystemAppearanceIsUsingDarkBackground();
}

