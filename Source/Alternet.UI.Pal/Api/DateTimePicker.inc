// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
bool GetHasBorder();
void SetHasBorder(bool value);

DateTime GetValue();
void SetValue(const DateTime& value);

DateTime GetMinValue();
void SetMinValue(const DateTime& value);

DateTime GetMaxValue();
void SetMaxValue(const DateTime& value);

int GetValueKind();
void SetValueKind(int value);

int GetPopupKind();
void SetPopupKind(int value);

void SetRange(bool useMinValue, bool useMaxValue);

public:

enum class DateTimePickerEvent
{
    ValueChanged,
};

typedef void* (*DateTimePickerEventCallbackType)(DateTimePicker* obj, DateTimePickerEvent event, void* param);

static void SetEventCallback(DateTimePickerEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(DateTimePickerEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(DateTimePickerEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(DateTimePickerEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static DateTimePickerEventCallbackType eventCallback = nullptr;

public:
DateTimePicker();

protected:
virtual ~DateTimePicker();

private:
BYREF_ONLY(DateTimePicker);
