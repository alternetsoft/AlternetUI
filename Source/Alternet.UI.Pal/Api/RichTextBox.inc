// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
bool GetHasBorder();
void SetHasBorder(bool value);

string GetReportedUrl();

bool LoadFromStream(void* stream, int type);
bool SaveToStream(void* stream, int type);
bool ApplyStyleToSelection(void* style, int flags);
static void InitFileHandlers();
string GetRange(int64_t from, int64_t to);
int GetLineLength(int64_t lineNo);
string GetLineText(int64_t lineNo);
int GetNumberOfLines();
bool IsModified();
bool IsEditable();
bool IsSingleLine();
bool IsMultiLine();
string GetStringSelection();
string GetFilename();
void SetFilename(const string& filename);
void SetDelayedLayoutThreshold(int64_t threshold);
int64_t GetDelayedLayoutThreshold();
bool GetFullLayoutRequired();
void SetFullLayoutRequired(bool b);
int64_t GetFullLayoutTime();
void SetFullLayoutTime(int64_t t);
int64_t GetFullLayoutSavedPosition();
void SetFullLayoutSavedPosition(int64_t p);
void ForceDelayedLayout();
bool GetCaretAtLineStart();
void SetCaretAtLineStart(bool atStart);
bool GetDragging();
void SetDragging(bool dragging);
void* GetContextMenu();
void SetContextMenu(void* menu);
int64_t GetSelectionAnchor();
void SetSelectionAnchor(int64_t anchor);
void* GetSelectionAnchorObject();
void SetSelectionAnchorObject(void* anchor);
void* GetFocusObject();
void StoreFocusObject(void* richObj);
bool SetFocusObject(void* richObj, bool setCaretPosition);
void Invalidate();
void Clear();
void Replace(int64_t from, int64_t to, const string& value);
void Remove(int64_t from, int64_t to);
bool LoadFile(const string& file, int type);
bool SaveFile(const string& file, int type);
void SetHandlerFlags(int flags);
int GetHandlerFlags();
void MarkDirty();
void DiscardEdits();
void SetMaxLength(uint64_t len);
void WriteText(const string& text);
void AppendText(const string& text);
int64_t XYToPosition(int64_t x, int64_t y);
void ShowPosition(int64_t pos);
void Copy();
void Cut();
void Paste();
void DeleteSelection();
bool CanCopy();
bool CanCut();
bool CanPaste();
bool CanDeleteSelection();
void Undo();
void Redo();
bool CanUndo();
bool CanRedo();
void SetInsertionPoint(int64_t pos);
void SetInsertionPointEnd();
int64_t GetInsertionPoint();
void SetSelection(int64_t from, int64_t to);
void SetEditable(bool editable);
bool HasSelection();
bool HasUnfocusedSelection();
bool Newline();
bool LineBreak();
bool EndStyle();
bool EndAllStyles();
bool BeginBold();
bool EndBold();
bool BeginItalic();
bool EndItalic();
bool BeginUnderline();
bool EndUnderline();
bool BeginFontSize(int pointSize);
bool EndFontSize();
bool BeginFont(Font* font);
bool EndFont();
bool BeginTextColour(const Color& colour);
bool EndTextColour();
bool BeginAlignment(int alignment);
bool EndAlignment();
bool BeginLeftIndent(int leftIndent, int leftSubIndent);
bool EndLeftIndent();
bool BeginRightIndent(int rightIndent);
bool EndRightIndent();
bool BeginParagraphSpacing(int before, int after);
bool EndParagraphSpacing();
bool BeginLineSpacing(int lineSpacing);
bool EndLineSpacing();
bool BeginNumberedBullet(int bulletNumber, int leftIndent, int leftSubIndent, int bulletStyle);
bool EndNumberedBullet();
bool BeginSymbolBullet(const string& symbol, int leftIndent, int leftSubIndent, int bulletStyle);
bool EndSymbolBullet();
bool BeginStandardBullet(const string& bulletName, int leftIndent, int leftSubIndent, int bulletStyle);
bool EndStandardBullet();
bool BeginCharacterStyle(const string& characterStyle);
bool EndCharacterStyle();
bool BeginParagraphStyle(const string& paragraphStyle);
bool EndParagraphStyle();
bool BeginListStyle(const string& listStyle, int level, int number);
bool EndListStyle();
bool BeginURL(const string& url, const string& characterStyle);
bool EndURL();
bool IsSelectionBold();
bool IsSelectionItalics();
bool IsSelectionUnderlined();
bool DoesSelectionHaveTextEffectFlag(int flag);
bool IsSelectionAligned(int alignment);
bool ApplyBoldToSelection();
bool ApplyItalicToSelection();
bool ApplyUnderlineToSelection();
bool ApplyTextEffectToSelection(int flags);
bool ApplyAlignmentToSelection(int alignment);
bool ApplyStyle(void* def);
void SetStyleSheet(void* styleSheet);
bool SetDefaultStyleToCursorStyle();
void SelectNone();
bool SelectWord(int64_t position);
bool LayoutContent(bool onlyVisibleRect);
bool MoveCaret(int64_t pos, bool showAtLineStart, void* container);
bool MoveRight(int noPositions, int flags);
bool MoveLeft(int noPositions, int flags);
bool MoveUp(int noLines, int flags);
bool MoveDown(int noLines, int flags);
bool MoveToLineEnd(int flags);
bool MoveToLineStart(int flags);
bool MoveToParagraphEnd(int flags);
bool MoveToParagraphStart(int flags);
bool MoveHome(int flags);
bool MoveEnd(int flags);
bool PageUp(int noPages, int flags);
bool PageDown(int noPages, int flags);
bool WordLeft(int noPages, int flags);
bool WordRight(int noPages, int flags);
bool PushStyleSheet(void* styleSheet);
void* PopStyleSheet();
bool ApplyStyleSheet(void* styleSheet);
bool ShowContextMenu(void* menu, const PointI& pt, bool addPropertyCommands);
int PrepareContextMenu(void* menu, const PointI& pt, bool addPropertyCommands);
bool CanEditProperties(void* richObj);
bool EditProperties(void* richObj, void* parentWindow);
string GetPropertiesMenuLabel(void* richObj);
bool BeginBatchUndo(const string& cmdName);
bool EndBatchUndo();
bool BatchingUndo();
bool BeginSuppressUndo();
bool EndSuppressUndo();
bool SuppressingUndo();
void EnableVerticalScrollbar(bool enable);
bool GetVerticalScrollbarEnabled();
void SetFontScale(double fontScale, bool refresh);
double GetFontScale();
bool GetVirtualAttributesEnabled();
void EnableVirtualAttributes(bool b);
void DoWriteText(const string& value, int flags);
bool ExtendSelection(int64_t oldPosition, int64_t newPosition, int flags);
bool ExtendCellSelection(void* table, int noRowSteps, int noColSteps);
bool StartCellSelection(void* table, void* newCell);
bool ScrollIntoView(int64_t position, int keyCode);
void SetCaretPosition(int64_t position, bool showAtLineStart);
int64_t GetCaretPosition();
int64_t GetAdjustedCaretPosition(int64_t caretPos);
void MoveCaretForward(int64_t oldPosition);
PointI GetPhysicalPoint(const PointI& ptLogical);
PointI GetLogicalPoint(const PointI& ptPhysical);
int64_t FindNextWordPosition(int direction);
bool IsPositionVisible(int64_t pos);
int64_t GetFirstVisiblePosition();
int64_t GetCaretPositionForDefaultStyle();
void SetCaretPositionForDefaultStyle(int64_t pos);
void MoveCaretBack(int64_t oldPosition);
bool GetCaretPositionForIndex(int64_t position, const RectI& rect, void* container);
void* GetVisibleLineForCaretPosition(int64_t caretPosition);
void* GetCommandProcessor();
bool IsDefaultStyleShowing();
PointI GetFirstVisiblePoint();
void EnableImages(bool b);
bool GetImagesEnabled();
void EnableDelayedImageLoading(bool b);
bool GetDelayedImageLoading();
bool GetDelayedImageProcessingRequired();
void SetDelayedImageProcessingRequired(bool b);
int64_t GetDelayedImageProcessingTime();
void SetDelayedImageProcessingTime(int64_t t);
string GetValue();
void SetValue(const string& value);
void SetLineHeight(int height);
int GetLineHeight();
bool SetCaretPositionAfterClick(void* container, int64_t position, int hitTestFlags, bool extendSelection);
static void ClearAvailableFontNames();
bool ProcessDelayedImageLoading(bool refresh);
void RequestDelayedImageProcessing();
bool GetUncombinedStyle(int64_t position, void* style);
bool GetUncombinedStyle2(int64_t position, void* style, void* container);
bool SetDefaultStyle(void* style);
bool SetDefaultRichStyle(void* style);
void* GetDefaultStyleEx();
int64_t GetLastPosition();
void* GetStyle(int64_t position);
void* GetRichStyle(int64_t position);
void* GetStyleInContainer(int64_t position, void* container);
bool SetStyle(int64_t start, int64_t end, void* style);
bool SetRichStyle(int64_t start, int64_t end, void* style);
void SetStyle2(void* richObj, void* textAttr, int flags);
void* GetStyleForRange(int64_t startRange, int64_t endRange);
void* GetStyleForRange2(int64_t startRange, int64_t endRange);
void* GetStyleForRange3(int64_t startRange, int64_t endRange, void* container);
bool SetStyleEx(int64_t startRange, int64_t endRange, void* style, int flags);
bool SetListStyle(int64_t startRange, int64_t endRange, void* def, int flags, int startFrom, int specifiedLevel);
bool SetListStyle2(int64_t startRange, int64_t endRange, const string& defName, int flags, int startFrom, int specifiedLevel);
bool ClearListStyle(int64_t startRange, int64_t endRange, int flags);
bool NumberList(int64_t startRange, int64_t endRange, void* def, int flags, int startFrom, int specifiedLevel);
bool NumberList2(int64_t startRange, int64_t endRange, const string& defName, int flags, int startFrom, int specifiedLevel);
bool PromoteList(int promoteBy, int64_t startRange, int64_t endRange, void* def, int flags, int specifiedLevel);
bool PromoteList2(int promoteBy, int64_t startRange, int64_t endRange, const string& defName, int flags, int specifiedLevel);
bool Delete(int64_t startRange, int64_t endRange);
void* WriteTable(int rows, int cols, void* tableAttr, void* cellAttr);
void SetBasicStyle(void* style);
void* GetBasicStyle();
bool BeginStyle(void* style);
bool HasCharacterAttributes(int64_t startRange, int64_t endRange, void* style);
void* GetStyleSheet();
void SetAndShowDefaultStyle(void* attr);
void SetSelectionRange(int64_t startRange, int64_t endRange);
PointI PositionToXY(int64_t pos);
void* WriteTextBox(void* textAttr);
bool HasParagraphAttributes(int64_t startRange, int64_t endRange, void* style);
bool SetProperties(int64_t startRange, int64_t endRange, void* properties, int flags);
void SetTextCursor(void* cursor);
void* GetTextCursor();
void SetURLCursor(void* cursor);
void* GetURLCursor();
void* GetSelection();
void* GetContextMenuPropertiesInfo();
void SetSelection2(void* sel);
bool WriteImage(Image* bitmap, int bitmapType, void* textAttr);
bool WriteImage2(const string& filename, int bitmapType, void* textAttr);
bool WriteImage3(void* imageBlock, void* textAttr);
void* WriteField(const string& fieldType, void* properties, void* textAttr);
bool CanDeleteRange(void* container, int64_t startRange, int64_t endRange);
bool CanInsertContent(void* container, int64_t pos);
void* GetBuffer();
int64_t DeleteSelectedContent();

public:

enum class RichTextBoxEvent
{
    TextEnter,
    TextUrl,
};

typedef void* (*RichTextBoxEventCallbackType)(RichTextBox* obj, RichTextBoxEvent event, void* param);

static void SetEventCallback(RichTextBoxEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(RichTextBoxEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(RichTextBoxEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(RichTextBoxEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static RichTextBoxEventCallbackType eventCallback = nullptr;

public:
RichTextBox();

protected:
virtual ~RichTextBox();

private:
BYREF_ONLY(RichTextBox);
