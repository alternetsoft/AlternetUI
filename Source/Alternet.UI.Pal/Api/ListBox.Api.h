// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2022.</auto-generated>

#pragma once

#include "ListBox.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API ListBox* ListBox_Create_()
{
    return MarshalExceptions<ListBox*>([&](){
            return new ListBox();
        });
}

ALTERNET_UI_API int ListBox_GetItemsCount_(ListBox* obj)
{
    return MarshalExceptions<int>([&](){
            return obj->GetItemsCount();
        });
}

ALTERNET_UI_API ListBoxSelectionMode ListBox_GetSelectionMode_(ListBox* obj)
{
    return MarshalExceptions<ListBoxSelectionMode>([&](){
            return obj->GetSelectionMode();
        });
}

ALTERNET_UI_API void ListBox_SetSelectionMode_(ListBox* obj, ListBoxSelectionMode value)
{
    MarshalExceptions<void>([&](){
            obj->SetSelectionMode(value);
        });
}

ALTERNET_UI_API void* ListBox_OpenSelectedIndicesArray_(ListBox* obj)
{
    return MarshalExceptions<void*>([&](){
            return obj->OpenSelectedIndicesArray();
        });
}

ALTERNET_UI_API int ListBox_GetSelectedIndicesItemCount_(ListBox* obj, void* array)
{
    return MarshalExceptions<int>([&](){
            return obj->GetSelectedIndicesItemCount(array);
        });
}

ALTERNET_UI_API int ListBox_GetSelectedIndicesItemAt_(ListBox* obj, void* array, int index)
{
    return MarshalExceptions<int>([&](){
            return obj->GetSelectedIndicesItemAt(array, index);
        });
}

ALTERNET_UI_API void ListBox_CloseSelectedIndicesArray_(ListBox* obj, void* array)
{
    MarshalExceptions<void>([&](){
            obj->CloseSelectedIndicesArray(array);
        });
}

ALTERNET_UI_API void ListBox_InsertItem_(ListBox* obj, int index, const char16_t* value)
{
    MarshalExceptions<void>([&](){
            obj->InsertItem(index, value);
        });
}

ALTERNET_UI_API void ListBox_RemoveItemAt_(ListBox* obj, int index)
{
    MarshalExceptions<void>([&](){
            obj->RemoveItemAt(index);
        });
}

ALTERNET_UI_API void ListBox_ClearItems_(ListBox* obj)
{
    MarshalExceptions<void>([&](){
            obj->ClearItems();
        });
}

ALTERNET_UI_API void ListBox_ClearSelected_(ListBox* obj)
{
    MarshalExceptions<void>([&](){
            obj->ClearSelected();
        });
}

ALTERNET_UI_API void ListBox_SetSelected_(ListBox* obj, int index, c_bool value)
{
    MarshalExceptions<void>([&](){
            obj->SetSelected(index, value);
        });
}

ALTERNET_UI_API void ListBox_EnsureVisible_(ListBox* obj, int itemIndex)
{
    MarshalExceptions<void>([&](){
            obj->EnsureVisible(itemIndex);
        });
}

ALTERNET_UI_API int ListBox_ItemHitTest_(ListBox* obj, Point position)
{
    return MarshalExceptions<int>([&](){
            return obj->ItemHitTest(position);
        });
}

ALTERNET_UI_API void ListBox_SetEventCallback_(ListBox::ListBoxEventCallbackType callback)
{
    ListBox::SetEventCallback(callback);
}

