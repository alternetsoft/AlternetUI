// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
double GetM11();
void SetM11(double value);

double GetM12();
void SetM12(double value);

double GetM21();
void SetM21(double value);

double GetM22();
void SetM22(double value);

double GetDX();
void SetDX(double value);

double GetDY();
void SetDY(double value);

bool GetIsIdentity();

void Initialize(double m11, double m12, double m21, double m22, double dx, double dy);
void Reset();
void Multiply(TransformMatrix* matrix);
void Translate(double offsetX, double offsetY);
void Scale(double scaleX, double scaleY);
void Rotate(double angle);
void Invert();
PointD TransformPoint(const PointD& point);
SizeD TransformSize(const SizeD& size);
bool IsEqualTo(TransformMatrix* other);
int GetHashCode_();

public:
TransformMatrix();

protected:
virtual ~TransformMatrix();

private:
BYREF_ONLY(TransformMatrix);
