// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
public:

static bool GetImagesEnabled();
static void SetImagesEnabled(bool value);


bool GetExactFit();
void SetExactFit(bool value);


bool GetIsDefault();
void SetIsDefault(bool value);


bool GetHasBorder();
void SetHasBorder(bool value);


bool GetIsCancel();
void SetIsCancel(bool value);


Image* GetNormalImage();
void SetNormalImage(Image* value);


Image* GetHoveredImage();
void SetHoveredImage(Image* value);


Image* GetPressedImage();
void SetPressedImage(Image* value);


Image* GetDisabledImage();
void SetDisabledImage(Image* value);


Image* GetFocusedImage();
void SetFocusedImage(Image* value);


bool GetTextVisible();
void SetTextVisible(bool value);


int GetTextAlign();
void SetTextAlign(int value);

void SetImagePosition(int dir);
void SetImageMargins(double x, double y);
public:
enum class ButtonEvent
{
    Click,
};
typedef void* (*ButtonEventCallbackType)(Button* obj, ButtonEvent event, void* param);
static void SetEventCallback(ButtonEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(ButtonEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(ButtonEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static ButtonEventCallbackType eventCallback = nullptr;
public:
Button();
protected:
virtual ~Button();
private:
BYREF_ONLY(Button);
