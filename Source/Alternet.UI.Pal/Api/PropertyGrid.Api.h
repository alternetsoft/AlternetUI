// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2023 AlterNET Software.</auto-generated>

#pragma once

#include "PropertyGrid.h"
#include "ImageSet.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API PropertyGrid* PropertyGrid_Create_()
{
    return new PropertyGrid();
}

ALTERNET_UI_API int PropertyGrid_GetEventValidationFailureBehavior_(PropertyGrid* obj)
{
    return obj->GetEventValidationFailureBehavior();
}

ALTERNET_UI_API void PropertyGrid_SetEventValidationFailureBehavior_(PropertyGrid* obj, int value)
{
    obj->SetEventValidationFailureBehavior(value);
}

ALTERNET_UI_API void* PropertyGrid_GetEventPropValue_(PropertyGrid* obj)
{
    return obj->GetEventPropValue();
}

ALTERNET_UI_API int PropertyGrid_GetEventColumn_(PropertyGrid* obj)
{
    return obj->GetEventColumn();
}

ALTERNET_UI_API void* PropertyGrid_GetEventProperty_(PropertyGrid* obj)
{
    return obj->GetEventProperty();
}

ALTERNET_UI_API char16_t* PropertyGrid_GetEventPropertyName_(PropertyGrid* obj)
{
    return AllocPInvokeReturnString(obj->GetEventPropertyName());
}

ALTERNET_UI_API char16_t* PropertyGrid_GetEventValidationFailureMessage_(PropertyGrid* obj)
{
    return AllocPInvokeReturnString(obj->GetEventValidationFailureMessage());
}

ALTERNET_UI_API void PropertyGrid_SetEventValidationFailureMessage_(PropertyGrid* obj, const char16_t* value)
{
    obj->SetEventValidationFailureMessage(value);
}

ALTERNET_UI_API char16_t* PropertyGrid_GetNameAsLabel_()
{
    return AllocPInvokeReturnString(PropertyGrid::GetNameAsLabel());
}

ALTERNET_UI_API c_bool PropertyGrid_GetHasBorder_(PropertyGrid* obj)
{
    return obj->GetHasBorder();
}

ALTERNET_UI_API void PropertyGrid_SetHasBorder_(PropertyGrid* obj, c_bool value)
{
    obj->SetHasBorder(value);
}

ALTERNET_UI_API int64_t PropertyGrid_GetCreateStyle_(PropertyGrid* obj)
{
    return obj->GetCreateStyle();
}

ALTERNET_UI_API void PropertyGrid_SetCreateStyle_(PropertyGrid* obj, int64_t value)
{
    obj->SetCreateStyle(value);
}

ALTERNET_UI_API int64_t PropertyGrid_GetCreateStyleEx_(PropertyGrid* obj)
{
    return obj->GetCreateStyleEx();
}

ALTERNET_UI_API void PropertyGrid_SetCreateStyleEx_(PropertyGrid* obj, int64_t value)
{
    obj->SetCreateStyleEx(value);
}

ALTERNET_UI_API void* PropertyGrid_AppendIn_(PropertyGrid* obj, void* id, void* newproperty)
{
    return obj->AppendIn(id, newproperty);
}

ALTERNET_UI_API void PropertyGrid_BeginAddChildren_(PropertyGrid* obj, void* id)
{
    obj->BeginAddChildren(id);
}

ALTERNET_UI_API c_bool PropertyGrid_Collapse_(PropertyGrid* obj, void* id)
{
    return obj->Collapse(id);
}

ALTERNET_UI_API void PropertyGrid_DeleteProperty_(PropertyGrid* obj, void* id)
{
    obj->DeleteProperty(id);
}

ALTERNET_UI_API void* PropertyGrid_RemoveProperty_(PropertyGrid* obj, void* id)
{
    return obj->RemoveProperty(id);
}

ALTERNET_UI_API c_bool PropertyGrid_DisableProperty_(PropertyGrid* obj, void* id)
{
    return obj->DisableProperty(id);
}

ALTERNET_UI_API c_bool PropertyGrid_EnableProperty_(PropertyGrid* obj, void* id, c_bool enable)
{
    return obj->EnableProperty(id, enable);
}

ALTERNET_UI_API void PropertyGrid_EndAddChildren_(PropertyGrid* obj, void* id)
{
    obj->EndAddChildren(id);
}

ALTERNET_UI_API c_bool PropertyGrid_Expand_(PropertyGrid* obj, void* id)
{
    return obj->Expand(id);
}

ALTERNET_UI_API void* PropertyGrid_GetFirstChild_(PropertyGrid* obj, void* id)
{
    return obj->GetFirstChild(id);
}

ALTERNET_UI_API void* PropertyGrid_GetPropertyCategory_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyCategory(id);
}

ALTERNET_UI_API void* PropertyGrid_GetPropertyClientData_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyClientData(id);
}

ALTERNET_UI_API char16_t* PropertyGrid_GetPropertyHelpString_(PropertyGrid* obj, void* id)
{
    return AllocPInvokeReturnString(obj->GetPropertyHelpString(id));
}

ALTERNET_UI_API void* PropertyGrid_GetPropertyImage_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyImage(id);
}

ALTERNET_UI_API char16_t* PropertyGrid_GetPropertyLabel_(PropertyGrid* obj, void* id)
{
    return AllocPInvokeReturnString(obj->GetPropertyLabel(id));
}

ALTERNET_UI_API void* PropertyGrid_GetPropertyParent_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyParent(id);
}

ALTERNET_UI_API void* PropertyGrid_GetPropertyValueAsVariant_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyValueAsVariant(id);
}

ALTERNET_UI_API char16_t* PropertyGrid_GetPropertyValueAsString_(PropertyGrid* obj, void* id)
{
    return AllocPInvokeReturnString(obj->GetPropertyValueAsString(id));
}

ALTERNET_UI_API int64_t PropertyGrid_GetPropertyValueAsLong_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyValueAsLong(id);
}

ALTERNET_UI_API uint64_t PropertyGrid_GetPropertyValueAsULong_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyValueAsULong(id);
}

ALTERNET_UI_API int PropertyGrid_GetPropertyValueAsInt_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyValueAsInt(id);
}

ALTERNET_UI_API c_bool PropertyGrid_GetPropertyValueAsBool_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyValueAsBool(id);
}

ALTERNET_UI_API double PropertyGrid_GetPropertyValueAsDouble_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyValueAsDouble(id);
}

ALTERNET_UI_API DateTime_C PropertyGrid_GetPropertyValueAsDateTime_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyValueAsDateTime(id);
}

ALTERNET_UI_API c_bool PropertyGrid_HideProperty_(PropertyGrid* obj, void* id, c_bool hide, int flags)
{
    return obj->HideProperty(id, hide, flags);
}

ALTERNET_UI_API void* PropertyGrid_Insert_(PropertyGrid* obj, void* priorThis, void* newproperty)
{
    return obj->Insert(priorThis, newproperty);
}

ALTERNET_UI_API void* PropertyGrid_InsertByIndex_(PropertyGrid* obj, void* parent, int index, void* newproperty)
{
    return obj->InsertByIndex(parent, index, newproperty);
}

ALTERNET_UI_API c_bool PropertyGrid_IsPropertyCategory_(PropertyGrid* obj, void* id)
{
    return obj->IsPropertyCategory(id);
}

ALTERNET_UI_API c_bool PropertyGrid_IsPropertyEnabled_(PropertyGrid* obj, void* id)
{
    return obj->IsPropertyEnabled(id);
}

ALTERNET_UI_API c_bool PropertyGrid_IsPropertyExpanded_(PropertyGrid* obj, void* id)
{
    return obj->IsPropertyExpanded(id);
}

ALTERNET_UI_API c_bool PropertyGrid_IsPropertyModified_(PropertyGrid* obj, void* id)
{
    return obj->IsPropertyModified(id);
}

ALTERNET_UI_API c_bool PropertyGrid_IsPropertySelected_(PropertyGrid* obj, void* id)
{
    return obj->IsPropertySelected(id);
}

ALTERNET_UI_API c_bool PropertyGrid_IsPropertyShown_(PropertyGrid* obj, void* id)
{
    return obj->IsPropertyShown(id);
}

ALTERNET_UI_API c_bool PropertyGrid_IsPropertyValueUnspecified_(PropertyGrid* obj, void* id)
{
    return obj->IsPropertyValueUnspecified(id);
}

ALTERNET_UI_API void PropertyGrid_LimitPropertyEditing_(PropertyGrid* obj, void* id, c_bool limit)
{
    obj->LimitPropertyEditing(id, limit);
}

ALTERNET_UI_API void* PropertyGrid_ReplaceProperty_(PropertyGrid* obj, void* id, void* property)
{
    return obj->ReplaceProperty(id, property);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyBackgroundColor_(PropertyGrid* obj, void* id, Color color, int flags)
{
    obj->SetPropertyBackgroundColor(id, color, flags);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyColorsToDefault_(PropertyGrid* obj, void* id, int flags)
{
    obj->SetPropertyColorsToDefault(id, flags);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyTextColor_(PropertyGrid* obj, void* id, Color col, int flags)
{
    obj->SetPropertyTextColor(id, col, flags);
}

ALTERNET_UI_API Color_C PropertyGrid_GetPropertyBackgroundColor_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyBackgroundColor(id);
}

ALTERNET_UI_API Color_C PropertyGrid_GetPropertyTextColor_(PropertyGrid* obj, void* id)
{
    return obj->GetPropertyTextColor(id);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyClientData_(PropertyGrid* obj, void* id, void* clientData)
{
    obj->SetPropertyClientData(id, clientData);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyEditor_(PropertyGrid* obj, void* id, void* editor)
{
    obj->SetPropertyEditor(id, editor);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyEditorByName_(PropertyGrid* obj, void* id, const char16_t* editorName)
{
    obj->SetPropertyEditorByName(id, editorName);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyLabel_(PropertyGrid* obj, void* id, const char16_t* newproplabel)
{
    obj->SetPropertyLabel(id, newproplabel);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyName_(PropertyGrid* obj, void* id, const char16_t* newName)
{
    obj->SetPropertyName(id, newName);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyHelpString_(PropertyGrid* obj, void* id, const char16_t* helpString)
{
    obj->SetPropertyHelpString(id, helpString);
}

ALTERNET_UI_API c_bool PropertyGrid_SetPropertyMaxLength_(PropertyGrid* obj, void* id, int maxLen)
{
    return obj->SetPropertyMaxLength(id, maxLen);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyValueAsLong_(PropertyGrid* obj, void* id, int64_t value)
{
    obj->SetPropertyValueAsLong(id, value);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyValueAsInt_(PropertyGrid* obj, void* id, int value)
{
    obj->SetPropertyValueAsInt(id, value);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyValueAsDouble_(PropertyGrid* obj, void* id, double value)
{
    obj->SetPropertyValueAsDouble(id, value);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyValueAsBool_(PropertyGrid* obj, void* id, c_bool value)
{
    obj->SetPropertyValueAsBool(id, value);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyValueAsStr_(PropertyGrid* obj, void* id, const char16_t* value)
{
    obj->SetPropertyValueAsStr(id, value);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyValueAsVariant_(PropertyGrid* obj, void* id, void* variant)
{
    obj->SetPropertyValueAsVariant(id, variant);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyValueAsDateTime_(PropertyGrid* obj, void* id, DateTime value)
{
    obj->SetPropertyValueAsDateTime(id, value);
}

ALTERNET_UI_API void PropertyGrid_SetValidationFailureBehavior_(PropertyGrid* obj, int vfbFlags)
{
    obj->SetValidationFailureBehavior(vfbFlags);
}

ALTERNET_UI_API void PropertyGrid_SortChildren_(PropertyGrid* obj, void* id, int flags)
{
    obj->SortChildren(id, flags);
}

ALTERNET_UI_API void* PropertyGrid_GetEditorByName_(const char16_t* editorName)
{
    return PropertyGrid::GetEditorByName(editorName);
}

ALTERNET_UI_API c_bool PropertyGrid_ChangePropertyValue_(PropertyGrid* obj, void* id, void* variant)
{
    return obj->ChangePropertyValue(id, variant);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyImage_(PropertyGrid* obj, void* id, ImageSet* bmp)
{
    obj->SetPropertyImage(id, bmp);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyAttribute_(PropertyGrid* obj, void* id, const char16_t* attrName, void* variant, int64_t argFlags)
{
    obj->SetPropertyAttribute(id, attrName, variant, argFlags);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyAttributeAll_(PropertyGrid* obj, const char16_t* attrName, void* variant)
{
    obj->SetPropertyAttributeAll(attrName, variant);
}

ALTERNET_UI_API c_bool PropertyGrid_IsAnyModified_(PropertyGrid* obj)
{
    return obj->IsAnyModified();
}

ALTERNET_UI_API void PropertyGrid_ResetColors_(PropertyGrid* obj)
{
    obj->ResetColors();
}

ALTERNET_UI_API void PropertyGrid_ResetColumnSizes_(PropertyGrid* obj, c_bool enableAutoResizing)
{
    obj->ResetColumnSizes(enableAutoResizing);
}

ALTERNET_UI_API void PropertyGrid_MakeColumnEditable_(PropertyGrid* obj, uint32_t column, c_bool editable)
{
    obj->MakeColumnEditable(column, editable);
}

ALTERNET_UI_API void PropertyGrid_BeginLabelEdit_(PropertyGrid* obj, uint32_t column)
{
    obj->BeginLabelEdit(column);
}

ALTERNET_UI_API void PropertyGrid_EndLabelEdit_(PropertyGrid* obj, c_bool commit)
{
    obj->EndLabelEdit(commit);
}

ALTERNET_UI_API void PropertyGrid_SetCaptionBackgroundColor_(PropertyGrid* obj, Color col)
{
    obj->SetCaptionBackgroundColor(col);
}

ALTERNET_UI_API void PropertyGrid_SetCaptionTextColor_(PropertyGrid* obj, Color col)
{
    obj->SetCaptionTextColor(col);
}

ALTERNET_UI_API void PropertyGrid_SetCellBackgroundColor_(PropertyGrid* obj, Color col)
{
    obj->SetCellBackgroundColor(col);
}

ALTERNET_UI_API void PropertyGrid_SetCellDisabledTextColor_(PropertyGrid* obj, Color col)
{
    obj->SetCellDisabledTextColor(col);
}

ALTERNET_UI_API void PropertyGrid_SetCellTextColor_(PropertyGrid* obj, Color col)
{
    obj->SetCellTextColor(col);
}

ALTERNET_UI_API void PropertyGrid_SetColumnCount_(PropertyGrid* obj, int colCount)
{
    obj->SetColumnCount(colCount);
}

ALTERNET_UI_API void PropertyGrid_SetEmptySpaceColor_(PropertyGrid* obj, Color col)
{
    obj->SetEmptySpaceColor(col);
}

ALTERNET_UI_API void PropertyGrid_SetLineColor_(PropertyGrid* obj, Color col)
{
    obj->SetLineColor(col);
}

ALTERNET_UI_API void PropertyGrid_SetMarginColor_(PropertyGrid* obj, Color col)
{
    obj->SetMarginColor(col);
}

ALTERNET_UI_API void PropertyGrid_SetSelectionBackgroundColor_(PropertyGrid* obj, Color col)
{
    obj->SetSelectionBackgroundColor(col);
}

ALTERNET_UI_API void PropertyGrid_SetSelectionTextColor_(PropertyGrid* obj, Color col)
{
    obj->SetSelectionTextColor(col);
}

ALTERNET_UI_API void PropertyGrid_SetSplitterPosition_(PropertyGrid* obj, int newXPos, int col)
{
    obj->SetSplitterPosition(newXPos, col);
}

ALTERNET_UI_API char16_t* PropertyGrid_GetUnspecifiedValueText_(PropertyGrid* obj, int argFlags)
{
    return AllocPInvokeReturnString(obj->GetUnspecifiedValueText(argFlags));
}

ALTERNET_UI_API void PropertyGrid_SetVirtualWidth_(PropertyGrid* obj, int width)
{
    obj->SetVirtualWidth(width);
}

ALTERNET_UI_API void PropertyGrid_SetSplitterLeft_(PropertyGrid* obj, c_bool privateChildrenToo)
{
    obj->SetSplitterLeft(privateChildrenToo);
}

ALTERNET_UI_API void PropertyGrid_SetVerticalSpacing_(PropertyGrid* obj, int vspacing)
{
    obj->SetVerticalSpacing(vspacing);
}

ALTERNET_UI_API c_bool PropertyGrid_HasVirtualWidth_(PropertyGrid* obj)
{
    return obj->HasVirtualWidth();
}

ALTERNET_UI_API uint32_t PropertyGrid_GetCommonValueCount_(PropertyGrid* obj)
{
    return obj->GetCommonValueCount();
}

ALTERNET_UI_API char16_t* PropertyGrid_GetCommonValueLabel_(PropertyGrid* obj, uint32_t i)
{
    return AllocPInvokeReturnString(obj->GetCommonValueLabel(i));
}

ALTERNET_UI_API int PropertyGrid_GetUnspecifiedCommonValue_(PropertyGrid* obj)
{
    return obj->GetUnspecifiedCommonValue();
}

ALTERNET_UI_API void PropertyGrid_SetUnspecifiedCommonValue_(PropertyGrid* obj, int index)
{
    obj->SetUnspecifiedCommonValue(index);
}

ALTERNET_UI_API c_bool PropertyGrid_IsSmallScreen_()
{
    return PropertyGrid::IsSmallScreen();
}

ALTERNET_UI_API void PropertyGrid_RefreshEditor_(PropertyGrid* obj)
{
    obj->RefreshEditor();
}

ALTERNET_UI_API c_bool PropertyGrid_WasValueChangedInEvent_(PropertyGrid* obj)
{
    return obj->WasValueChangedInEvent();
}

ALTERNET_UI_API int PropertyGrid_GetSpacingY_(PropertyGrid* obj)
{
    return obj->GetSpacingY();
}

ALTERNET_UI_API void PropertyGrid_SetupTextCtrlValue_(PropertyGrid* obj, const char16_t* text)
{
    obj->SetupTextCtrlValue(text);
}

ALTERNET_UI_API c_bool PropertyGrid_UnfocusEditor_(PropertyGrid* obj)
{
    return obj->UnfocusEditor();
}

ALTERNET_UI_API void* PropertyGrid_GetLastItem_(PropertyGrid* obj, int flags)
{
    return obj->GetLastItem(flags);
}

ALTERNET_UI_API void* PropertyGrid_GetRoot_(PropertyGrid* obj)
{
    return obj->GetRoot();
}

ALTERNET_UI_API void* PropertyGrid_GetSelectedProperty_(PropertyGrid* obj)
{
    return obj->GetSelectedProperty();
}

ALTERNET_UI_API c_bool PropertyGrid_EnsureVisible_(PropertyGrid* obj, void* propArg)
{
    return obj->EnsureVisible(propArg);
}

ALTERNET_UI_API c_bool PropertyGrid_SelectProperty_(PropertyGrid* obj, void* propArg, c_bool focus)
{
    return obj->SelectProperty(propArg, focus);
}

ALTERNET_UI_API c_bool PropertyGrid_AddToSelection_(PropertyGrid* obj, void* propArg)
{
    return obj->AddToSelection(propArg);
}

ALTERNET_UI_API c_bool PropertyGrid_RemoveFromSelection_(PropertyGrid* obj, void* propArg)
{
    return obj->RemoveFromSelection(propArg);
}

ALTERNET_UI_API void PropertyGrid_SetCurrentCategory_(PropertyGrid* obj, void* propArg)
{
    obj->SetCurrentCategory(propArg);
}

ALTERNET_UI_API Int32Rect_C PropertyGrid_GetImageRect_(PropertyGrid* obj, void* p, int item)
{
    return obj->GetImageRect(p, item);
}

ALTERNET_UI_API Int32Size_C PropertyGrid_GetImageSize_(PropertyGrid* obj, void* p, int item)
{
    return obj->GetImageSize(p, item);
}

ALTERNET_UI_API void* PropertyGrid_CreateStringProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, const char16_t* value)
{
    return obj->CreateStringProperty(label, name, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateFilenameProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, const char16_t* value)
{
    return obj->CreateFilenameProperty(label, name, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateDirProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, const char16_t* value)
{
    return obj->CreateDirProperty(label, name, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateImageFilenameProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, const char16_t* value)
{
    return obj->CreateImageFilenameProperty(label, name, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateSystemColorProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, Color value, uint32_t kind)
{
    return obj->CreateSystemColorProperty(label, name, value, kind);
}

ALTERNET_UI_API void* PropertyGrid_CreateCursorProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, int value)
{
    return obj->CreateCursorProperty(label, name, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateBoolProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, c_bool value)
{
    return obj->CreateBoolProperty(label, name, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateIntProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, int64_t value)
{
    return obj->CreateIntProperty(label, name, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateFloatProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, double value)
{
    return obj->CreateFloatProperty(label, name, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateUIntProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, uint64_t value)
{
    return obj->CreateUIntProperty(label, name, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateLongStringProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, const char16_t* value)
{
    return obj->CreateLongStringProperty(label, name, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateDateProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, DateTime value)
{
    return obj->CreateDateProperty(label, name, value);
}

ALTERNET_UI_API void PropertyGrid_Clear_(PropertyGrid* obj)
{
    obj->Clear();
}

ALTERNET_UI_API void* PropertyGrid_Append_(PropertyGrid* obj, void* property)
{
    return obj->Append(property);
}

ALTERNET_UI_API void* PropertyGrid_CreateEditEnumProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, void* choices, const char16_t* value)
{
    return obj->CreateEditEnumProperty(label, name, choices, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateEnumProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, void* choices, int value)
{
    return obj->CreateEnumProperty(label, name, choices, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateFlagsProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, void* choices, int value)
{
    return obj->CreateFlagsProperty(label, name, choices, value);
}

ALTERNET_UI_API c_bool PropertyGrid_ClearSelection_(PropertyGrid* obj, c_bool validation)
{
    return obj->ClearSelection(validation);
}

ALTERNET_UI_API void PropertyGrid_ClearModifiedStatus_(PropertyGrid* obj)
{
    obj->ClearModifiedStatus();
}

ALTERNET_UI_API c_bool PropertyGrid_CollapseAll_(PropertyGrid* obj)
{
    return obj->CollapseAll();
}

ALTERNET_UI_API c_bool PropertyGrid_EditorValidate_(PropertyGrid* obj)
{
    return obj->EditorValidate();
}

ALTERNET_UI_API c_bool PropertyGrid_ExpandAll_(PropertyGrid* obj, c_bool expand)
{
    return obj->ExpandAll(expand);
}

ALTERNET_UI_API void* PropertyGrid_CreatePropCategory_(PropertyGrid* obj, const char16_t* label, const char16_t* name)
{
    return obj->CreatePropCategory(label, name);
}

ALTERNET_UI_API void* PropertyGrid_GetFirst_(PropertyGrid* obj, int flags)
{
    return obj->GetFirst(flags);
}

ALTERNET_UI_API void* PropertyGrid_GetProperty_(PropertyGrid* obj, const char16_t* name)
{
    return obj->GetProperty(name);
}

ALTERNET_UI_API void* PropertyGrid_GetPropertyByLabel_(PropertyGrid* obj, const char16_t* label)
{
    return obj->GetPropertyByLabel(label);
}

ALTERNET_UI_API void* PropertyGrid_GetPropertyByName_(PropertyGrid* obj, const char16_t* name)
{
    return obj->GetPropertyByName(name);
}

ALTERNET_UI_API void* PropertyGrid_GetPropertyByNameAndSubName_(PropertyGrid* obj, const char16_t* name, const char16_t* subname)
{
    return obj->GetPropertyByNameAndSubName(name, subname);
}

ALTERNET_UI_API void* PropertyGrid_GetSelection_(PropertyGrid* obj)
{
    return obj->GetSelection();
}

ALTERNET_UI_API char16_t* PropertyGrid_GetPropertyName_(PropertyGrid* obj, void* property)
{
    return AllocPInvokeReturnString(obj->GetPropertyName(property));
}

ALTERNET_UI_API void PropertyGrid_InitAllTypeHandlers_()
{
    PropertyGrid::InitAllTypeHandlers();
}

ALTERNET_UI_API void PropertyGrid_RegisterAdditionalEditors_()
{
    PropertyGrid::RegisterAdditionalEditors();
}

ALTERNET_UI_API c_bool PropertyGrid_RestoreEditableState_(PropertyGrid* obj, const char16_t* src, int restoreStates)
{
    return obj->RestoreEditableState(src, restoreStates);
}

ALTERNET_UI_API char16_t* PropertyGrid_SaveEditableState_(PropertyGrid* obj, int includedStates)
{
    return AllocPInvokeReturnString(obj->SaveEditableState(includedStates));
}

ALTERNET_UI_API void PropertyGrid_SetBoolChoices_(const char16_t* trueChoice, const char16_t* falseChoice)
{
    PropertyGrid::SetBoolChoices(trueChoice, falseChoice);
}

ALTERNET_UI_API c_bool PropertyGrid_SetColumnProportion_(PropertyGrid* obj, uint32_t column, int proportion)
{
    return obj->SetColumnProportion(column, proportion);
}

ALTERNET_UI_API int PropertyGrid_GetColumnProportion_(PropertyGrid* obj, uint32_t column)
{
    return obj->GetColumnProportion(column);
}

ALTERNET_UI_API void PropertyGrid_Sort_(PropertyGrid* obj, int flags)
{
    obj->Sort(flags);
}

ALTERNET_UI_API void PropertyGrid_RefreshProperty_(PropertyGrid* obj, void* p)
{
    obj->RefreshProperty(p);
}

ALTERNET_UI_API void* PropertyGrid_CreateColorProperty_(PropertyGrid* obj, const char16_t* label, const char16_t* name, Color value)
{
    return obj->CreateColorProperty(label, name, value);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyReadOnly_(PropertyGrid* obj, void* id, c_bool set, int flags)
{
    obj->SetPropertyReadOnly(id, set, flags);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyValueUnspecified_(PropertyGrid* obj, void* id)
{
    obj->SetPropertyValueUnspecified(id);
}

ALTERNET_UI_API void* PropertyGrid_ColorDatabaseCreate_()
{
    return PropertyGrid::ColorDatabaseCreate();
}

ALTERNET_UI_API void PropertyGrid_ColorDatabaseDelete_(void* handle)
{
    PropertyGrid::ColorDatabaseDelete(handle);
}

ALTERNET_UI_API void PropertyGrid_ColorDatabaseSetGlobal_(void* handle)
{
    PropertyGrid::ColorDatabaseSetGlobal(handle);
}

ALTERNET_UI_API void PropertyGrid_ColorDatabaseAdd_(void* handle, const char16_t* name, Color color)
{
    PropertyGrid::ColorDatabaseAdd(handle, name, color);
}

ALTERNET_UI_API Color_C PropertyGrid_ColorDatabaseFind_(void* handle, const char16_t* name)
{
    return PropertyGrid::ColorDatabaseFind(handle, name);
}

ALTERNET_UI_API char16_t* PropertyGrid_ColorDatabaseFindName_(void* handle, Color color)
{
    return AllocPInvokeReturnString(PropertyGrid::ColorDatabaseFindName(handle, color));
}

ALTERNET_UI_API void PropertyGrid_KnownColorsClear_()
{
    PropertyGrid::KnownColorsClear();
}

ALTERNET_UI_API void PropertyGrid_KnownColorsAdd_(const char16_t* name, const char16_t* title, Color value, int knownColor)
{
    PropertyGrid::KnownColorsAdd(name, title, value, knownColor);
}

ALTERNET_UI_API void PropertyGrid_KnownColorsApply_()
{
    PropertyGrid::KnownColorsApply();
}

ALTERNET_UI_API void PropertyGrid_KnownColorsSetCustomColorTitle_(const char16_t* value)
{
    PropertyGrid::KnownColorsSetCustomColorTitle(value);
}

ALTERNET_UI_API void* PropertyGrid_GetPropertyValidator_(PropertyGrid* obj, void* prop)
{
    return obj->GetPropertyValidator(prop);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyValidator_(PropertyGrid* obj, void* prop, void* validator)
{
    obj->SetPropertyValidator(prop, validator);
}

ALTERNET_UI_API void PropertyGrid_SetPropertyFlag_(PropertyGrid* obj, void* prop, int flag, c_bool value)
{
    obj->SetPropertyFlag(prop, flag, value);
}

ALTERNET_UI_API void* PropertyGrid_CreateEx_(int64_t styles)
{
    return PropertyGrid::CreateEx(styles);
}

ALTERNET_UI_API void PropertyGrid_AddActionTrigger_(PropertyGrid* obj, int action, int keycode, int modifiers)
{
    obj->AddActionTrigger(action, keycode, modifiers);
}

ALTERNET_UI_API void PropertyGrid_DedicateKey_(PropertyGrid* obj, int keycode)
{
    obj->DedicateKey(keycode);
}

ALTERNET_UI_API void PropertyGrid_AutoGetTranslation_(c_bool enable)
{
    PropertyGrid::AutoGetTranslation(enable);
}

ALTERNET_UI_API void PropertyGrid_CenterSplitter_(PropertyGrid* obj, c_bool enableAutoResizing)
{
    obj->CenterSplitter(enableAutoResizing);
}

ALTERNET_UI_API void PropertyGrid_ClearActionTriggers_(PropertyGrid* obj, int action)
{
    obj->ClearActionTriggers(action);
}

ALTERNET_UI_API c_bool PropertyGrid_CommitChangesFromEditor_(PropertyGrid* obj, uint32_t flags)
{
    return obj->CommitChangesFromEditor(flags);
}

ALTERNET_UI_API void PropertyGrid_EditorsValueWasModified_(PropertyGrid* obj)
{
    obj->EditorsValueWasModified();
}

ALTERNET_UI_API void PropertyGrid_EditorsValueWasNotModified_(PropertyGrid* obj)
{
    obj->EditorsValueWasNotModified();
}

ALTERNET_UI_API c_bool PropertyGrid_EnableCategories_(PropertyGrid* obj, c_bool enable)
{
    return obj->EnableCategories(enable);
}

ALTERNET_UI_API Size_C PropertyGrid_FitColumns_(PropertyGrid* obj)
{
    return obj->FitColumns();
}

ALTERNET_UI_API Color_C PropertyGrid_GetCaptionBackgroundColor_(PropertyGrid* obj)
{
    return obj->GetCaptionBackgroundColor();
}

ALTERNET_UI_API Color_C PropertyGrid_GetCaptionForegroundColor_(PropertyGrid* obj)
{
    return obj->GetCaptionForegroundColor();
}

ALTERNET_UI_API Color_C PropertyGrid_GetCellBackgroundColor_(PropertyGrid* obj)
{
    return obj->GetCellBackgroundColor();
}

ALTERNET_UI_API Color_C PropertyGrid_GetCellDisabledTextColor_(PropertyGrid* obj)
{
    return obj->GetCellDisabledTextColor();
}

ALTERNET_UI_API Color_C PropertyGrid_GetCellTextColor_(PropertyGrid* obj)
{
    return obj->GetCellTextColor();
}

ALTERNET_UI_API uint32_t PropertyGrid_GetColumnCount_(PropertyGrid* obj)
{
    return obj->GetColumnCount();
}

ALTERNET_UI_API Color_C PropertyGrid_GetEmptySpaceColor_(PropertyGrid* obj)
{
    return obj->GetEmptySpaceColor();
}

ALTERNET_UI_API int PropertyGrid_GetFontHeight_(PropertyGrid* obj)
{
    return obj->GetFontHeight();
}

ALTERNET_UI_API Color_C PropertyGrid_GetLineColor_(PropertyGrid* obj)
{
    return obj->GetLineColor();
}

ALTERNET_UI_API Color_C PropertyGrid_GetMarginColor_(PropertyGrid* obj)
{
    return obj->GetMarginColor();
}

ALTERNET_UI_API int PropertyGrid_GetMarginWidth_(PropertyGrid* obj)
{
    return obj->GetMarginWidth();
}

ALTERNET_UI_API int PropertyGrid_GetRowHeight_(PropertyGrid* obj)
{
    return obj->GetRowHeight();
}

ALTERNET_UI_API Color_C PropertyGrid_GetSelectionBackgroundColor_(PropertyGrid* obj)
{
    return obj->GetSelectionBackgroundColor();
}

ALTERNET_UI_API Color_C PropertyGrid_GetSelectionForegroundColor_(PropertyGrid* obj)
{
    return obj->GetSelectionForegroundColor();
}

ALTERNET_UI_API int PropertyGrid_GetSplitterPosition_(PropertyGrid* obj, uint32_t splitterIndex)
{
    return obj->GetSplitterPosition(splitterIndex);
}

ALTERNET_UI_API int PropertyGrid_GetVerticalSpacing_(PropertyGrid* obj)
{
    return obj->GetVerticalSpacing();
}

ALTERNET_UI_API c_bool PropertyGrid_IsEditorFocused_(PropertyGrid* obj)
{
    return obj->IsEditorFocused();
}

ALTERNET_UI_API c_bool PropertyGrid_IsEditorsValueModified_(PropertyGrid* obj)
{
    return obj->IsEditorsValueModified();
}

ALTERNET_UI_API void PropertyGrid_SetEventCallback_(PropertyGrid::PropertyGridEventCallbackType callback)
{
    PropertyGrid::SetEventCallback(callback);
}

