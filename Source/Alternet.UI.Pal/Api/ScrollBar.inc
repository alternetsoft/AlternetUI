// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
int GetEventTypeID();

int GetEventOldPos();

int GetEventNewPos();

bool GetIsVertical();
void SetIsVertical(bool value);

int GetThumbPosition();
void SetThumbPosition(int value);

int GetRange();

int GetThumbSize();

int GetPageSize();

void SetScrollbar(int position, int thumbSize, int range, int pageSize, bool refresh);

public:

enum class ScrollBarEvent
{
    Scroll,
};

typedef void* (*ScrollBarEventCallbackType)(ScrollBar* obj, ScrollBarEvent event, void* param);

static void SetEventCallback(ScrollBarEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(ScrollBarEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(ScrollBarEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(ScrollBarEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static ScrollBarEventCallbackType eventCallback = nullptr;

public:
ScrollBar();

protected:
virtual ~ScrollBar();

private:
BYREF_ONLY(ScrollBar);
