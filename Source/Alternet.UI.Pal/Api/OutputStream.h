// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>
#pragma once
#include "../Common.h"
#include "../ApiTypes.h"

namespace Alternet::UI
{
    class OutputStream
    {
        public:
            
            int64_t GetLength()
            {
                if (trampolineLocatorCallback == nullptr) throwExInvalidOpWithInfo(wxStr("Length"));
                auto trampoline = (TGetLength)trampolineLocatorCallback(Trampoline::GetLength);
                return trampoline(objectHandle);
            }
            typedef int64_t (*TGetLength)(void* objectHandle);
            
            
            bool GetIsOK()
            {
                if (trampolineLocatorCallback == nullptr) throwExInvalidOpWithInfo(wxStr("IsOK"));
                auto trampoline = (TGetIsOK)trampolineLocatorCallback(Trampoline::GetIsOK);
                return trampoline(objectHandle);
            }
            typedef bool (*TGetIsOK)(void* objectHandle);
            
            
            bool GetIsSeekable()
            {
                if (trampolineLocatorCallback == nullptr) throwExInvalidOpWithInfo(wxStr("IsSeekable"));
                auto trampoline = (TGetIsSeekable)trampolineLocatorCallback(Trampoline::GetIsSeekable);
                return trampoline(objectHandle);
            }
            typedef bool (*TGetIsSeekable)(void* objectHandle);
            
            
            int64_t GetPosition()
            {
                if (trampolineLocatorCallback == nullptr) throwExInvalidOpWithInfo(wxStr("Position"));
                auto trampoline = (TGetPosition)trampolineLocatorCallback(Trampoline::GetPosition);
                return trampoline(objectHandle);
            }
            typedef int64_t (*TGetPosition)(void* objectHandle);
            void SetPosition(int64_t value)
            {
                if (trampolineLocatorCallback == nullptr) throwExInvalidOpWithInfo(wxStr("Position"));
                auto trampoline = (TSetPosition)trampolineLocatorCallback(Trampoline::SetPosition);
                trampoline(objectHandle, value);
            }
            typedef void (*TSetPosition)(void* objectHandle, int64_t value);
            
            void* Write(void* buffer, void* length)
            {
                if (trampolineLocatorCallback == nullptr) throwExInvalidOpWithInfo(wxStr("Write"));
                auto trampoline = (TWrite)trampolineLocatorCallback(Trampoline::Write);
                return trampoline(objectHandle, buffer, length);
            }
            typedef void* (*TWrite)(void* objectHandle, void* buffer, void* length);
            public:
            enum class Trampoline
            {
                Write,
                GetLength,
                GetIsOK,
                GetIsSeekable,
                GetPosition,
                SetPosition,
            };
            typedef void* (*TTrampolineLocatorCallback)(Trampoline trampoline);
            static void SetTrampolineLocatorCallback(TTrampolineLocatorCallback value) { trampolineLocatorCallback = value; }
            OutputStream(void* objectHandle_) : objectHandle(objectHandle_) {}
        private:
            void* objectHandle;
            inline static TTrampolineLocatorCallback trampolineLocatorCallback = nullptr;
    }
    ;
}
