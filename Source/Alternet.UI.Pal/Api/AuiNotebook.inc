// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2023.</auto-generated>
public:
void SetArtProvider(void* art);
void* GetArtProvider();
void SetUniformBitmapSize(int width, int height);
void SetTabCtrlHeight(int height);
bool AddPage(void* page, const string& caption, bool select, ImageSet* bitmap);
bool InsertPage(uint64_t pageIdx, void* page, const string& caption, bool select, ImageSet* bitmap);
bool DeletePage(uint64_t page);
bool RemovePage(uint64_t page);
uint64_t GetPageCount();
void* GetPage(uint64_t pageIdx);
int FindPage(void* page);
bool SetPageText(uint64_t page, const string& text);
string GetPageText(uint64_t pageIdx);
bool SetPageToolTip(uint64_t page, const string& text);
string GetPageToolTip(uint64_t pageIdx);
bool SetPageBitmap(uint64_t page, ImageSet* bitmap);
int SetSelection(uint64_t newPage);
int GetSelection();
void Split(uint64_t page, int direction);
int GetTabCtrlHeight();
int GetHeightForPageHeight(int pageHeight);
bool ShowWindowMenu();
bool DeleteAllPages();
public:
enum class AuiNotebookEvent
{
    PageClose,
    PageClosed,
    PageChanged,
    PageChanging,
    WindowListButton,
    BeginDrag,
    EndDrag,
    DragMotion,
    AllowTabDrop,
    DragDone,
    TabMiddleMouseDown,
    TabMiddleMouseUp,
    TabRightMouseDown,
    TabRightMouseUp,
    BgDclickMouse,
};
typedef void* (*AuiNotebookEventCallbackType)(AuiNotebook* obj, AuiNotebookEvent event, void* param);
static void SetEventCallback(AuiNotebookEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(AuiNotebookEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(AuiNotebookEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static AuiNotebookEventCallbackType eventCallback = nullptr;
public:
AuiNotebook();
protected:
virtual ~AuiNotebook();
private:
BYREF_ONLY(AuiNotebook);
