// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2023 AlterNET Software.</auto-generated>
public:

string GetEventArgString();


string GetName();
void SetName(const string& value);


Keyboard* GetKeyboard();


Mouse* GetMouse();


Clipboard* GetClipboard();


string GetDisplayName();
void SetDisplayName(const string& value);


string GetAppClassName();
void SetAppClassName(const string& value);


string GetVendorName();
void SetVendorName(const string& value);


string GetVendorDisplayName();
void SetVendorDisplayName(const string& value);


bool GetInUixmlPreviewerMode();
void SetInUixmlPreviewerMode(bool value);


bool GetInvokeRequired();

static void ThrowError(int value);
static void SetSystemOptionInt(const string& name, int value);
void Run(Window* window);
void* GetTopWindow();
void ExitMainLoop();
void WakeUpIdle();
void Exit();
static void SuppressDiagnostics(int flags);
void BeginInvoke(PInvokeCallbackActionType action);
void ProcessPendingEvents();
bool HasPendingEvents();
public:
enum class ApplicationEvent
{
    Idle,
    LogMessage,
};
typedef void* (*ApplicationEventCallbackType)(Application* obj, ApplicationEvent event, void* param);
static void SetEventCallback(ApplicationEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(ApplicationEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(ApplicationEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static ApplicationEventCallbackType eventCallback = nullptr;
public:
Application();
protected:
virtual ~Application();
private:
BYREF_ONLY(Application);
