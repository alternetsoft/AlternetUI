// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
bool GetHasBorder();
void SetHasBorder(bool value);

int GetItemsCount();

ListBoxSelectionMode GetSelectionMode();
void SetSelectionMode(ListBoxSelectionMode value);

void* OpenSelectedIndicesArray();
int GetSelectedIndicesItemCount(void* array);
int GetSelectedIndicesItemAt(void* array, int index);
void CloseSelectedIndicesArray(void* array);
static void* CreateEx(int64_t styles);
void InsertItem(int index, const string& value);
void RemoveItemAt(int index);
void ClearItems();
void ClearSelected();
void SetSelected(int index, bool value);
void EnsureVisible(int itemIndex);
int ItemHitTest(const PointD& position);
void SetItem(int index, const string& value);

public:

enum class ListBoxEvent
{
    SelectionChanged,
    ControlRecreated,
};

typedef void* (*ListBoxEventCallbackType)(ListBox* obj, ListBoxEvent event, void* param);

static void SetEventCallback(ListBoxEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(ListBoxEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(ListBoxEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(ListBoxEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static ListBoxEventCallbackType eventCallback = nullptr;

public:
ListBox();

protected:
virtual ~ListBox();

private:
BYREF_ONLY(ListBox);
