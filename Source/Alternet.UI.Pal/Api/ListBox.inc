// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
bool GetHasBorder();
void SetHasBorder(bool value);

static void* CreateListBox(ListBoxHandlerCreateFlags createFlags);
int GetSelection();
bool IsSelected(int n);
bool IsSorted();
bool SetStringSelection(const string& s, bool select);
void SetItemSelection(int index, bool select);
int FindString(const string& s, bool bCase);
int GetCountPerPage();
int GetTopItem();
int HitTest(const PointD& point);
string GetString(uint32_t n);
uint32_t GetCount();
void Deselect(int n);
void EnsureVisible(int n);
void SetFirstItem(int n);
void SetFirstItemStr(const string& s);
void SetSelection(int n);
void SetString(uint32_t n, const string& s);
void Clear();
void Delete(uint32_t n);
int Append(const string& s);
int Insert(const string& item, uint32_t pos);
int GetSelectionsCount();
int GetSelectionsItem(int index);
void UpdateSelections();
void SetFlags(ListBoxHandlerFlags flags);
ListBoxHandlerFlags GetFlags();
int GetCheckedIndexesCount();
int GetCheckedIndexesItem(int index);
void UpdateCheckedIndexes();

public:

enum class ListBoxEvent
{
    SelectionChanged,
    CheckedChanged,
};

typedef void* (*ListBoxEventCallbackType)(ListBox* obj, ListBoxEvent event, void* param);

static void SetEventCallback(ListBoxEventCallbackType value) { eventCallback = value; }

public:

bool RaiseEvent(ListBoxEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

static bool RaiseStaticEvent(ListBoxEvent event, void* parameter = nullptr)
{
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(ListBoxEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static ListBoxEventCallbackType eventCallback = nullptr;

public:
ListBox();

protected:
virtual ~ListBox();

private:
BYREF_ONLY(ListBox);
