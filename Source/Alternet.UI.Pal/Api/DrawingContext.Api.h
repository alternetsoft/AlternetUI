// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

#pragma once

#include "DrawingContext.h"
#include "Region.h"
#include "Image.h"
#include "Font.h"
#include "Brush.h"
#include "Pen.h"
#include "GraphicsPath.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API c_bool DrawingContext_GetIsOk_(DrawingContext* obj)
{
    return MarshalExceptions<c_bool>([&](){
        return obj->GetIsOk();
    });
}

ALTERNET_UI_API void* DrawingContext_GetWxWidgetDC_(DrawingContext* obj)
{
    return MarshalExceptions<void*>([&](){
        return obj->GetWxWidgetDC();
    });
}

ALTERNET_UI_API Region* DrawingContext_GetClip_(DrawingContext* obj)
{
    return MarshalExceptions<Region*>([&](){
        return obj->GetClip();
    });
}

ALTERNET_UI_API void DrawingContext_SetClip_(DrawingContext* obj, Region* value)
{
    MarshalExceptions<void>([&](){
        obj->SetClip(value);
    });
}

ALTERNET_UI_API InterpolationMode DrawingContext_GetInterpolationMode_(DrawingContext* obj)
{
    return MarshalExceptions<InterpolationMode>([&](){
        return obj->GetInterpolationMode();
    });
}

ALTERNET_UI_API void DrawingContext_SetInterpolationMode_(DrawingContext* obj, InterpolationMode value)
{
    MarshalExceptions<void>([&](){
        obj->SetInterpolationMode(value);
    });
}

ALTERNET_UI_API DrawingContext* DrawingContext_CreateMemoryDC_(float scaleFactor)
{
    return MarshalExceptions<DrawingContext*>([&](){
        return DrawingContext::CreateMemoryDC(scaleFactor);
    });
}

ALTERNET_UI_API DrawingContext* DrawingContext_CreateMemoryDCFromImage_(Image* image)
{
    return MarshalExceptions<DrawingContext*>([&](){
        return DrawingContext::CreateMemoryDCFromImage(image);
    });
}

ALTERNET_UI_API void* DrawingContext_GetHandle_(DrawingContext* obj)
{
    return MarshalExceptions<void*>([&](){
        return obj->GetHandle();
    });
}

ALTERNET_UI_API void DrawingContext_DestroyClippingRegion_(DrawingContext* obj)
{
    MarshalExceptions<void>([&](){
        obj->DestroyClippingRegion();
    });
}

ALTERNET_UI_API void DrawingContext_Save_(DrawingContext* obj)
{
    MarshalExceptions<void>([&](){
        obj->Save();
    });
}

ALTERNET_UI_API void DrawingContext_Restore_(DrawingContext* obj)
{
    MarshalExceptions<void>([&](){
        obj->Restore();
    });
}

ALTERNET_UI_API void DrawingContext_SetClippingRect_(DrawingContext* obj, RectD rect)
{
    MarshalExceptions<void>([&](){
        obj->SetClippingRect(rect);
    });
}

ALTERNET_UI_API void DrawingContext_SetClippingRegion_(DrawingContext* obj, Region* region)
{
    MarshalExceptions<void>([&](){
        obj->SetClippingRegion(region);
    });
}

ALTERNET_UI_API RectD_C DrawingContext_GetClippingBox_(DrawingContext* obj)
{
    return MarshalExceptions<RectD_C>([&](){
        return obj->GetClippingBox();
    });
}

ALTERNET_UI_API void DrawingContext_DrawText_(DrawingContext* obj, void* text, int charLength, PointD location, Font* font, Color foreColor, Brush* backColor, float angle, c_bool useBrush)
{
    MarshalExceptions<void>([&](){
        obj->DrawText(text, charLength, location, font, foreColor, backColor, angle, useBrush);
    });
}

ALTERNET_UI_API SizeI_C DrawingContext_GetDpi_(DrawingContext* obj)
{
    return MarshalExceptions<SizeI_C>([&](){
        return obj->GetDpi();
    });
}

ALTERNET_UI_API void DrawingContext_ImageFromDrawingContext_(Image* image, int width, int height, DrawingContext* dc)
{
    MarshalExceptions<void>([&](){
        DrawingContext::ImageFromDrawingContext(image, width, height, dc);
    });
}

ALTERNET_UI_API void DrawingContext_ImageFromGenericImageDC_(Image* image, void* source, DrawingContext* dc)
{
    MarshalExceptions<void>([&](){
        DrawingContext::ImageFromGenericImageDC(image, source, dc);
    });
}

ALTERNET_UI_API SizeD_C DrawingContext_GetTextExtentSimple_(DrawingContext* obj, void* text, int charLength, Font* font, void* control)
{
    return MarshalExceptions<SizeD_C>([&](){
        return obj->GetTextExtentSimple(text, charLength, font, control);
    });
}

ALTERNET_UI_API DrawingContext* DrawingContext_FromImage_(Image* image)
{
    return MarshalExceptions<DrawingContext*>([&](){
        return DrawingContext::FromImage(image);
    });
}

ALTERNET_UI_API DrawingContext* DrawingContext_FromScreen_()
{
    return MarshalExceptions<DrawingContext*>([&](){
        return DrawingContext::FromScreen();
    });
}

ALTERNET_UI_API void DrawingContext_RoundedRectangle_(DrawingContext* obj, Pen* pen, Brush* brush, RectD rectangle, float cornerRadius)
{
    MarshalExceptions<void>([&](){
        obj->RoundedRectangle(pen, brush, rectangle, cornerRadius);
    });
}

ALTERNET_UI_API void DrawingContext_Rectangle_(DrawingContext* obj, Pen* pen, Brush* brush, RectD rectangle)
{
    MarshalExceptions<void>([&](){
        obj->Rectangle(pen, brush, rectangle);
    });
}

ALTERNET_UI_API void DrawingContext_Ellipse_(DrawingContext* obj, Pen* pen, Brush* brush, RectD rectangle)
{
    MarshalExceptions<void>([&](){
        obj->Ellipse(pen, brush, rectangle);
    });
}

ALTERNET_UI_API void DrawingContext_Path_(DrawingContext* obj, Pen* pen, Brush* brush, GraphicsPath* path)
{
    MarshalExceptions<void>([&](){
        obj->Path(pen, brush, path);
    });
}

ALTERNET_UI_API void DrawingContext_Pie_(DrawingContext* obj, Pen* pen, Brush* brush, PointD center, float radius, float startAngle, float sweepAngle)
{
    MarshalExceptions<void>([&](){
        obj->Pie(pen, brush, center, radius, startAngle, sweepAngle);
    });
}

ALTERNET_UI_API void DrawingContext_Circle_(DrawingContext* obj, Pen* pen, Brush* brush, PointD center, float radius)
{
    MarshalExceptions<void>([&](){
        obj->Circle(pen, brush, center, radius);
    });
}

ALTERNET_UI_API void DrawingContext_Polygon_(DrawingContext* obj, Pen* pen, Brush* brush, PointD* points, int pointsLength, FillMode fillMode)
{
    MarshalExceptions<void>([&](){
        obj->Polygon(pen, brush, points, pointsLength, fillMode);
    });
}

ALTERNET_UI_API void DrawingContext_FillRectangle_(DrawingContext* obj, Brush* brush, RectD rectangle)
{
    MarshalExceptions<void>([&](){
        obj->FillRectangle(brush, rectangle);
    });
}

ALTERNET_UI_API void DrawingContext_FillRectangleI_(DrawingContext* obj, Brush* brush, RectI rectangle)
{
    MarshalExceptions<void>([&](){
        obj->FillRectangleI(brush, rectangle);
    });
}

ALTERNET_UI_API void DrawingContext_DrawRectangle_(DrawingContext* obj, Pen* pen, RectD rectangle)
{
    MarshalExceptions<void>([&](){
        obj->DrawRectangle(pen, rectangle);
    });
}

ALTERNET_UI_API void DrawingContext_FillEllipse_(DrawingContext* obj, Brush* brush, RectD bounds)
{
    MarshalExceptions<void>([&](){
        obj->FillEllipse(brush, bounds);
    });
}

ALTERNET_UI_API void DrawingContext_DrawEllipse_(DrawingContext* obj, Pen* pen, RectD bounds)
{
    MarshalExceptions<void>([&](){
        obj->DrawEllipse(pen, bounds);
    });
}

ALTERNET_UI_API void DrawingContext_DrawPath_(DrawingContext* obj, Pen* pen, GraphicsPath* path)
{
    MarshalExceptions<void>([&](){
        obj->DrawPath(pen, path);
    });
}

ALTERNET_UI_API void DrawingContext_FillPath_(DrawingContext* obj, Brush* brush, GraphicsPath* path)
{
    MarshalExceptions<void>([&](){
        obj->FillPath(brush, path);
    });
}

ALTERNET_UI_API void DrawingContext_DrawImageAtPoint_(DrawingContext* obj, Image* image, PointD origin, c_bool useMask)
{
    MarshalExceptions<void>([&](){
        obj->DrawImageAtPoint(image, origin, useMask);
    });
}

ALTERNET_UI_API void DrawingContext_DrawImageAtRect_(DrawingContext* obj, Image* image, RectD destinationRect, c_bool useMask)
{
    MarshalExceptions<void>([&](){
        obj->DrawImageAtRect(image, destinationRect, useMask);
    });
}

ALTERNET_UI_API void DrawingContext_SetTransformValues_(DrawingContext* obj, float m11, float m12, float m21, float m22, float dx, float dy)
{
    MarshalExceptions<void>([&](){
        obj->SetTransformValues(m11, m12, m21, m22, dx, dy);
    });
}

ALTERNET_UI_API void DrawingContext_DrawLine_(DrawingContext* obj, Pen* pen, PointD a, PointD b)
{
    MarshalExceptions<void>([&](){
        obj->DrawLine(pen, a, b);
    });
}

ALTERNET_UI_API void DrawingContext_DrawLines_(DrawingContext* obj, Pen* pen, PointD* points, int pointsLength)
{
    MarshalExceptions<void>([&](){
        obj->DrawLines(pen, points, pointsLength);
    });
}

ALTERNET_UI_API void DrawingContext_DrawArc_(DrawingContext* obj, Pen* pen, PointD center, float radius, float startAngle, float sweepAngle)
{
    MarshalExceptions<void>([&](){
        obj->DrawArc(pen, center, radius, startAngle, sweepAngle);
    });
}

ALTERNET_UI_API void DrawingContext_FillPie_(DrawingContext* obj, Brush* brush, PointD center, float radius, float startAngle, float sweepAngle)
{
    MarshalExceptions<void>([&](){
        obj->FillPie(brush, center, radius, startAngle, sweepAngle);
    });
}

ALTERNET_UI_API void DrawingContext_DrawPie_(DrawingContext* obj, Pen* pen, PointD center, float radius, float startAngle, float sweepAngle)
{
    MarshalExceptions<void>([&](){
        obj->DrawPie(pen, center, radius, startAngle, sweepAngle);
    });
}

ALTERNET_UI_API void DrawingContext_DrawBezier_(DrawingContext* obj, Pen* pen, PointD startPoint, PointD controlPoint1, PointD controlPoint2, PointD endPoint)
{
    MarshalExceptions<void>([&](){
        obj->DrawBezier(pen, startPoint, controlPoint1, controlPoint2, endPoint);
    });
}

ALTERNET_UI_API void DrawingContext_DrawBeziers_(DrawingContext* obj, Pen* pen, PointD* points, int pointsLength)
{
    MarshalExceptions<void>([&](){
        obj->DrawBeziers(pen, points, pointsLength);
    });
}

ALTERNET_UI_API void DrawingContext_DrawPoint_(DrawingContext* obj, Pen* pen, float x, float y)
{
    MarshalExceptions<void>([&](){
        obj->DrawPoint(pen, x, y);
    });
}

ALTERNET_UI_API void DrawingContext_DrawCircle_(DrawingContext* obj, Pen* pen, PointD center, float radius)
{
    MarshalExceptions<void>([&](){
        obj->DrawCircle(pen, center, radius);
    });
}

ALTERNET_UI_API void DrawingContext_FillCircle_(DrawingContext* obj, Brush* brush, PointD center, float radius)
{
    MarshalExceptions<void>([&](){
        obj->FillCircle(brush, center, radius);
    });
}

ALTERNET_UI_API void DrawingContext_DrawRoundedRectangle_(DrawingContext* obj, Pen* pen, RectD rect, float cornerRadius)
{
    MarshalExceptions<void>([&](){
        obj->DrawRoundedRectangle(pen, rect, cornerRadius);
    });
}

ALTERNET_UI_API void DrawingContext_FillRoundedRectangle_(DrawingContext* obj, Brush* brush, RectD rect, float cornerRadius)
{
    MarshalExceptions<void>([&](){
        obj->FillRoundedRectangle(brush, rect, cornerRadius);
    });
}

ALTERNET_UI_API void DrawingContext_DrawPolygon_(DrawingContext* obj, Pen* pen, PointD* points, int pointsLength)
{
    MarshalExceptions<void>([&](){
        obj->DrawPolygon(pen, points, pointsLength);
    });
}

ALTERNET_UI_API void DrawingContext_FillPolygon_(DrawingContext* obj, Brush* brush, PointD* points, int pointsLength, FillMode fillMode)
{
    MarshalExceptions<void>([&](){
        obj->FillPolygon(brush, points, pointsLength, fillMode);
    });
}

