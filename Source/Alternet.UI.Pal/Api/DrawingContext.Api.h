// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2022.</auto-generated>

#pragma once

#include "DrawingContext.h"
#include "TransformMatrix.h"
#include "Image.h"
#include "Brush.h"
#include "Pen.h"
#include "GraphicsPath.h"
#include "Font.h"
#include "ApiUtils.h"
#include "Exceptions.h"

using namespace Alternet::UI;

ALTERNET_UI_API TransformMatrix* DrawingContext_GetTransform_(DrawingContext* obj)
{
    return MarshalExceptions<TransformMatrix*>([&](){
            return obj->GetTransform();
        });
}

ALTERNET_UI_API void DrawingContext_SetTransform_(DrawingContext* obj, TransformMatrix* value)
{
    MarshalExceptions<void>([&](){
            obj->SetTransform(value);
        });
}

ALTERNET_UI_API DrawingContext* DrawingContext_FromImage_(Image* image)
{
    return MarshalExceptions<DrawingContext*>([&](){
            return DrawingContext::FromImage(image);
        });
}

ALTERNET_UI_API void DrawingContext_FillRectangle_(DrawingContext* obj, Rect rectangle, Brush* brush)
{
    MarshalExceptions<void>([&](){
            obj->FillRectangle(rectangle, brush);
        });
}

ALTERNET_UI_API void DrawingContext_DrawRectangle_(DrawingContext* obj, Rect rectangle, Pen* pen)
{
    MarshalExceptions<void>([&](){
            obj->DrawRectangle(rectangle, pen);
        });
}

ALTERNET_UI_API void DrawingContext_FillEllipse_(DrawingContext* obj, Rect bounds, Brush* brush)
{
    MarshalExceptions<void>([&](){
            obj->FillEllipse(bounds, brush);
        });
}

ALTERNET_UI_API void DrawingContext_DrawEllipse_(DrawingContext* obj, Rect bounds, Pen* pen)
{
    MarshalExceptions<void>([&](){
            obj->DrawEllipse(bounds, pen);
        });
}

ALTERNET_UI_API void DrawingContext_FloodFill_(DrawingContext* obj, Point point, Brush* brush)
{
    MarshalExceptions<void>([&](){
            obj->FloodFill(point, brush);
        });
}

ALTERNET_UI_API void DrawingContext_DrawPath_(DrawingContext* obj, Pen* pen, GraphicsPath* path)
{
    MarshalExceptions<void>([&](){
            obj->DrawPath(pen, path);
        });
}

ALTERNET_UI_API void DrawingContext_FillPath_(DrawingContext* obj, Brush* brush, GraphicsPath* path)
{
    MarshalExceptions<void>([&](){
            obj->FillPath(brush, path);
        });
}

ALTERNET_UI_API void DrawingContext_DrawTextAtPoint_(DrawingContext* obj, const char16_t* text, Point origin, Font* font, Brush* brush)
{
    MarshalExceptions<void>([&](){
            obj->DrawTextAtPoint(text, origin, font, brush);
        });
}

ALTERNET_UI_API void DrawingContext_DrawTextAtRect_(DrawingContext* obj, const char16_t* text, Rect bounds, Font* font, Brush* brush, TextHorizontalAlignment horizontalAlignment, TextVerticalAlignment verticalAlignment, TextTrimming trimming, TextWrapping wrapping)
{
    MarshalExceptions<void>([&](){
            obj->DrawTextAtRect(text, bounds, font, brush, horizontalAlignment, verticalAlignment, trimming, wrapping);
        });
}

ALTERNET_UI_API void DrawingContext_DrawImageAtPoint_(DrawingContext* obj, Image* image, Point origin)
{
    MarshalExceptions<void>([&](){
            obj->DrawImageAtPoint(image, origin);
        });
}

ALTERNET_UI_API void DrawingContext_DrawImageAtRect_(DrawingContext* obj, Image* image, Rect rect)
{
    MarshalExceptions<void>([&](){
            obj->DrawImageAtRect(image, rect);
        });
}

ALTERNET_UI_API Size_C DrawingContext_MeasureText_(DrawingContext* obj, const char16_t* text, Font* font, double maximumWidth, TextWrapping textWrapping)
{
    return MarshalExceptions<Size_C>([&](){
            return obj->MeasureText(text, font, maximumWidth, textWrapping);
        });
}

ALTERNET_UI_API void DrawingContext_Push_(DrawingContext* obj)
{
    MarshalExceptions<void>([&](){
            obj->Push();
        });
}

ALTERNET_UI_API void DrawingContext_Pop_(DrawingContext* obj)
{
    MarshalExceptions<void>([&](){
            obj->Pop();
        });
}

ALTERNET_UI_API void DrawingContext_DrawLine_(DrawingContext* obj, Point a, Point b, Pen* pen)
{
    MarshalExceptions<void>([&](){
            obj->DrawLine(a, b, pen);
        });
}

ALTERNET_UI_API void DrawingContext_DrawLines_(DrawingContext* obj, Point* points, int pointsCount, Pen* pen)
{
    MarshalExceptions<void>([&](){
            obj->DrawLines(points, pointsCount, pen);
        });
}

