// <auto-generated>This code was generated by a tool, DO NOT MODIFY MANUALLY. Copyright AlterNET, 2022.</auto-generated>
public:

string GetTitle();
void SetTitle(const string& value);


WindowStartLocation GetWindowStartLocation();
void SetWindowStartLocation(WindowStartLocation value);


bool GetShowInTaskbar();
void SetShowInTaskbar(bool value);


bool GetMinimizeEnabled();
void SetMinimizeEnabled(bool value);


bool GetMaximizeEnabled();
void SetMaximizeEnabled(bool value);


bool GetCloseEnabled();
void SetCloseEnabled(bool value);


bool GetAlwaysOnTop();
void SetAlwaysOnTop(bool value);


bool GetIsToolWindow();
void SetIsToolWindow(bool value);


bool GetResizable();
void SetResizable(bool value);


bool GetHasBorder();
void SetHasBorder(bool value);


bool GetHasTitleBar();
void SetHasTitleBar(bool value);


ModalResult GetModalResult();
void SetModalResult(ModalResult value);


Size GetMinimumSize();
void SetMinimumSize(const Size& value);


Size GetMaximumSize();
void SetMaximumSize(const Size& value);


bool GetModal();


bool GetIsActive();


static Window* GetActiveWindow();


WindowState GetState();
void SetState(WindowState value);


ImageSet* GetIcon();
void SetIcon(ImageSet* value);


MainMenu* GetMenu();
void SetMenu(MainMenu* value);


Toolbar* GetToolbar();
void SetToolbar(Toolbar* value);


StatusBar* GetStatusBar();
void SetStatusBar(StatusBar* value);

void* OpenOwnedWindowsArray();
int GetOwnedWindowsItemCount(void* array);
Window* GetOwnedWindowsItemAt(void* array, int index);
void CloseOwnedWindowsArray(void* array);
void ShowModal();
void Close();
void Activate();
void AddInputBinding(const string& managedCommandId, Key key, ModifierKeys modifiers);
void RemoveInputBinding(const string& managedCommandId);
public:
enum class WindowEvent
{
    Closing,
    SizeChanged,
    LocationChanged,
    Activated,
    Deactivated,
    StateChanged,
    InputBindingCommandExecuted,
};
typedef void* (*WindowEventCallbackType)(Window* obj, WindowEvent event, void* param);
static void SetEventCallback(WindowEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(WindowEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(WindowEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static WindowEventCallbackType eventCallback = nullptr;
public:
Window();
protected:
virtual ~Window();
private:
BYREF_ONLY(Window);
