// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
string GetTitle();
void SetTitle(const string& value);

bool GetShowInTaskbar();
void SetShowInTaskbar(bool value);

bool GetMinimizeEnabled();
void SetMinimizeEnabled(bool value);

bool GetMaximizeEnabled();
void SetMaximizeEnabled(bool value);

bool GetCloseEnabled();
void SetCloseEnabled(bool value);

bool GetAlwaysOnTop();
void SetAlwaysOnTop(bool value);

bool GetIsToolWindow();
void SetIsToolWindow(bool value);

bool GetResizable();
void SetResizable(bool value);

bool GetHasBorder();
void SetHasBorder(bool value);

bool GetHasTitleBar();
void SetHasTitleBar(bool value);

bool GetHasSystemMenu();
void SetHasSystemMenu(bool value);

bool GetIsPopupWindow();
void SetIsPopupWindow(bool value);

ModalResult GetModalResult();
void SetModalResult(ModalResult value);

bool GetModal();

static Window* GetActiveWindow();

WindowState GetState();
void SetState(WindowState value);

IconSet* GetIcon();
void SetIcon(IconSet* value);

MainMenu* GetMenu();
void SetMenu(MainMenu* value);

void* GetWxStatusBar();
void SetWxStatusBar(void* value);

static void* CreateEx(int kind);
static void SetDefaultBounds(const RectD& bounds);
static void SetParkingWindowFont(Font* font);
void ShowModal(void* owner);
void Close();
void Activate();

public:

enum class WindowEvent
{
    Closing,
    StateChanged,
};

typedef void* (*WindowEventCallbackType)(Window* obj, WindowEvent event, void* param);

static void SetEventCallback(WindowEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(WindowEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(WindowEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(WindowEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static WindowEventCallbackType eventCallback = nullptr;

public:
Window();

protected:
virtual ~Window();

private:
BYREF_ONLY(Window);
