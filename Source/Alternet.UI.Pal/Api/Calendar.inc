// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2024 AlterNET Software.</auto-generated>
public:

bool GetSundayFirst();
void SetSundayFirst(bool value);


bool GetMondayFirst();
void SetMondayFirst(bool value);


bool GetShowHolidays();
void SetShowHolidays(bool value);


bool GetNoYearChange();
void SetNoYearChange(bool value);


bool GetNoMonthChange();
void SetNoMonthChange(bool value);


bool GetSequentalMonthSelect();
void SetSequentalMonthSelect(bool value);


bool GetShowSurroundWeeks();
void SetShowSurroundWeeks(bool value);


bool GetShowWeekNumbers();
void SetShowWeekNumbers(bool value);


bool GetUseGeneric();
void SetUseGeneric(bool value);


bool GetHasBorder();
void SetHasBorder(bool value);


DateTime GetValue();
void SetValue(const DateTime& value);


DateTime GetMinValue();
void SetMinValue(const DateTime& value);


DateTime GetMaxValue();
void SetMaxValue(const DateTime& value);

bool SetRange(bool useMinValue, bool useMaxValue);
void SetHolidayColors(const Color& colorFg, const Color& colorBg);
Color GetHolidayColorFg();
Color GetHolidayColorBg();
int HitTest(const PointI& point);
void SetHeaderColors(const Color& colorFg, const Color& colorBg);
Color GetHeaderColorFg();
Color GetHeaderColorBg();
void SetHighlightColors(const Color& colorFg, const Color& colorBg);
Color GetHighlightColorFg();
Color GetHighlightColorBg();
bool AllowMonthChange();
bool EnableMonthChange(bool enable);
void Mark(int day, bool mark);
void* GetAttr(int day);
void SetAttr(int day, void* calendarDateAttr);
void ResetAttr(int day);
void EnableHolidayDisplay(bool display);
void SetHoliday(int day);
static void* GetMarkDateAttr();
static void SetMarkDateAttr(void* dateAttr);
static void* CreateDateAttr(int border);
static void DeleteDateAttr(void* handle);
static void DateAttrSetTextColor(void* handle, const Color& colText);
static void DateAttrSetBackgroundColor(void* handle, const Color& colBack);
static void DateAttrSetBorderColor(void* handle, const Color& color);
static void DateAttrSetFont(void* handle, void* font);
static void DateAttrSetBorder(void* handle, int border);
static void DateAttrSetHoliday(void* handle, bool holiday);
static bool DateAttrHasTextColor(void* handle);
static bool DateAttrHasBackgroundColor(void* handle);
static bool DateAttrHasBorderColor(void* handle);
static bool DateAttrHasFont(void* handle);
static bool DateAttrHasBorder(void* handle);
static bool DateAttrIsHoliday(void* handle);
static Color DateAttrGetTextColor(void* handle);
static Color DateAttrGetBackgroundColor(void* handle);
static Color DateAttrGetBorderColor(void* handle);
static void* DateAttrGetFont(void* handle);
static int DateAttrGetBorder(void* handle);
public:
enum class CalendarEvent
{
    SelectionChanged,
    PageChanged,
    WeekNumberClick,
    DayHeaderClick,
    DayDoubleClick,
};
typedef void* (*CalendarEventCallbackType)(Calendar* obj, CalendarEvent event, void* param);
static void SetEventCallback(CalendarEventCallbackType value) { eventCallback = value; }
protected:
bool RaiseEvent(CalendarEvent event, void* parameter = nullptr) { if (EventsSuspended()) return false; if (eventCallback != nullptr) return eventCallback(this, event, parameter) != nullptr; else return false; }
void* RaiseEventWithPointerResult(CalendarEvent event, void* parameter = nullptr) { if (EventsSuspended()) return nullptr; if (eventCallback != nullptr) return eventCallback(this, event, parameter); else return nullptr; }
private:
inline static CalendarEventCallbackType eventCallback = nullptr;
public:
Calendar();
protected:
virtual ~Calendar();
private:
BYREF_ONLY(Calendar);
