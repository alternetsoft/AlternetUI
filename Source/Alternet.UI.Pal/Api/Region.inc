// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
void Clear();
int ContainsPoint(const PointD& pt);
int ContainsRect(const RectD& rect);
bool IsEmpty();
bool IsOk();
void InitializeWithRegion(Region* region);
void InitializeWithRect(const RectD& rect);
void InitializeWithPolygon(PointD* points, int pointsCount, FillMode fillMode);
void IntersectWithRect(const RectD& rect);
void IntersectWithRegion(Region* region);
void UnionWithRect(const RectD& rect);
void UnionWithRegion(Region* region);
void XorWithRect(const RectD& rect);
void XorWithRegion(Region* region);
void SubtractRect(const RectD& rect);
void SubtractRegion(Region* region);
void Translate(double dx, double dy);
RectD GetBounds();
bool IsEqualTo(Region* other);
int GetHashCode_();

public:
Region();

protected:
virtual ~Region();

private:
BYREF_ONLY(Region);
