// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
static PointI GetPosition();
static MouseButtonState GetButtonState(MouseButton button);

public:

enum class MouseEvent
{
    MouseChanged,
};

typedef void* (*MouseEventCallbackType)(Mouse* obj, MouseEvent event, void* param);

static void SetEventCallback(MouseEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(MouseEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(MouseEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(MouseEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static MouseEventCallbackType eventCallback = nullptr;

public:
Mouse();

protected:
virtual ~Mouse();

private:
BYREF_ONLY(Mouse);
