// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
static string GetEventMenuItemId();

static bool MainMenuAppend(void* menuHandle, void* menu, const string& text);
static int MainMenuGetCount(void* menuHandle);
static void MainMenuSetEnabled(void* menuHandle, int pos, bool enable);
static void* MainMenuGetSubMenu(void* menuHandle, int menuIndex);
static void* MainMenuRemove(void* menuHandle, int pos);
static bool MainMenuInsert(void* menuHandle, int pos, void* menu, const string& title);
static void* MainMenuReplace(void* menuHandle, int pos, void* menu, const string& title);
static void MainMenuSetText(void* menuHandle, int pos, const string& label);
static void* CreateMainMenu(const string& id);
static void* CreateContextMenu(const string& id);
static void* CreateMenuItem(MenuItemType itemType, const string& id);
static void DestroyMainMenu(void* menuHandle);
static void DestroyMenuItem(void* menuHandle);
static void DestroyContextMenu(void* menuHandle);
static string GetMenuId(void* handle);
static MenuItemType GetMenuItemType(void* handle);
static void SetMenuItemBitmap(void* handle, ImageSet* value);
static void SetMenuItemEnabled(void* handle, bool value);
static void SetMenuItemText(void* handle, const string& value, const string& rightValue);
static void SetMenuItemChecked(void* handle, bool value);
static void SetMenuItemSubMenu(void* handle, void* subMenuHandle);
static void SetMenuItemShortcut(void* handle, Key key, ModifierKeys modifierKeys);
static void MenuAddItem(void* handle, void* itemHandle);
static void MenuRemoveItem(void* handle, void* itemHandle);
static void Show(void* menuHandle, Control* control, const PointD& position);

public:

enum class MenuEvent
{
    MenuClick,
    MenuHighlight,
    MenuOpened,
    MenuClosed,
};

typedef void* (*MenuEventCallbackType)(Menu* obj, MenuEvent event, void* param);

static void SetEventCallback(MenuEventCallbackType value) { eventCallback = value; }

public:

bool RaiseEvent(MenuEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

static bool RaiseStaticEvent(MenuEvent event, void* parameter = nullptr)
{
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(MenuEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static MenuEventCallbackType eventCallback = nullptr;

public:
Menu();

protected:
virtual ~Menu();

private:
BYREF_ONLY(Menu);
