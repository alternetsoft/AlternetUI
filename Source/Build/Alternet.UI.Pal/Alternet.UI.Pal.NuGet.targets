<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Import Project="Alternet.UI.Pal.NuGet.props"/>

    <Import Project="..\..\Keys\Private.props" Condition="Exists('..\..\Keys\Private.props')"/>

<!-- ========================================== -->
    <ItemGroup>
        <NugetPayload_License Include="$(LicensesDirectoryPath)\$(LicenseFileName)" />
        <LicenseTarget Include="$(NuGetDirectoryPath)\$(LicenseFileName)" />

        <SourceIcon Include="$(MediaDirectoryPath)\$(SourceIconFileName)" />
        <TargetIcon Include="$(NuGetDirectoryPath)\$(TargetIconFileName)" />

        <!-- Windows -->

        <NugetPayload_Native_Windows_X64
            Include="$(NugetPayloadDirectoryPath_Windows_X64)\$(NugetNativeDllFileName)" />
        <NugetPayload_Native_Windows_X86
            Include="$(NugetPayloadDirectoryPath_Windows_X86)\$(NugetNativeDllFileName)" />
        <NugetPayload_Native_Windows_Arm64
            Include="$(NugetPayloadDirectoryPath_Windows_Arm64)\$(NugetNativeDllFileName)" />

        <!-- MacOS -->

        <NugetPayload_Native_MacOS_X64
            Include="$(NugetPayloadDirectoryPath_MacOS_X64)\$(NugetNativeDllFileName)" />

        <NugetPayload_Native_MacOS_Arm64
            Include="$(NugetPayloadDirectoryPath_MacOS_Arm64)\$(NugetNativeDllFileName)" />

        <!-- Linux -->

        <NugetPayload_Native_Linux
            Include="$(NugetPayloadDirectoryPath_Linux)\$(NugetNativeDllFileName)" />

        <NugetPayload_Native_Linux_Arm64
            Include="$(NugetPayloadDirectoryPath_Linux_Arm64)\$(NugetNativeDllFileName)" />
    </ItemGroup>
<!-- ========================================== -->
    <Target Name="NuGet_Clean">
        <RemoveDir Directories="$(NuGetOutputDirectoryPath)" Condition="Exists($(NuGetOutputDirectoryPath))"/>
        <RemoveDir Directories="$(NuGetSourceRefDirectoryPath)" Condition="Exists($(NuGetSourceRefDirectoryPath))"/>
        <RemoveDir Directories="$(NuGetDotNetLegacyLibDirectoryPath)" Condition="Exists($(NuGetDotNetLegacyLibDirectoryPath))"/>
        <RemoveDir Directories="$(NuGetSourceRuntimesDirectoryPath)" Condition="Exists($(NuGetSourceRuntimesDirectoryPath))"/>

        <ItemGroup><PreviousNugetBuildResults Include="$(NuGetBuildResultFiles)" /></ItemGroup>
        <Delete Files="@(PreviousNugetBuildResults)" />
    </Target>
<!-- ========================================== -->
    <Target Name="NuGet_PrepareSource" >
        <Copy SourceFiles="@(SourceIcon)" DestinationFiles="@(TargetIcon)" />
        <Copy SourceFiles="@(NugetPayload_License)" DestinationFiles="@(LicenseTarget)" />

        <!-- Windows ============================ -->
        
        <MakeDir Directories="$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_Windows_X86)\native"/>
        <Copy SourceFiles="@(NugetPayload_Native_Windows_X86)"
		 DestinationFolder="$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_Windows_X86)\native" />

        <MakeDir Directories="$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_Windows_X64)\native"/>
        <Copy SourceFiles="@(NugetPayload_Native_Windows_X64)"
		 DestinationFolder="$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_Windows_X64)\native" />

        <MakeDir Directories="$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_Windows_Arm64)\native"/>
        <Copy SourceFiles="@(NugetPayload_Native_Windows_Arm64)"
		 DestinationFolder="$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_Windows_Arm64)\native" />

        <!-- MacOS  ============================ -->

        <MakeDir Directories="$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_MacOS_X64)\native"/>
        <MakeDir Directories="$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_MacOS_Arm64)\native"/>
<!--
        <Copy SourceFiles="@(NugetPayload_Native_MacOS)"
		 DestinationFolder="$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_MacOS)\native" />
-->

	<ItemGroup>
    		<MacOs_Arm64_PalZipFiles Include="$(UI_PUBLISH_PACKAGES)/Alternet.UI.Pal*maccatalyst-arm64-release.zip" />
    		<MacOs_X64_PalZipFiles Include="$(UI_PUBLISH_PACKAGES)/Alternet.UI.Pal*maccatalyst-x64-release.zip" />
	</ItemGroup>

	<PropertyGroup>
		<MacOs_Arm64_NugetDestFolder>$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_MacOS_Arm64)\native</MacOs_Arm64_NugetDestFolder>
		<MacOs_X64_NugetDestFolder>$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_MacOS_X64)\native</MacOs_X64_NugetDestFolder>
	</PropertyGroup>
        
	<Unzip SourceFiles="@(MacOs_Arm64_PalZipFiles)" DestinationFolder="$(MacOs_Arm64_NugetDestFolder)" />
	<Unzip SourceFiles="@(MacOs_X64_PalZipFiles)" DestinationFolder="$(MacOs_X64_NugetDestFolder)" />

        <MakeDir Directories="$(MacOs_Arm64_NugetDestFolder)"/>
        <MakeDir Directories="$(MacOs_X64_NugetDestFolder)"/>
        <Copy SourceFiles="@(NugetPayload_Native_MacOS_Arm64)" DestinationFolder="$(MacOs_Arm64_NugetDestFolder)" />
        <Copy SourceFiles="@(NugetPayload_Native_MacOS_X64)" DestinationFolder="$(MacOs_X64_NugetDestFolder)" />

        <!-- Linux  ============================ -->

        <MakeDir Directories="$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_Linux_X64)\native"/>
        <MakeDir Directories="$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_Linux_Arm64)\native"/>
<!--
        <Copy SourceFiles="@(NugetPayload_Native_Linux)"
		 DestinationFolder="$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_Linux)\native" />
-->
	<ItemGroup>
    		<Linux_Arm64_PalZipFiles Include="$(UI_PUBLISH_PACKAGES)/Alternet.UI.Pal*linux-arm64-release.zip" />
    		<Linux_X64_PalZipFiles Include="$(UI_PUBLISH_PACKAGES)/Alternet.UI.Pal*linux-x64-release.zip" />
	</ItemGroup>

	<PropertyGroup>
		<Linux_Arm64_NugetDestFolder>$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_Linux_Arm64)\native</Linux_Arm64_NugetDestFolder>
		<Linux_X64_NugetDestFolder>$(NuGetSourceRuntimesDirectoryPath)\$(NuGetRuntimeId_Linux_X64)\native</Linux_X64_NugetDestFolder>
	</PropertyGroup>
        
	<Unzip SourceFiles="@(Linux_Arm64_PalZipFiles)" DestinationFolder="$(Linux_Arm64_NugetDestFolder)" />
	<Unzip SourceFiles="@(Linux_X64_PalZipFiles)" DestinationFolder="$(Linux_X64_NugetDestFolder)" />

        <MakeDir Directories="$(Linux_Arm64_NugetDestFolder)"/>
        <MakeDir Directories="$(Linux_X64_NugetDestFolder)"/>
        <Copy SourceFiles="@(NugetPayload_Native_Linux_Arm64)" DestinationFolder="$(Linux_Arm64_NugetDestFolder)" />
        <Copy SourceFiles="@(NugetPayload_Native_Linux_X64)" DestinationFolder="$(Linux_X64_NugetDestFolder)" />

        <!-- Sign dll, so, dylib  ============================ -->

	<Message Text="Sign Pal libraries" Importance="high" />

	<Exec Command="&quot;$(MSBuildProjectDirectory)\..\..\..\Install.Scripts\SignTools\Sign.Pal.InFolder.bat&quot; &quot;$(NuGetSourceRuntimesDirectoryPath)\&quot;"/>
    </Target>
<!-- ========================================== -->
    <Target Name="NuGet_Sign"  Condition="Exists($(SignKeyPath)) and '$(VsixSignPassword)' != ''">
		<Exec Command="dotnet nuget sign &quot;$(NuGetDirectoryPath)\*.nupkg&quot; --certificate-path &quot;$(SignKeyPath)&quot; --timestamper http://timestamp.digicert.com --certificate-password $(VsixSignPassword)"/>
		<Message Text="Exec NuGet_Sign" Importance="high" />
	</Target>
<!-- ========================================== -->
    <Target Name="NuGet_Pack" >
        <DownloadFile Condition="!Exists($(NuGetExeFilePath))"
            SourceUrl="$(NuGetExeDownloadUrl)" DestinationFolder="$(NuGetExeDirectoryPath)" />
        
        <Exec Condition="$([MSBuild]::IsOsPlatform('Windows'))"
              Command="$(NuGetExeFilePath) pack $(NuGetNuspecFileName) -NoDefaultExcludes -Exclude .nuget\*;*.nupkg -properties version=$(Version)"
              WorkingDirectory="$(NuGetDirectoryPath)" />

		<Message Text="WARNING: NuGet will not be signed: Provide file Source\Keys\Alternet.pfx" Importance="high" 
			Condition="!Exists($(SignKeyPath))"/>
		<Message Text="WARNING: NuGet will not be signed: Provide SignPassword in Source\Keys\Private.props" 
			Importance="high" Condition="'$(SignPassword)' == ''"/>
        <CallTarget Targets="NuGet_Sign"/>

        <Exec Condition="!$([MSBuild]::IsOsPlatform('Windows'))"
              Command="mono $(NuGetExeFilePath) pack $(NuGetNuspecFileName) -NoDefaultExcludes -Exclude .nuget/*\;*.nupkg -properties version=$(Version)"
              WorkingDirectory="$(NuGetDirectoryPath)" />
    </Target>
<!-- ========================================== -->
    <Target Name="NuGet_CopyBuildResults" >
        <ItemGroup><NugetBuildResults Include="$(NuGetBuildResultFiles)" /></ItemGroup>
        <MakeDir Directories="$(NuGetOutputDirectoryPath)"/>
        <Copy SourceFiles="@(NugetBuildResults)" DestinationFolder="$(NuGetOutputDirectoryPath)" />
        <Copy SourceFiles="@(NugetBuildResults)" DestinationFolder="$(NuGetOutputDirectoryPathArtefacts)" />
		
		<Message Text="Nuget Alternet.UI.Pal created in Publish\Artifacts\NuGet\" Importance="high" />
	
	</Target>
<!-- ========================================== -->
    <Target Name="NuGet" DependsOnTargets="NuGet_Clean">
		<Message Text="========================" Importance="high" />
		<Message Text="Create Nuget Alternet.UI.Pal started" Importance="high" />
	
        <Message Text="To build the NuGet package correctly, the build result files for all the platforms (Windows, MacOS, Linux) must exist."  
                Importance="high" />

        <CallTarget Targets="NuGet_PrepareSource;NuGet_Pack;NuGet_CopyBuildResults" />
		<Message Text="Create Nuget Alternet.UI.Pal done." Importance="high" />
		<Message Text="========================" Importance="high" />
    </Target>
<!-- ========================================== -->
</Project>