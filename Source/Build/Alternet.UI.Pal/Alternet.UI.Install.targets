<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- 
		DownloadAndExtractWxWidgetsBin
		DownloadAndExtractWxWidgets		
		CleanWxWidgetsBuildDirectory
		
		BuildWxWidgets
		BuildWxWidgetsWithoutDownload /p:DebugOnlyWxWidgetsBuild=true
		BuildWxWidgetsWithoutDownload /p:DebugOnlyWxWidgetsBuild=true /p:x64Only=true
		BuildWxWidgetsWithoutDownload
		BuildWxWidgetsWithoutDownload /p:ReleaseOnlyWxWidgetsBuild=true
		BuildWxWidgets /p:ReleaseOnlyWxWidgetsBuild=true

	$([System.IO.Path]::GetFullPath('your path'))		
	-->
    <!-- ========================================== -->
    
   <UsingTask TaskName="DeleteBinObjCs" 
	TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <MyFolderPath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
	  <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Code Type="Fragment" Language="cs"><![CDATA[
    var path = Path.GetFullPath(MyFolderPath);

    var files = Directory.EnumerateFiles(path, "*.*", SearchOption.AllDirectories)
                .Where(s => s.EndsWith(".csproj") || s.EndsWith(".vcxproj"));

    foreach (string projFile in files)
    {
        var projPath = Path.GetDirectoryName(projFile);

        var projPathBin = Path.Combine(projPath!, "bin");
        var projPathObj = Path.Combine(projPath!, "obj");
        var filesToDelete = new List<string>();

        if (Directory.Exists(projPathBin))
        {
            var projPathBinFiles = Directory.EnumerateFiles(projPathBin, "*.*", SearchOption.AllDirectories);
            filesToDelete.AddRange(projPathBinFiles);
        }
        
        if (Directory.Exists(projPathObj))
        {
            var projPathObjFiles = Directory.EnumerateFiles(projPathObj, "*.*", SearchOption.AllDirectories);
            filesToDelete.AddRange(projPathObjFiles);
        }
        
        foreach (var s in filesToDelete)
        {
            Console.WriteLine("Deleting file: " + s);
            try
            {
                File.Delete(s);
            }
            catch (Exception)
            {
                Console.WriteLine("WARNING. Error deleting file: " + s);
            }
        }
            
    }
        ]]></Code>
    </Task>
  </UsingTask>
    <!-- ========================================== -->
	<!--
		<ItemGroup>
			<CsProjFiles Include="$(RootDirectoryPath)\**\*.csproj"/>
			<CsProjFiles Include="$(RootDirectoryPath)\**\*.vcxproj"/>
		</ItemGroup>
		<ItemGroup>
			<BinMasksToDelete Include="@(CsProjFiles->'%(RelativeDir)\bin\**\*.*')" />
			<BinMasksToDelete Include="@(CsProjFiles->'%(RelativeDir)\obj\**\*.*')"/>
		</ItemGroup>
		<ItemGroup>
			<BinfilesToDelete Include="@(BinMasksToDelete->'%(FullPath)')" />
		</ItemGroup>
	-->
	<Target Name="ClearProjectBin">
		<Message Text="--------------------------------------------------------" Importance="high" />
		<Message Text="Exec ClearProjectBin" Importance="high" />
	
		<DeleteBinObjCs MyFolderPath="$(RootDirectoryPath)"/>	
		<!--<PropertyGroup>
			<RmCommand Condition="$([MSBuild]::IsOsPlatform('Windows'))">del /q /s</RmCommand>
			<RmCommand Condition="$([MSBuild]::IsOsPlatform('Linux'))">rm -r</RmCommand>
			<RmCommand Condition="$([MSBuild]::IsOsPlatform('OSX'))">rm -r</RmCommand>
		</PropertyGroup>-->
		<!--<Message Text="Clean: @(BinFilesToDelete)" Importance="high"/>-->
		<!--<RemoveDir Directories="%(BinFilesToDelete.FullPath)"  ContinueOnError="true"
		Condition="Exists(%(BinFilesToDelete.FullPath))"/>-->
		
		 <!--<Delete Files="@(BinFilesToDelete)" />-->

		<!--<Exec 
			WorkingDirectory="$(RootDirectoryPath)" 
			Command="$(RmCommand) &quot;%(BinFilesToDelete.FullPath)/*&quot;" 
			Condition="Exists(%(BinFilesToDelete.FullPath))"
			/>-->
	</Target>
    <!-- ========================================== -->
	<Target Name="BuildControlsSample">
		<Exec 
			WorkingDirectory="$(RootDirectoryPath)/Source/Samples/ControlsSample" 
			Command="$(DotNetBuildCmd)" />
	</Target>		
    <!-- ========================================== -->
	<Target Name="RunControlsSample">
		<Exec 
			WorkingDirectory="$(RootDirectoryPath)/Source/Samples/ControlsSample" 
			Command="$(DotNetRunCmd)" />
	</Target>
    <!-- ========================================== -->
	<Target Name="RunControlsSampleAsync">
        <Exec
            WorkingDirectory="$(RootDirectoryPath)/Source/Tools/Alternet.UI.RunCmd"
            Command="dotnet run -- -r=runControlsSample" />
	</Target>
    <!-- ========================================== -->
	<Target Name="WaitEnter">
        <Exec
            WorkingDirectory="$(RootDirectoryPath)/Source/Tools/Alternet.UI.RunCmd"
            Command="dotnet run -- -r=waitEnter" />
	</Target>
    <!-- ========================================== -->
	<Target Name="CopyArtefacts">
		<!-- <RemoveDir Directories="$(UI_PAL_ARTIFACTS_PATH)" Condition="Exists($(UI_PAL_ARTIFACTS_PATH))"/> -->
		<!-- <RemoveDir Directories="$(UI_PAL_B)" Condition="Exists($(UI_PAL_B))"/> -->
		<MakeDir Directories="$(UI_PAL_ARTIFACTS_PATH)" Condition="!Exists($(UI_PAL_ARTIFACTS_PATH))"/>	
		<MakeDir Directories="$(UI_PAL_B)" Condition="!Exists($(UI_PAL_B))"/>	
		<ItemGroup>
					   <MySourceFiles Include="$(UI_PAL_BIN)\**\*.*"/>
		</ItemGroup>
		<Copy
			SourceFiles="@(MySourceFilesRelease)"
			DestinationFolder="$(UI_PAL_ARTIFACTS_PATH)\%(RecursiveDir)"	/>
		<Copy
			SourceFiles="@(MySourceFiles)"
			DestinationFolder="$(UI_PAL_B)\%(RecursiveDir)"	/>
	</Target>
    <!-- ========================================== -->
    <Target Name="BuildAlternetUIBuildTasks">
		<Message Text="--------------------------------------------------------" Importance="high" />
		<Message Text="Exec Build Alternet.UI.Build.Tasks" Importance="high" />
		<Exec 
			WorkingDirectory="$(RootDirectoryPath)/Source/Alternet.UI.Build.Tasks" 
			Command="$(DotNetBuildDebugCmdNoRestore)" />
		<Exec 
			WorkingDirectory="$(RootDirectoryPath)/Source/Alternet.UI.Build.Tasks" 
			Command="$(DotNetBuildReleaseCmdNoRestore)" />
	</Target>
    <!-- ========================================== -->
    <Target Name="BuildAlternetUIBuildTasksApiInfoCollector">
		<Message Text="--------------------------------------------------------" Importance="high" />
		<Message Text="Exec Build Alternet.UI.Build.Tasks.ApiInfoCollector" Importance="high" />
		<Exec 
			WorkingDirectory="$(RootDirectoryPath)/Source/Alternet.UI.Build.Tasks/Alternet.UI.Build.Tasks.ApiInfoCollector" 
			Command="$(DotNetBuildDebugCmdNoRestore)" />
		<Exec 
			WorkingDirectory="$(RootDirectoryPath)/Source/Alternet.UI.Build.Tasks/Alternet.UI.Build.Tasks.ApiInfoCollector" 
			Command="$(DotNetBuildReleaseCmdNoRestore)" />
	</Target>
    <!-- ========================================== -->
    <Target Name="InstallAlternetUI">
		<Message Text="========================" Importance="high" />
		<Message Text="Alternet.UI Installation started" Importance="high" />
		<Exec 
			WorkingDirectory="$(RootDirectoryPath)" 
			Command="find . -name &quot;*.sh&quot; -exec chmod +x {} \;" 
			Condition="$([MSBuild]::IsOsPlatform('Linux'))" />
			
		<CallTarget Targets="ClearProjectBin"/>
		<Message Text="--------------------------------------------------------" Importance="high" />
		<Message Text="Exec DownloadAndExtract WxWidgets Bin" Importance="high" />
		<CallTarget Targets="DownloadAndExtractWxWidgetsBin" Condition="!Exists($(WxWidgetsDirectory))"/>
		<Message Text="--------------------------------------------------------" Importance="high" />
		<Message Text="Exec Build WxWidgets Linux" Importance="high" />
        <CallTarget Targets="BuildWxWidgets_Linux" Condition="!Exists($(WxWidgetsGtkBuildDirectory))"/>
		<Message Text="--------------------------------------------------------" Importance="high" />
		<Message Text="Exec Build WxWidgets MacOS" Importance="high" />
        <CallTarget Targets="BuildWxWidgets_MacOS" Condition="!Exists($(WxWidgetsMacOSBuildDirectory))"/>
    <!-- ========================================== -->
		<Message Text="--------------------------------------------------------" Importance="high" />
		<Message Text="Exec Build Alternet.UI.Pal" Importance="high" />
		<CallTarget Targets="BuildNative_Windows"/>
		<CallTarget Targets="BuildNative_Unix"/>
	<!-- ========================================== -->
		<CallTarget Targets="BuildAlternetUIBuildTasksApiInfoCollector"/>
	<!-- ========================================== -->
		<Message Text="--------------------------------------------------------" Importance="high" />
		<Message Text="Exec Build Alternet.UI" Importance="high" />
		<Exec 
			WorkingDirectory="$(RootDirectoryPath)/Source/Alternet.UI" 
			Command="$(DotNetBuildDebugCmdNoRestore)" />
		<Exec 
			WorkingDirectory="$(RootDirectoryPath)/Source/Alternet.UI" 
			Command="$(DotNetBuildReleaseCmdNoRestore)" />
    <!-- ========================================== -->
		<CallTarget Targets="BuildAlternetUIBuildTasks"/>
    <!-- ========================================== -->
		<Message Text="--------------------------------------------------------" Importance="high" />
		<Message Text="Exec CopyArtefacts" Importance="high" />
		<CallTarget Targets="CopyArtefacts"/>
    <!-- ========================================== -->
		<Message Text="--------------------------------------------------------" Importance="high" />
		<Message Text="Exec Build ControlsSample" Importance="high" />
		<CallTarget Targets="BuildControlsSample"/>
		<Message Text="Alternet.UI Installation done." Importance="high" />
  		<Message Text="========================" Importance="high" />
		<CallTarget Targets="RunControlsSample"/>		
	<!-- ========================================== -->
    </Target>
    <!-- ========================================== -->
    <!-- ========================================== -->
</Project>

<!-- 

-->
