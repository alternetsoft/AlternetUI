// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
Color GetValue();
void SetValue(const Color& value);


public:

enum class ColorPickerEvent
{
    ValueChanged,
};

typedef void* (*ColorPickerEventCallbackType)(ColorPicker* obj, ColorPickerEvent event, void* param);

static void SetEventCallback(ColorPickerEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(ColorPickerEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(ColorPickerEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(ColorPickerEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static ColorPickerEventCallbackType eventCallback = nullptr;

public:
ColorPicker();

protected:
virtual ~ColorPicker();

private:
BYREF_ONLY(ColorPicker);
