// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
static bool Close(void* handle, bool force);
static bool DestroyWindow(void* handle);
static bool DestroyChildren(void* handle);
static bool IsBeingDeleted(void* handle);
static void SetLabel(void* handle, const string& label);
static string GetLabel(void* handle);
static void SetName(void* handle, const string& name);
static string GetName(void* handle);
static int GetLayoutDirection(void* handle);
static void SetLayoutDirection(void* handle, int dir);
static int AdjustForLayoutDirection(void* handle, int x, int width, int widthTotal);
static void SetId(void* handle, int winid);
static int GetId(void* handle);
static int NewControlId(int count);
static void UnreserveControlId(int id, int count);
static void SetSize2(void* handle, int x, int y, int width, int height);
static void SetSize(void* handle, int width, int height);
static void Move(void* handle, int x, int y, int flags);
static void SetPosition(void* handle, int width, int height);
static void Raise(void* handle);
static void Lower(void* handle);
static void SetClientSize(void* handle, int width, int height);
static PointI GetPosition(void* handle);
static PointI GetScreenPosition(void* handle);
static SizeI GetSize(void* handle);
static SizeI GetClientSize(void* handle);
static RectI GetRect(void* handle);
static RectI GetScreenRect(void* handle);
static PointI GetClientAreaOrigin(void* handle);
static RectI GetClientRect(void* handle);
static SizeI ClientToWindowSize(void* handle, const SizeI& size);
static SizeI WindowToClientSize(void* handle, const SizeI& size);
static SizeI GetBestSize(void* handle);
static int GetBestHeight(void* handle, int width);
static int GetBestWidth(void* handle, int height);
static void SetScrollHelper(void* handle, void* sh);
static void* GetScrollHelper(void* handle);
static void InvalidateBestSize(void* handle);
static void CacheBestSize(void* handle, const SizeI& size);
static SizeI GetEffectiveMinSize(void* handle);
static void SetInitialSize(void* handle, const SizeI& size);
static void Center(void* handle, int dir);
static void CenterOnParent(void* handle, int dir);
static void Fit(void* handle);
static void FitInside(void* handle);
static void SetSizeHints(void* handle, int minW, int minH, int maxW, int maxH, int incW, int incH);
static void SetMinSize(void* handle, const SizeI& minSize);
static void SetMaxSize(void* handle, const SizeI& maxSize);
static void SetMinClientSize(void* handle, const SizeI& size);
static void SetMaxClientSize(void* handle, const SizeI& size);
static SizeI GetMinSize(void* handle);
static SizeI GetMaxSize(void* handle);
static SizeI GetMinClientSize(void* handle);
static SizeI GetMaxClientSize(void* handle);
static int GetMinWidth(void* handle);
static int GetMinHeight(void* handle);
static int GetMaxWidth(void* handle);
static int GetMaxHeight(void* handle);
static void SetVirtualSize(void* handle, int x, int y);
static SizeI GetVirtualSize(void* handle);
static SizeI GetBestVirtualSize(void* handle);
static double GetContentScaleFactor(void* handle);
static double GetDPIScaleFactor(void* handle);
static SizeI GetWindowBorderSize(void* handle);
static bool InformFirstDirection(void* handle, int direction, int size, int availableOtherDir);
static void SendSizeEvent(void* handle, int flags);
static void SendSizeEventToParent(void* handle, int flags);
static void PostSizeEvent(void* handle);
static void PostSizeEventToParent(void* handle);
static bool BeginRepositioningChildren(void* handle);
static void EndRepositioningChildren(void* handle);
static bool Show(void* handle, bool show);
static bool Hide(void* handle);
static bool ShowWithEffect(void* handle, int effect, uint32_t timeout);
static bool HideWithEffect(void* handle, int effect, uint32_t timeout);
static bool Enable(void* handle, bool enable);
static bool Disable(void* handle);
static bool IsShown(void* handle);
static bool IsEnabled(void* handle);
static bool IsThisEnabled(void* handle);
static bool IsShownOnScreen(void* handle);
static void SetWindowStyleFlag(void* handle, int64_t style);
static int64_t GetWindowStyleFlag(void* handle);
static void SetWindowStyle(void* handle, int64_t style);
static int64_t GetWindowStyle(void* handle);
static bool HasFlag(void* handle, int flag);
static bool IsRetained(void* handle);
static bool ToggleWindowStyle(void* handle, int flag);
static void SetExtraStyle(void* handle, int64_t exStyle);
static int64_t GetExtraStyle(void* handle);
static bool HasExtraStyle(void* handle, int exFlag);
static void SetThemeEnabled(void* handle, bool enableTheme);
static bool GetThemeEnabled(void* handle);
static void SetFocus(void* handle);
static void SetFocusFromKbd(void* handle);
static void* FindFocus();
static bool HasFocus(void* handle);
static bool AcceptsFocus(void* handle);
static bool AcceptsFocusRecursively(void* handle);
static bool AcceptsFocusFromKeyboard(void* handle);
static void DisableFocusFromKeyboard(void* handle);
static bool CanBeFocused(void* handle);
static bool IsFocusable(void* handle);
static bool CanAcceptFocus(void* handle);
static bool CanAcceptFocusFromKeyboard(void* handle);
static void SetCanFocus(void* handle, bool canFocus);
static void EnableVisibleFocus(void* handle, bool enabled);
static bool NavigateIn(void* handle, int flags);
static bool Navigate(void* handle, int flags);
static void MoveBeforeInTabOrder(void* handle, void* win);
static void MoveAfterInTabOrder(void* handle, void* win);
static void* GetChildren(void* handle);
static void* GetPrevSibling(void* handle);
static void* GetNextSibling(void* handle);
static void* GetParent(void* handle);
static void* GetGrandParent(void* handle);
static bool IsTopLevel(void* handle);
static bool IsDescendant(void* handle, void* win);
static void SetParent(void* handle, void* parent);
static bool Reparent(void* handle, void* newParent);
static void AddChild(void* handle, void* child);
static void RemoveChild(void* handle, void* child);
static bool IsClientAreaChild(void* handle, void* child);
static void* FindWindow(void* handle, int64_t winid);
static void* FindWindow2(void* handle, const string& name);
static void* FindWindowById(int64_t winid, void* parent);
static void* FindWindowByName(const string& name, void* parent);
static void* FindWindowByLabel(const string& label, void* parent);
static void SetValidator(void* handle, void* validator);
static void* GetValidator(void* handle);
static bool Validate(void* handle);
static bool TransferDataToWindow(void* handle);
static bool TransferDataFromWindow(void* handle);
static void InitDialog(void* handle);
static void SetAcceleratorTable(void* handle, void* accel);
static void* GetAcceleratorTable(void* handle);
static SizeI GetDPI(void* handle);
static void WXAdjustFontToOwnPPI(void* handle, void* font);
static SizeI FromPhys(const SizeI& sz, void* w);
static PointI FromPhys2(const PointI& pt, void* w);
static int FromPhys3(int d, void* w);
static SizeI FromPhys4(const SizeI& sz);
static PointI FromPhys5(const PointI& pt);
static int FromPhys6(int d);
static SizeI ToPhys(const SizeI& sz, void* w);
static PointI ToPhys2(const PointI& pt, void* w);
static int ToPhys3(int d, void* w);
static SizeI ToPhys4(const SizeI& sz);
static PointI ToPhys5(const PointI& pt);
static int ToPhys6(int d);
static SizeI FromDIP(const SizeI& sz, void* window);
static PointI FromDIP2(const PointI& pt, void* window);
static int FromDIP3(int d, void* w);
static SizeI FromDIP4(void* handle, const SizeI& sz);
static PointI FromDIP5(void* handle, const PointI& pt);
static int FromDIP6(void* handle, int d);
static SizeI ToDIP(const SizeI& sz, void* w);
static PointI ToDIP2(const PointI& pt, void* w);
static int ToDIP3(int d, void* w);
static SizeI ToDIP4(void* handle, const SizeI& sz);
static PointI ToDIP5(void* handle, const PointI& pt);
static int ToDIP6(int d);
static PointI ConvertPixelsToDialog(void* handle, const PointI& pt);
static PointI ConvertDialogToPixels(void* handle, const PointI& pt);
static SizeI ConvertPixelsToDialog2(void* handle, const SizeI& sz);
static SizeI ConvertDialogToPixels2(void* handle, const SizeI& sz);
static void WarpPointer(void* handle, int x, int y);
static void CaptureMouse(void* handle);
static void ReleaseMouse(void* handle);
static void* GetCapture();
static bool HasCapture(void* handle);
static bool EnableTouchEvents(void* handle, int WXUNUSEDeventsMask);
static void RefreshRect(void* handle, const RectI& rect, bool eraseBackground);
static void Update(void* handle);
static void ClearBackground(void* handle);
static void Freeze(void* handle);
static void Thaw(void* handle);
static bool IsFrozen(void* handle);
static void PrepareDC(void* handle, void* dc);
static void SetDoubleBuffered(void* handle, bool on);
static bool IsDoubleBuffered(void* handle);
static void* GetUpdateRegion(void* handle);
static RectI GetUpdateClientRect(void* handle);
static bool IsExposed(void* handle, int x, int y);
static bool IsExposed2(void* handle, int x, int y, int w, int h);
static bool SetBackgroundColor(void* handle, const Color& Color);
static void SetOwnBackgroundColor(void* handle, const Color& Color);
static Color GetBackgroundColor(void* handle);
static bool InheritsBackgroundColor(void* handle);
static bool UseBackgroundColor(void* handle);
static bool SetForegroundColor(void* handle, const Color& Color);
static void SetOwnForegroundColor(void* handle, const Color& Color);
static Color GetForegroundColor(void* handle);
static bool UseForegroundColor(void* handle);
static bool InheritsForegroundColor(void* handle);
static bool SetBackgroundStyle(void* handle, int style);
static int GetBackgroundStyle(void* handle);
static bool HasTransparentBackground(void* handle);
static bool IsTransparentBackgroundSupported(void* handle, const string& reason);
static bool SetFont(void* handle, void* font);
static void SetOwnFont(void* handle, void* font);
static void* GetFont(void* handle);
static bool SetCursor(void* handle, void* cursor);
static void* GetCursor(void* handle);
static void SetCaret(void* handle, void* caret);
static void* GetCaret(void* handle);
static int GetCharHeight(void* handle);
static int GetCharWidth(void* handle);
static SizeI GetTextExtent(void* handle, const string& str);
static PointI ClientToScreen(void* handle, const PointI& pt);
static PointI ScreenToClient(void* handle, const PointI& pt);
static int HitTest(void* handle, int x, int y);
static int GetBorderEx(void* handle, int64_t flags);
static int GetBorder(void* handle);
static void UpdateWindowUI(void* handle, int64_t flags);
static bool PopupMenu(void* handle, void* menu, int x, int y);
static int GetPopupMenuSelectionFromUser(void* handle, void* menu, int x, int y);
static bool HasMultiplePages(void* handle);
static bool CanScroll(void* handle, int orient);
static bool HasScrollbar(void* handle, int orient);
static void SetScrollbar(void* handle, int orient, int pos, int thumbvisible, int range, bool refresh);
static void SetScrollPos(void* handle, int orient, int pos, bool refresh);
static int GetScrollPos(void* handle, int orient);
static int GetScrollThumb(void* handle, int orient);
static int GetScrollRange(void* handle, int orient);
static bool ScrollLines(void* handle, int lines);
static bool ScrollPages(void* handle, int pages);
static bool LineUp(void* handle);
static bool LineDown(void* handle);
static bool PageUp(void* handle);
static bool PageDown(void* handle);
static void AlwaysShowScrollbars(void* handle, bool horz, bool vert);
static bool IsScrollbarAlwaysShown(void* handle, int orient);
static void SetHelpText(void* handle, const string& text);
static string GetHelpTextAtPoint(void* handle, const PointI& pt, int origin);
static string GetHelpText(void* handle);
static void SetToolTip(void* handle, const string& tip);
static void SetToolTip2(void* handle, void* tip);
static void UnsetToolTip(void* handle);
static void* GetToolTip(void* handle);
static string GetToolTipText(void* handle);
static bool CopyToolTip(void* handle, void* tip);
static void SetDropTarget(void* handle, void* dropTarget);
static void* GetDropTarget(void* handle);
static void DragAcceptFiles(void* handle, bool accept);
static void SetConstraints(void* handle, void* constraints);
static void* GetConstraints(void* handle);
static void UnsetConstraints(void* handle, void* c);
static void* GetConstraintsInvolvedIn(void* handle);
static void AddConstraintReference(void* handle, void* otherWin);
static void RemoveConstraintReference(void* handle, void* otherWin);
static void DeleteRelatedConstraints(void* handle);
static void ResetConstraints(void* handle);
static void SetConstraintSizes(void* handle, bool recurse);
static bool DoPhase(void* handle, int phase);
static void SetSizeConstraint(void* handle, int x, int y, int w, int h);
static void MoveConstraint(void* handle, int x, int y);
static SizeI GetSizeConstraint(void* handle);
static SizeI GetClientSizeConstraint(void* handle);
static SizeI GetPositionConstraint(void* handle);
static void SetAutoLayout(void* handle, bool autoLayout);
static bool GetAutoLayout(void* handle);
static bool Layout(void* handle);
static void SetSizer(void* handle, void* sizer, bool deleteOld);
static void SetSizerAndFit(void* handle, void* sizer, bool deleteOld);
static void* GetSizer(void* handle);
static void SetContainingSizer(void* handle, void* sizer);
static void* GetContainingSizer(void* handle);
static void* CreateAccessible(void* handle);
static void SetAccessible(void* handle, void* accessible);
static void* GetAccessible(void* handle);
static void* GetOrCreateAccessible(void* handle);
static bool SetTransparent(void* handle, uint8_t alpha);
static bool CanSetTransparent(void* handle);
static void* GetHandle(void* handle);
static void InheritAttributes(void* handle);
static bool ShouldInheritColors(void* handle);
static bool CanBeOutsideClientArea(void* handle);
static bool CanApplyThemeBorder(void* handle);
static void* GetMainWindowOfCompositeControl(void* handle);
static bool IsTopNavigationDomain(void* handle, int kind);
static void* WXGetTextEntry(void* handle);

public:
WxControlFactory();

protected:
virtual ~WxControlFactory();

private:
BYREF_ONLY(WxControlFactory);
