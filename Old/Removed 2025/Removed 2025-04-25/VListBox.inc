// <auto-generated> DO NOT MODIFY MANUALLY. Copyright (c) 2025 AlterNET Software.</auto-generated>

public:
bool GetVScrollBarVisible();
void SetVScrollBarVisible(bool value);

bool GetHScrollBarVisible();
void SetHScrollBarVisible(bool value);

void* GetEventDcHandle();

DrawingContext* GetEventDc();

RectI GetEventRect();

int GetEventItem();

int GetEventHeight();
void SetEventHeight(int value);

bool GetHasBorder();
void SetHasBorder(bool value);

int GetItemsCount();
void SetItemsCount(int value);

ListBoxSelectionMode GetSelectionMode();
void SetSelectionMode(ListBoxSelectionMode value);

RectI GetItemRectI(int index);
bool ScrollToRow(int row);
bool ScrollRows(int rows);
bool ScrollRowPages(int pages);
void RefreshRow(int row);
void RefreshRows(int from, int to);
int GetVisibleEnd();
int GetVisibleBegin();
int GetRowHeight(int line);
bool IsSelected(int line);
bool IsVisible(int line);
static void* CreateEx(int64_t styles);
void ClearItems();
void ClearSelected();
void SetSelected(int index, bool value);
int GetFirstSelected();
int GetNextSelected();
int GetSelectedCount();
int GetSelection();
void EnsureVisible(int itemIndex);
int ItemHitTest(const PointD& position);
void SetSelection(int selection);
void SetSelectionBackground(const Color& color);
bool IsCurrent(int current);
bool DoSetCurrent(int current);

public:

enum class VListBoxEvent
{
    SelectionChanged,
    MeasureItem,
    DrawItem,
    DrawItemBackground,
    ControlRecreated,
};

typedef void* (*VListBoxEventCallbackType)(VListBox* obj, VListBoxEvent event, void* param);

static void SetEventCallback(VListBoxEventCallbackType value) { eventCallback = value; }

protected:

bool RaiseEvent(VListBoxEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter) != nullptr;
else
   return false;
}

bool RaiseStaticEvent(VListBoxEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return false;
if (eventCallback != nullptr)
   return eventCallback(nullptr, event, parameter) != nullptr;
else
   return false;
}

void* RaiseEventWithPointerResult(VListBoxEvent event, void* parameter = nullptr)
{
if (EventsSuspended()) return nullptr;
if (eventCallback != nullptr)
   return eventCallback(this, event, parameter);
else
   return nullptr;
}

private:

inline static VListBoxEventCallbackType eventCallback = nullptr;

public:
VListBox();

protected:
virtual ~VListBox();

private:
BYREF_ONLY(VListBox);
